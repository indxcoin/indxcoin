// Copyright (c) 2009-2010 Satoshi Nakamoto
// Copyright (c) 2009-2020 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <validation.h>

#include <arith_uint256.h>
#include <chain.h>
#include <chainparams.h>
#include <checkqueue.h>
#include <consensus/consensus.h>
#include <consensus/merkle.h>
#include <consensus/tx_check.h>
#include <consensus/tx_verify.h>
#include <consensus/validation.h>
#include <cuckoocache.h>
#include <deploymentstatus.h>
#include <flatfile.h>
#include <hash.h>
#include <index/blockfilterindex.h>
#include <index/txindex.h>
#include <logging.h>
#include <logging/timer.h>
#include <node/blockstorage.h>
#include <node/coinstats.h>
#include <node/ui_interface.h>
#include <policy/policy.h>
#include <policy/settings.h>
#include <pos/kernel.h>
#include <pos/signer.h>
#include <pow.h>
#include <primitives/block.h>
#include <primitives/transaction.h>
#include <random.h>
#include <reverse_iterator.h>
#include <script/script.h>
#include <script/sigcache.h>
#include <shutdown.h>
#include <signet.h>
#include <timedata.h>
#include <tinyformat.h>
#include <txdb.h>
#include <txmempool.h>
#include <uint256.h>
#include <undo.h>
#include <util/check.h> // For NDEBUG compile time check
#include <util/hasher.h>
#include <util/moneystr.h>
#include <util/rbf.h>
#include <util/strencodings.h>
#include <util/system.h>
#include <util/translation.h>
#include <validationinterface.h>
#include <warnings.h>
#include <net.h>

#include <numeric>
#include <optional>
#include <string>

#include <boost/algorithm/string/replace.hpp>

#include <boost/assign/list_of.hpp>

typedef std::map<int, uint256> MapBIP30Exceptions;

// BIP30 exceptions for Mainnet
static std::map<int, uint256> BIP30Exceptions =
    boost::assign::map_list_of
(2278, uint256S("0x716fdcfdb83fd78990def0756c2a5f9f296e67a3dc8e55602566c9f728815405") )	(35466, uint256S("0x3f0004bfec576903947a162f65bb23781cc75cf4a87788cfdc6310d716e19e7e") )	(67078, uint256S("0xf6070c10ab24fc5e84fe165bbfa4d43c7e0be5486f8d67143929adf44223f98d") )	(95434, uint256S("0x476d5bb22ee2468bb8f671525cd824d7349267a65018140026041eae9ac2f887") )	(122904, uint256S("0x8fbd0f87631b2b3a7166130ca7afed9c4b473a01b6467df925b8b87c1ea00bf6") )	(175976, uint256S("0x63c1a864e17a48626372d0fe79a48e4626c67703acc683da8e062c3869eada39") )
(2329, uint256S("0xf6c21772aa18bf14f9c3420da560ba873c4cd0ff6812bc356a1b6457a8dc12ba") )	(35546, uint256S("0xf87c1c0818a4874420322d35d3237bf80d07e636a64ba7502ef4f65a3536c21d") )	(67085, uint256S("0x1c2bdb27b1d8a17aa6b718ffd5dd86e1b90fba255a0a9961782ebd10e2872384") )	(95533, uint256S("0x732a1a411d2219071bfa7609fa7aed0a4126d5ed9d2d47cf6c228c454bf33550") )	(122976, uint256S("0xce666b25d41877607a4c5558df2defb28c51794ee3d407cbfc411183ac0f24e0") )	(176122, uint256S("0x01c75d657cfcef16f256863cf6de752ba6fc4a4d77b606c6a4760c819c0ade64") )
(2333, uint256S("0xbf8324603d2af90f2854c5331e3d4191d3a9ab07e9a13f21db4e3ce317f561fb") )	(35603, uint256S("0x5e4f05881213be433886bea9916bee4e8a82d4786b2cf3ce9d2b6f4135db76b6") )	(67134, uint256S("0xaba71fb2c1cef83b49cf5a431539049a597adb42e11b3bac4f25f5f59894bca6") )	(95567, uint256S("0x018e299abe6d1802ad698b46dc777fad5ec513dd6f3e2dd920e3496745027fa1") )	(123030, uint256S("0xb9906833725b51f53a42a86398a91a6a845ce89e2c5ff3f6b43060ae7247f391") )	(176256, uint256S("0xd513295f77f57bfa56b0aef740e4587654b62729f669870663ea17352c2d6dbc") )
(2353, uint256S("0xbe4f64f3beb2ed2aceb112fd4f7ba22ebfa4b7a8cb9337bb5cdd6b70e9507432") )	(35620, uint256S("0x3ea4899b1e7a237bd8245896c651f71af467294c54f67e8ccd367aa1e2035c10") )	(67239, uint256S("0x5cd69297a86abc83fc433068ff8460f873490c418a46311cca603b1e06903e5e") )	(95660, uint256S("0x64ed411238c4ecae80889883cdcb729e55f01aeab65c161ec327536039152c77") )	(123040, uint256S("0xc0a74d196d8cf7f29ed2e3b582671644327c625a58740dccfddaf8c47851048a") )	(176291, uint256S("0xc0cffba303ede029d1a16c18e37119ac5e75f4a93511db7766f9597e16f81f3f") )
(2398, uint256S("0xcda9befdc654dec28643d61648f8d38c7beba2631882e0d1a4a67b8d40466e1d") )	(35629, uint256S("0x933bfbd605a44c02871a4870077825e8eb8f4a97ee34f892a5d5be1fd2e6686d") )	(67244, uint256S("0x8ec3c9aab9abfa964b4ac0818aeb89fd80d31a3647ca6635463ec9ec4d038f9e") )	(95734, uint256S("0xc551ec8e60ac543513d2b5b9342050aec58b9d3d887584007a38cc102209f249") )	(123074, uint256S("0xbf1a519b0f6a18e9246f8fc0a0499dbd26fad923f78139c288e1b795a5d6f523") )	(176329, uint256S("0x34d826671c99ee4174be3f418c29ca2089f26cdcfd4306fa1f14ac3df957da90") )
(2431, uint256S("0xb1d8420657a63f4301428c5f0ec67aa51ae41abaa494da3c052ca2b4493f21f8") )	(35753, uint256S("0xec856cc2c7cd449c900a66c9332658ed08352c89b64e2d23f6724c63f24c36cc") )	(67268, uint256S("0x9c1c9ed5487d8225ae44f5ff71970d5cb85bf79bdba411f842ec48e0a5b94118") )	(95805, uint256S("0x89adc260f5cb50cc85ab18ff26494af39b49af964645a806d7949e65c9f47e9c") )	(123108, uint256S("0x585c46a5780749d02d02d87923f55a8f778d6e1c0da7ffef4349c4c41c4d8e27") )	(176643, uint256S("0xa27a014122a2ed8acd875090b25ef0c8670946cfa2b4b32b86df444ac9b3c421") )
(2488, uint256S("0x43e82411c4dd31cf358fb2c4a6bea011389af177387869833c69b44e908c4fa2") )	(35797, uint256S("0x84dc324492d57d3bebda75794983f7abe27bb0fb65e33f59db6f345140e655b5") )	(67329, uint256S("0xfc28cddfa66141f3d294274b3de1425abca78e1c1e81f64d7213b5a89277fecb") )	(95873, uint256S("0x0d5d2eb8a2167653551bd2a59a2d9990a84c38c4324632e7690d7372334f2b55") )	(123119, uint256S("0x82921349d9b2d5c98d949711c4588a9f457f4f1aaf8acdfd88753498c015976c") )	(176698, uint256S("0x8f0b9681db35a66c289c3390d2802c45d891667a7bb8e9185c70341138aa2485") )
(2501, uint256S("0xf3df2928875bacddc19e7180444a376fb0e4b37724d67158180b4c7520291d16") )	(35857, uint256S("0xd1d3601522a7540581ec497e46efae795500e4dfdbc24143f4bcc35990697e18") )	(67338, uint256S("0x6a4cb57222e7afc3cd19bdbb3e5dcfb4f68e371baf4b1991beee61f47ce8273d") )	(95906, uint256S("0x3493ad33db8aa96ccf07203fc0f2bbd4cbbd1a6c2455120bbe37ce58831c9e8a") )	(123133, uint256S("0xc33cd78ded15958ab6e9d401802535150f4495914a3decd2b45a18d7854cb923") )	(176831, uint256S("0x5cefac8bd60816f0c95992fb27d1f745b286c4439722d4d95426fae5367fc1b2") )
(2516, uint256S("0x93cfedb43f3b3866a4356841311f84f9c6a1da294c7ced3cf97e95c587d86900") )	(35930, uint256S("0x4a346652e00937b0437aeccb97d71cd15006b9962fe4cbf2b5e802098fe23d88") )	(67349, uint256S("0xb6af8ea49bb779ac878d9eebad9dca74a59b2a19aee842ed5466f2b9e0be4409") )	(95913, uint256S("0xaf6258a2d0cfa228c43b9447487028157ebbed63533671bec39e176322367ed5") )	(123186, uint256S("0x9b0ecfb85e6855b51bc58fc2388c921626dad922f6c86878b72e885c52a218f4") )	(176837, uint256S("0xd37b6548d216c35b5dc36d98927e122d64b31267cd8b31835576d802b4fe615d") )
(2532, uint256S("0x69ba234d8bd7e0b514f45756816ea071f2878daa8c85d5ee8b2228a3e7365f5a") )	(36015, uint256S("0x554cf60bba265c60b29a5aed49edff7797fbd2bae3bcc864e7634796cf53303a") )	(67384, uint256S("0x023ca812163bd95abbb9ef7800357bc7b62fee780dd7af3f9d8a0f11aa5a34a0") )	(95940, uint256S("0xc76a2a7982b0f0cd8fe3177a3dc8f62e66715e446cea947fd55d42911bafc07e") )	(123228, uint256S("0x7423c902a88142595f88aaa0fdd9641327cae2f255c90a119d03cf1a1a1e0412") )	(176971, uint256S("0xb7536dc3197f34df45299e2a6e3d521084a8efee5f51d376cc0c341c33c7c181") )
(2535, uint256S("0xdb437503f0d92579601e5d894303b2a57531c72bfdee16ac87ddcdacb305a566") )	(36019, uint256S("0x40ae725c2c86afe4a47ebe9647cd6812c930f19ef5a4e5b849ad2e1f501322a2") )	(67386, uint256S("0xd488a0c6b1c5891fa3c9cc633772563bc82370af855d7ad9ed56f86731e15798") )	(96032, uint256S("0x9923e7646860bb8f105d3d5a416423ce467997e968c9c2391ab9380875a200b4") )	(123327, uint256S("0x6c87186469373d151b01767fafb8bbcdbf251099f43f1a35cd64ee8f5184c35a") )	(177077, uint256S("0x2c0efa41df1d1f2acdec99f513e4fbbd570e323438fb05281d64d104c8b1e45c") )
(2545, uint256S("0xc2e1bf2db1e351ce99cdaae25ed9cfe6d42913705650687e90486940c241ed5c") )	(36023, uint256S("0x54654a6a8868e899768739ebc9b24ae38a28a6a5c094b2745c54bdb02d2cf270") )	(67412, uint256S("0xf8f93b037d6019e1356451d8b6e251f4dc735d74870e91bf0a5623969446f8bc") )	(96116, uint256S("0xa7e0802d052d0fde3a59a83f50326ddd62401db81ff3aa495bd23169017f2e9a") )	(123419, uint256S("0x90821c011fc37e07c38f44c843d9bdd08cf6680a96388848578604a2dc9546dd") )	(177227, uint256S("0x0fd4f1f679f8fa192187b7894c67d8e8b5f232417cea52910b69649d33720a79") )
(2608, uint256S("0x1f8e1b96dcda78256c2b899f69d1b4c5f6aab7e1b3882fca73c5b58617cde91b") )	(36042, uint256S("0xf202a075937fcb5b8bdc51a7a23ff8fc353b4ede51d6c37c83289529f5a0a6af") )	(67443, uint256S("0x2098a79d9adddef4b035a8005ff9b8c62adc3f94003f0eabee21d65ad365fcaf") )	(96186, uint256S("0x170052052be700629544a9130e12b7784c97336c637f3043e282c25dd5796859") )	(123441, uint256S("0xe7bb78f2105e6f3dccb80970daab01e688cb07aba7181ef7d88f8349998b4c2f") )	(177270, uint256S("0xf7dc46e8cede242565555264834d7633118a5b39cb3077dcad4e0593df195b7e") )
(2649, uint256S("0x2badd169d0d0fcca2343f484e5f83c01eb03169c89ec0a784ee9ffa34c5460a4") )	(36157, uint256S("0xbaf870824c6404c34a0a0e7c35c160a259539cd70f7a6ab3a1b530e99ae01589") )	(67453, uint256S("0xfbc352955dc9e2e62ebaf729a793f9912be874db03a36036f9b0b033989d4026") )	(96192, uint256S("0xcb48c9ec89c05120050c822eb99003baa3f1e590f3116c9b3c66f461ad6cf9eb") )	(123458, uint256S("0x359e864933b6a6bc2c829f27aef3f8123f154be98cd2204b68e0ce4b5e5062df") )	(177298, uint256S("0x2bf4e23bc3e36167874690885556b9ca5cc3b9ce85b3b52f29bc34305d602dc0") )
(2670, uint256S("0x704e2842fd82a8cf37c3cb2038deecb27d65f77aaa216681d81f0dd99f7e820d") )	(36194, uint256S("0xb3f32ce098cbfd5c582811f6394f17539c8bd0e83cbef6c66cc97d50cc3d89fc") )	(67469, uint256S("0x2a9f922f6bc1c2e91e5b11678f51c47f238a41ffd6b039a5a22738242e146794") )	(96299, uint256S("0xc57df1feaf5b304786442bfe41de88861601cd057e758c8d5ad71477121a8dbc") )	(123519, uint256S("0xa5538d4b08269e8f178845e6b9bdc47c1bae34f2bec2c7e525551ab4cbe4ab76") )	(177331, uint256S("0xf244b7cce936913c9dbb1115e7ac027530405a34aa2cd10318bbbb84e3e6532a") )
(2726, uint256S("0x65dc1f0179b4d5a9c075a7babe977c71f1b66e089f54fbcf17b755327443a8d3") )	(36403, uint256S("0x2becfe0e87e1b2308c94c3db13976d9ed99ea688a17ede4451c52d726b2f7d99") )	(67560, uint256S("0x60eb1c248d877f2f98b189408f117403f4d4e6cf673aa0261f2bffccd3295685") )	(96325, uint256S("0xef32e228e59c935ad46f1e7041c6f9b165b943633374007454f9722196a38755") )	(123587, uint256S("0x087fb58467fa80a474f01abd8d8fa2345a1340922ffabd707de7b60f26d8f6a8") )	(177371, uint256S("0x30f03190e5f0dbcb8a07310597d4be9f57c81331e978669b6ac297eec3a12912") )
(2855, uint256S("0xf12795b8e6358b987893a38135451bca288f4ca494818ae70df6d3c55e5b1c26") )	(36462, uint256S("0xc5f09676055d566ab194bb68b0c9330ebc75c152a01133402dc40c18cbc85a24") )	(67597, uint256S("0xf1127c2d06528c00e6d735a5dbee0b47a255e384814bf56ef223dae6c0ccb5f3") )	(96369, uint256S("0xdd23fa071b8c987fd86fb12ae073ed2595aa00a7ffaaf636cd45e299639f220d") )	(123642, uint256S("0xa71bc9c05a84bebf155fcb49f92c04671929f9b4ce22e0e781420294eece8458") )	(177513, uint256S("0x4bfb95c7f40ede1f3b435e518b5dc345c48a8041551c836bd1cf10e0a0a53c90") )
(2865, uint256S("0x65794ca6c2d3b9fe6c6760494f213c42c10a0d5981e144a2ddb004edd6d41a13") )	(36485, uint256S("0x853327e1a4156f4762e3ed9ea104a558b158db577b15aef626fb5d05fdea85bc") )	(67602, uint256S("0x9a7dd2abe2ad5d59b854907c1da591490fd4419507c242a4b4dbfb3ab0d9a73b") )	(96510, uint256S("0x3629d1466169f8b0c3b53cbba577ca42e7a9de7df100b4f5aebbd243654dc8c6") )	(123658, uint256S("0x6fd2bc3c5691d7d9d4cbd9f97eaf4a4e80327c7f1f25a6cae6d487136adfeb11") )	(178007, uint256S("0xa23a2e81c9c49819fbeb53454d7c577df4f1de4e8267ccc0bf3f5874419db032") )
(2892, uint256S("0xb16bb9d47a7d7a50e4527893347be9cba3d0d825cf8ff4f410b33ee27ad6ae85") )	(36504, uint256S("0xe0ba39416aa59d93535ffe3529a7114f7e07b9f6f75420618bbfdcd35af44f4c") )	(67701, uint256S("0xab4f21a616f7ad9584ae2214e6f0dfc2a36170ce2aeac208ba0abbf93fffccce") )	(96603, uint256S("0x1ec5fae0ee5b5799b872bce4e061edbc005259a60c2b56f9f4a139d0ac488493") )	(123678, uint256S("0x27c927d25cb087942de463e4e3e6e010402a1267147c49c01a7d2e2863f44e9e") )	(178046, uint256S("0x3fb073004bf2b6e15682371e7617115c1f95420bdb0a95383d5902b138368ae4") )
(2907, uint256S("0x4a566f733267e020daef4390ba64ef7513405d517a015141d7cbbed789a1474b") )	(36604, uint256S("0xc3b154e619424d1c60b1afcb95daa18f072350fbf3253e3efe244106acd8a621") )	(67707, uint256S("0xb405a3df918794aa26f6ddc9b65c89431c6694bac11d3c9f3ae744d1c7858908") )	(96605, uint256S("0x781b1e244ab7af8f564e80a2e8965efff3723e8ad749687ebc33a50f5592f871") )	(123681, uint256S("0x42e9888c0cab9ebedcc2fd3b67849d5366a476c04414ec285a7db4907a2b75f4") )	(178098, uint256S("0xbfa452d0467db8d31e6964c9f3095563dde87427cba5530c6f12fbbe36f846cd") )
(2917, uint256S("0x2c0140a20de225e551c648e9adcd7afdca4d16df040c6b96a7a9b4a26debe937") )	(36613, uint256S("0xd78cc3e8881a02d2f26e0f7fa1939050ea37ce5e728545a01c15dcfe1b4361e7") )	(67739, uint256S("0x225eb58cd1c36e952fe89d192e56fb276eddfe01e1410a6688944f71665b6f5b") )	(96649, uint256S("0x321ac2b4a0b31aa9690c8b8c488615d5a147ec89cc40ef92d4d350c0c178776e") )	(123726, uint256S("0xbf354abcfc4b0588430186104a9e8cc8d26f15d1e5d0ad77eb099b50297bd090") )	(178348, uint256S("0xb8f56a459ad5783fdd16da971fb9a98b94ec4fc6dd09bec97e2c008cdb139b9b") )
(2978, uint256S("0x5fdb8b98a0991c27c52ecbb3e99b068cf9216028bbd04f39b98d1bc6072f9c51") )	(36789, uint256S("0x2794ba9fb6455e63ee99f17ece8710bd9a8a548fb6a6e36bd3ed587fb184211c") )	(67751, uint256S("0xa18d21ba86ae163fe7287367988503b8fcac12eb75f8278663a9b1b682f92686") )	(96692, uint256S("0x59f07b036f14241b558c0b04f6fba42c50f7f2673f60b2adb99842e61add76cf") )	(123779, uint256S("0x50483aad3de4af1f3dc86d1edd36b80cbddc57557ab328c6ebe6f044a96994c7") )	(178370, uint256S("0xde9a11d15fe5b312c451e0fbc83f430c30fcca95163f906228a80bde0acc37be") )
(3057, uint256S("0x3e134ea7e10f18baa1dbeb6952f961094bae19aeb23ffec17772807943dcce43") )	(36861, uint256S("0x5e326681499909aa3b817b8b3f8bee27a6b30ae10b3c900c59136373895eb2f7") )	(67838, uint256S("0xba25c224df5ad741c93e92884a4ac8f98465ff725f63c9acf9f76c9a3ff92d2f") )	(96715, uint256S("0xa9c8595ee42e0d522f898401c006018dc7f34b0d598bf1449a5b0652639bb967") )	(123836, uint256S("0xace3148eaee8400d3f76f897dd83d1ceb6e54654ea58560d89aceb47e1af5b05") )	(178517, uint256S("0x25999037760f31936ebc2c3eb04c1b8069ae492d0bd518256c2c1dc5689c11da") )
(3087, uint256S("0xf72a08396f9e63a66befcbc215485d9bd6397f3208fe959d56bab5a39d4f8b6a") )	(36889, uint256S("0x08e4959eae61b50506a4a6250dba8dc824324fadf35c5b1dc52b776250cbf1ac") )	(67870, uint256S("0xa1ef013e51e0b5dc9b721993f5dc640d70b3dca25a54240aeba313b9e1db8c0a") )	(96733, uint256S("0x9fdc3b96c33c23898e7ba6e10b119bff297c2a23619b502fe07f615fe7db98c6") )	(123882, uint256S("0x7aed091abf07b0cddf4bcb2c17fe8a53675cc2838e290101b81c00634b37572a") )	(178540, uint256S("0x27e3b58b3dcd1407e8682cd504dde46d351afc14e52fccd427b4cb8885869b3f") )
(3185, uint256S("0x863b953a5e0a622b3ee27e7b5c906b0a1d18394648c7cbf76d56c70079eeccb6") )	(36901, uint256S("0x3a224246ddbc4805263aa00fcfd35e47969e756b83c6f977f1c9c234301df5a0") )	(67923, uint256S("0x4472febe92301dca614e15e266c7bc2f46e420bee69659e88e27c08556bf2d9f") )	(96816, uint256S("0xa80a42fca4183e0dadfb03e462253a8cfe133161e71697cfb0efa107d7675b43") )	(124014, uint256S("0xa0785284068a737a1d27ddbb71641acea5606a651402c8cf69abd3f3a13790fe") )	(178630, uint256S("0xe858ea06f4077a528b93a1598007dcaa3c577289e20fa6f775c5d800f578e691") )
(3202, uint256S("0x5ffa3fcad8ee74712a71d538d6aa99818bbfef47962f4297f5968bc97e9d6b17") )	(36958, uint256S("0xeb1b3c339e90f959de3d6b4309b92f4471b41cac700ee6d183c0660c5a59c6a6") )	(67940, uint256S("0xa685d52623eb084b25a018578a1fdafa1abfb5aa65565716f2de5531b92ecb62") )	(96829, uint256S("0xdf60ce89c64e687264392dfd089ac30bf722912be7d16d2dee250ca9102ca859") )	(124022, uint256S("0x191b47e7d39e8e791c8b873c72deebddc014874a4212e1f2fff4086e27272539") )	(179175, uint256S("0x9d777a857125dc7024172c35e92d882c284caf5404d0f08126e70ea695f988cd") )
(3244, uint256S("0x80bca13ac86e9cb41f751ab61c3b4ca9f2a6b5793d5552a072a085248818b815") )	(36969, uint256S("0x28e94cd6f22fa89bb2464995b2f32c4b9e0ce5439e4989537830c141574f02db") )	(67944, uint256S("0x600045771cdb4513c1e00bd1b52e16c1300710a25099e9cd4910169335266936") )	(96954, uint256S("0x3fed9e85636f3aa73a160f9d0963158bf88245bcfa04b50020013051a40f0676") )	(124088, uint256S("0x9f0f70b971d621cb67e7fc75f43a53b130ca483cbe286fb0376e83cb4c7216a0") )	(179281, uint256S("0xbee20b1f5c32646c2687b99792409e2ee62d69b729a801a0b0dadd8bd3b11cdc") )
(3275, uint256S("0x813538f8f3d4910bd37353749c4cbeabc723a57fe9eb299057d982bd1a4cd309") )	(37020, uint256S("0x08be890c7362af9e8150c696d6a0fee910a8c3bbe99b7ef44ffe84c322310e80") )	(67988, uint256S("0xb8c4d8bf308f7c03e6da523ba3ef8a78558c4c733ca150e5cb39b68223bd34b4") )	(97101, uint256S("0x0ced937272add64156d99ed03154a99536110cc5f4263fa0ce0974f84c5fd9da") )	(124108, uint256S("0xb7fdd2756645923aa757d81f3306ed7c027a85b1352ea6ecfa736e7f96b2781a") )	(179319, uint256S("0x5fe9e41845ad477a477c40f6f980b44ba1aaa184c7ef90f5209c2ca5bfb86049") )
(3285, uint256S("0xd15d147093c3998c007341763376ae59bd3d1753af66a480c32fc081e4b5fec7") )	(37081, uint256S("0x674786a81d47b086a79d4c88d9fb877fd8a9fad3977edce362166cac5f6dbd43") )	(68093, uint256S("0xded0c972ce91437dc306a70864a91bd104ef73e8f9450acc1682908837e4bd3a") )	(97162, uint256S("0x26a323b853f7de1a40fb6e4705a96cdc6be3f32bf68202d65d32850cb777abab") )	(124136, uint256S("0xce14babffd1b8e3a5523a6053bbdcce9d3b43dec5083dc1dbbd6a915b0dd176d") )	(179367, uint256S("0x2d68877be306a9517d76ad2bd5e30435e39374207b3ae2f5dc4af7d6f628f04c") )
(3379, uint256S("0x0e605fd27daf67291f9747da15b5b9198850cd87fe33dde94d13d038207d795c") )	(37086, uint256S("0xad82cddab68772e0a659b25f2a4aa38bfe15dd19efe56c2f2e7c83d4c53b4b2a") )	(68156, uint256S("0x6c0dafec21e4fc1c1c9f6c3fc69853be86d0152359616697d85c35d270f11b7e") )	(97169, uint256S("0xa95cbfcb1800745b353aa668047db62ef28a4bbe9b209b7a26717d3bc14111c0") )	(124212, uint256S("0x3b85bdb22dc60643694893327325d4aef6a119384fc12e8d9407583a8c14b3ca") )	(179481, uint256S("0xea47aba119fea5f8d90713a770916a747c772a2938e5800f13f642a649ca9638") )
(3411, uint256S("0x8dd27551b9a0d5d5fc9a7238b69b76b2cd5972d21e2c9c39b118f46a3941b8f5") )	(37155, uint256S("0xa9c800faefe5c9d4b658172db12b322e39577365415a89b36c8387de691e8fdc") )	(68180, uint256S("0x0bd7c9d6666cc6884689368cf39fdbcd29bab4e078315b2abdb97e3d24a3cd85") )	(97186, uint256S("0xb11a697c9ae8a41e875e1429bc3af4506fca5ee9bf39bbcc03f284973eaab2dd") )	(124226, uint256S("0x2ee60130dae37baee64a0cb88da459179a354a5b4629c792a3a2561d7f59f738") )	(180515, uint256S("0x342dbc034b529535d5c0c0e8be01eaf47540b27b59cc65fba80fe3a51babf03d") )
(3460, uint256S("0x0f83a072cf9773db198c5f83457c1c889c3ea563ee80a066027350a2c0166ac1") )	(37188, uint256S("0x923fc4bfb2b327555b8774f5fee5329394596757afd32fff4e9587381637698a") )	(68191, uint256S("0x5698484d89983bb8cfb5fa3cb7122afbb2b0e05fce5fcdd31acf5c1c0a7aa717") )	(97199, uint256S("0xe51202f1beca60e6e4d133a9f05dcfb9fe8d7b66715a80a1e51c9aac27cbb30e") )	(124237, uint256S("0x887c7c1f1489287af923962049b18ce64018c04f33b6c6872192158115587dd4") )	(180559, uint256S("0x88801f123ca20cf4d7e997d2cea85dcc838dcf0ee95c185ae619a934d1df69f7") )
(3495, uint256S("0x94339ad6dc272d40abc9c79773c865e3b9537c2b1439535fddbbc82544fb1ff6") )	(37202, uint256S("0xd11dfa8145178a3a382189d29f066c961c4cf87df8e43e7e9963a76e8d01c143") )	(68199, uint256S("0xe1fcebb72e900755dd5a0afccee435aafcc881f541fb09f99a6091fc0449cd99") )	(97277, uint256S("0x4e43ba241affdec214c4ddf878b79afaf1e2a472593e6d56f93a75403f87697e") )	(124246, uint256S("0x92e0ec81451ab1cac6b04bc9c4e0a754e4e39681d17433127e88262e76788c09") )	(180724, uint256S("0xf759f1420c5fd35085b224743672750528666e2458c006478764a2ab2cf8bf4f") )
(3653, uint256S("0x7105d3b62675cd92f76eaebbc47e2f44bfc044a8f8b3e9dc356a310e4ec096ad") )	(37291, uint256S("0x850f15d54f7c6beb82702f7d2a7b24cb1f08aa94134439b7e6d8887ae0bdd62b") )	(68254, uint256S("0x08882f0ead24be3ec070f89f8df63ac163a6e711509286e85972b4d95a741c1e") )	(97299, uint256S("0xb58055f2c10bf0caebd3cbf32ba82f7a25191b5b8dec2d2decd6ef7c60f45967") )	(124248, uint256S("0x4c9f1217cc9c56c58947008d691f1e49105f108b88ca9fb5b174b3101174f9d7") )	(180935, uint256S("0x6e05f4fb87a1afe4c63173f05a431a95c7d974d00b881905d0aaef1454c98fae") )
(3657, uint256S("0x5cbbe52ec09b6829a4029ab3ca2d6bf08f9ae07309c71672b080eba718d5b33c") )	(37362, uint256S("0x79890ae9ff1100305bd3c2885baa6b9c6f0bb2c8b2d7f734d3720a5745c81a08") )	(68267, uint256S("0x8f112f426afb438be8d951beb00a5e6fe0cb7811a45d90e46117a8498598bb47") )	(97314, uint256S("0x8772eb8102cbb12a9f84b71808ea42afbbba64784c451b5dea8a633cd1ed3219") )	(124287, uint256S("0x0eae604062a2ff5e2f96de885d2d730359e1b36500578012f2d01b2387b3e592") )	(180959, uint256S("0x0072e83579aaa18a9e55d3d923c78b1c98cc833f6ecc22fdb6bd475828db0fdd") )
(3750, uint256S("0xc334a74525865f9feb406111d189b68093b09a8f54a77946d23607bcc334508e") )	(37411, uint256S("0x059dfb8530a08f2882fb063cd08f38af818e6a810eb71251f6f271ff471c30b8") )	(68296, uint256S("0x85c026cd47c6c22055c5dec0590edf94db8116cb01c2a8764ed6a8898523be58") )	(97355, uint256S("0xa455f46ec8ab83a48ca90f0ecaac7e0ba51da2827351a92d03c5b5692c17e013") )	(124294, uint256S("0x73bc88534ddb0a62a3426e2a48d71144aa11bace50e93a3bcddb9263fd1cc6db") )	(181081, uint256S("0xc80060d9ec2848692bff104b7cf37d7ae68ba6fce4260a53212f06202ca73b58") )
(3794, uint256S("0x1f4a3128371cb6e53484a6aae3fee564ff6882351da1cb9ee2430b55065a75d1") )	(37462, uint256S("0x034a98be81355d1097ecd6f17c327de988d891ea6b76affba3722a781dd7d861") )	(68381, uint256S("0xd63269d0736cb321e550643d0f69ae48b270c838bc7887c715789a4ade505908") )	(97357, uint256S("0x2b38d8fd399064f13f866bb9b98e0100ee57d1a934bbb395eada290707ba1ccb") )	(124381, uint256S("0x1242c71ea20570479e880f5a8288c8197bce273ef3d2cad54b48023fbf8183e6") )	(181153, uint256S("0xd92c6947e57450695e93ad3bb91526d5aa3e89ef51077d8fa33a93519f49e550") )
(3807, uint256S("0xf156d967b05093b834f7f4f2581795db4b47222aa8586b1b374c5fe1b8dcc355") )	(37519, uint256S("0xdabec50ea8f877ca272e7992b68de3ae5aa6d44d5e1703a9718656c98f225a1e") )	(68397, uint256S("0xd3f5b160ff2dfae5131e207ad5c85c18ffbcc378c63902a2701cb986933bb602") )	(97375, uint256S("0x0a906e743d4b84ea2b33bb43b0884242c669dbd0d822bc4077897aeae3bb5cca") )	(124421, uint256S("0x5d3d358c4e1aa64b9eca0634848aff23aee0b49ff7cdc9be689f97f1bf346602") )	(181386, uint256S("0x086ef5ff710c1427c30096159f2d29320ab591204a9cc3771c8c168b26fd4e31") )
(3834, uint256S("0x7f40d24fa0493151dc9bc8aa45fdfaab556e6b498b5cf40a4090acc7cb5130ea") )	(37601, uint256S("0x5232c062f33ecf15cfd86f943205cdacaf802cce19115005a8a9d836c7b9d91c") )	(68483, uint256S("0x2955c55c3464fb4aa549e4de1de030dd36d09eebe28dd3b7bd4ac99f3f580078") )	(97471, uint256S("0xe5c0ba7c8ea62c3a988a101ca0c316c0e0604929e798ab0b1503df20e36edc12") )	(124434, uint256S("0x57f59cb6e4b43f0715f8400d2e5307b129af25a8e88ef3027f41ac519448033c") )	(181521, uint256S("0xe63d57e2db1b2434304c62876072fce4d3e0f55552a0d14dd97b83132f1eb585") )
(3871, uint256S("0xb296ff8635fa5392730290973484169e18009c0a1771064faa0ee9c90026de85") )	(37671, uint256S("0xd3b0ec7a16e61dc8730be039bface430a971485d3267ed71312587812f08cf7c") )	(68516, uint256S("0xaf02b0edbe75708386d4709bef218b014da179bd6f82f19946f6fb444d957674") )	(97487, uint256S("0xc75df41e52f0cb3a913814a1e88943f84ce6ec3b97770d0389f8898aea2cd9b1") )	(124497, uint256S("0x284e6c9e73e4ab9ed7932427d6396d12822444643d10edfb6cb31fd816882d5b") )	(181569, uint256S("0xefb7a731eef7dfeec33c9b1746797b448171baec1baf14535e7d82f069d10fb0") )
(3904, uint256S("0x71edbb8461cb05ff76c5d44feafd41b692e6be12f5e31b78fcbfc1202b4858b4") )	(37757, uint256S("0x3715a492f1ce4599479f0cb8e59b3da407ea2c5063ebab086b0ac5f4f901d26d") )	(68547, uint256S("0xf14e00ff3faef68fecd999e7fcc8e14ddc75f10ce5a09fe7a4369256ca08bcb4") )	(97521, uint256S("0x9b2a88424d59e7b719400d2008c531aeddc37087b0ad961ace564019c7a59d4f") )	(124562, uint256S("0x12e896b045c5e6fa43775c4e105800babc92fe40d0de45d9048f0e39b033b2ed") )	(181691, uint256S("0xcca23bb24e76790696d2e8baa39c9d8fc697f0c9828bb35c6abd40422abaf8e5") )
(3971, uint256S("0x37054e41dbd9d4d507950ec25c333681f87ad40cf6426b7b8a85a02c03539a8d") )	(37801, uint256S("0x8c11486db75ee3fd89d2d972a09a0ca19d4bd4d6bf0e95c509a8973a9774f67d") )	(68635, uint256S("0x28306f270bd4d5a0bb305d44be44d407bd4a3c373b1076c3aa5389afb1f4f463") )	(97542, uint256S("0x5d57e7724c83ed5b6c4c4cb3cc7ba0d1f003155dd9b063f86876a6434cb1cb59") )	(124714, uint256S("0xaeaf17d91348e486735e35e0cf65c5946d437af560209c21c5e38f3a62a5f52a") )	(181705, uint256S("0xb6c1252609e3fe6427a8627e859b7cadf70223ea1c951be81fcc27b672bf4e75") )
(3980, uint256S("0x84752b1d0569acf6df679407608758277eb6ae68377dab8731e0a1c0ac8c8ace") )	(37868, uint256S("0x1678ea7339847d45dbda91dffed143c9ffc3ddf9f625e6241b91d5ec49d0dc94") )	(68661, uint256S("0xc1ea8c9bd26e822db272a90c361398beae96052c2cebe3a71212b38d738519e4") )	(97590, uint256S("0x2d0b164834c074801948717c240405c40174009ef592bf91d4d16b0408eb97cc") )	(124715, uint256S("0x605af60a1c9231c0ec7146ed193a455f9bf22ae611ae059be39dbdbf9679a0a3") )	(182144, uint256S("0xcdc14ae2a83b7a29d06075f45162c6dc67a3d6a925562d4249dc91886b9ecd84") )
(4018, uint256S("0x3ea6c07350a3ceb7d380a499637cc70e8dcf87e9f5df8fd1b4cd37b877aaad4e") )	(37962, uint256S("0xe033550c4469083315a39e9c1f2feee67fbdad6d8beca86429679f601115cfe0") )	(68665, uint256S("0xd65d85d064905a4bffc856106fb5aa2595be8ba3aae1acbf40415dc8221912d0") )	(97605, uint256S("0xa7b187c5b8c7a965679b2ac635a065f33d53553473a09a4a86ae9e275142dfec") )	(124816, uint256S("0xeb5976f0759b76afc9478ba0dfe20c697bfeaeb3aa0ff13af8efb838ea3be001") )	(182590, uint256S("0x5b128c816829e6cb1ecf5ab774e90d9438fa44636f6dea48ada0420003e31694") )
(4033, uint256S("0x5175e501b76089c593f3dc660c7e1492c27b2253c9fe4c7a2b8a8a3e6148f11b") )	(37975, uint256S("0x168f271298a94265cd4ada1be18ef52aa9e76f5208736db9620c08a2460781fe") )	(68692, uint256S("0xdfc0735eb3e99ca3401100f24efd67d44726dc63aa59cee13aa947d5b33b9f1b") )	(97736, uint256S("0xed77f7cc37036079b52dfd44064cc5b7b8ce81f4faf8f22d615cbe9ce415cb3d") )	(124857, uint256S("0x0087acc43b594596b8dfa4fdfe9bf320291924735908e3f409bc0da936bb87fe") )	(182735, uint256S("0x49bbca7b4e0a8f60aefcf90189c8bdf05d6019008161becf80bc5f8cdc2b59a0") )
(4202, uint256S("0x9ee62679f4708e3f4361bf8e01f2f918dda4103d0fff22286a8f8e27f817ad9b") )	(38029, uint256S("0x38c688b4e8eefbeef86d51f0c5bdf5edf3de4a39f7efe837ad819b95a90e8756") )	(68888, uint256S("0x8004a1450f439328eb4b3cd4c4f5ab2af6e77e4a186261a4ed39674162a06946") )	(97750, uint256S("0xe09dbd9b91e81d85f3ac0c9b1fb5fc932f1f28dbd206e11affaeb716415c71ee") )	(124888, uint256S("0x3b0503bb6b80a10920a71ef882dcc9a2ab8a71fa708998051a7c0819bbd7d4d7") )	(182795, uint256S("0x84a10af778e9dcfd9dc1fbccb375cf0946854fe71a626b28bc929d253be9102c") )
(4212, uint256S("0x7eeea4ebf519db9dc905bc3e8b48a9b4a39dd6cacc7cd5e54f52031881e22915") )	(38117, uint256S("0xa8883a4185b4a52f8d806c7794808f68980c9870833516e841a90f4fb1f5b003") )	(68951, uint256S("0xa273e8a0b2ecb2054a8527018e17dac7ba58e88c18d80e411099625a2d23ffcf") )	(97801, uint256S("0xbcca36929bc49fd8aaf2093f0bbfbb3a2282041840bd69a834c07bd96c72bbd1") )	(124933, uint256S("0x7f14ad9ceefc9001b8d3460f140f7f4f4ca969caaf146782a03ed8c091613f84") )	(182875, uint256S("0xa7ecb4e3506ecde349cb92e2c904e09050da8aad48fbf243fba0659744bfabf6") )
(4226, uint256S("0x6a36409cade82e16e772f0464ce59e8d3894c969b58d63ba14d067447f3ba757") )	(38222, uint256S("0x0f4e87764ab94a6232524dfb48514369c673bcfe4e92715a5fc79b1f0e43a3b9") )	(68954, uint256S("0xd646af09fee07eaaa233d2235876d7882393a2590f94e533e52b22404d74d2d5") )	(97855, uint256S("0x17a9552300b92b255043f93172826c9023341cbe92cc441313faef189c25e27e") )	(124956, uint256S("0xe1371599a97e3eae50124f44d0c4eb53d0c37d539963b3086746af3dd0d3d040") )	(183016, uint256S("0xc733647f3e4753942c12241a0eb000afafdffe9c67d88e5ea4fe564368aa4533") )
(4335, uint256S("0xdf011bf56fd17da418fbdc936e65a1da45864a647025abc021002de3495687f5") )	(38242, uint256S("0x3b19f428e7469b94c04ac3dfdf3c8e1c70a87820ec787019da39627ae45517b7") )	(69017, uint256S("0xe632b0afcced05e1398e99929e2e04c83df4d1fcd6a332b55bf346b69f072570") )	(97888, uint256S("0x4998c84b992d9e765f1bcfeacf885e8e03801f9c33d10171be5dbb834efcc623") )	(124984, uint256S("0xab4cd7858e30b183aa601d34c1289077fdb0b38108e1ead73b6e24a3e1d87c9f") )	(183181, uint256S("0x8e92cb1d1cc2ba040c162ae4880d475f4ba74918355eb1ed955ff40dd31f86cb") )
(4427, uint256S("0x11e06550570bea5092f700c81c962d92ba27bd0cac30af7f25344ed68b2aac64") )	(38336, uint256S("0x0aae8315ae711446f8d6dcf2376fac87588f022c7409daae91bd46ed1ee88687") )	(69109, uint256S("0x9b9700b6f7068e14d56a4269cee8d700e48b91d5ee0e16d4d24cc69ba6cb8cea") )	(97939, uint256S("0xf1cfaa163cdc8b5cbbf611df11f5b3cc6148d8b17553399bf360fa120aeea6aa") )	(125128, uint256S("0x192d6e7faeeadfca2facc4e53d8aeef26e096f612a76851c0d5d23a113b28e02") )	(183299, uint256S("0xfadb0a8785ef4ff2e2db39eaf762ab437ccc4a52bdd7ba23f48df871e0a7bed2") )
(4474, uint256S("0xd079dbdfc810895642c18a1a71025d6bfc7306e5366dab0366f56f4c39b400e7") )	(38505, uint256S("0x29fcf1aed4759bf2048f9b84166d3de63ca2f49ba2bf1683f1bd79c2ae2d70c6") )	(69112, uint256S("0xd76ba7303affba8988a5db9b89e3d129dc18457a1491eb45fcbc0fe848fdd811") )	(97945, uint256S("0xc881e40fbaff72d73cd3892125bd305eb7a7e7fadebb2b38b1b826a79a20ef74") )	(125212, uint256S("0xb9a487d1c76fee481e102eeb4be8af0df67d81ace6b30973abf040ef99058487") )	(183306, uint256S("0x9f2f24ce5e04cc136d90f52e3eca0f929ad2f9a4eca104557b7ba7d0a03b8eeb") )
(4630, uint256S("0x3d5671a353956548075c702f7d6b02d83b06d486fea1dcfa6498f1c754025a9b") )	(38518, uint256S("0xdb36ebdb42997cb303e8a775a0cb571e1aff30987eb24c20e74b6dcd1565308b") )	(69195, uint256S("0x7b63a1f44dcd12715724b7b0033aa5c53f290a5e718a6a8bb4227a7bcaeef947") )	(98022, uint256S("0x82964c939b49a6a58e56430cda3be2062130da794374a7314f9364cd9bfc14e4") )	(125268, uint256S("0x90c8491e7b7a877fc1125dbb0834226bac1aa5b9b7ee1a6df5fa74a72ca80eee") )	(183478, uint256S("0x65d6d381e132d94b1e57f6fd6e4e1db68c2fc7200df8715134b90cfa6764ff92") )
(4731, uint256S("0x7876ff988bc2b38c704fc3b4422a58f40a83bcff645f3b63030a3e5cdcd7f3ef") )	(38606, uint256S("0x09bfe477612543fbf4c1216542e52a361555576898f8f71ddd91436207291f50") )	(69239, uint256S("0x7ba4c9a426775051561193c0e947d4c4df0060c2429186fe7cc7acf63a6752a0") )	(98073, uint256S("0xf01a6b9b8f9d54f3fcb999fed84172b271583f76a85403e47509d361cb380bce") )	(125391, uint256S("0x18a08ba0a33e0d3980165b43bac91b92085b9314dfb4939077e023bc580a51c2") )	(183976, uint256S("0xaf4e6ec88e29abe595c7dfcf93492b6df1af1e3cee716f0fde2020e15f604ae3") )
(4847, uint256S("0xa8527f2bc296051a129c439a78b9d804d4876e805ba84dfd4a65e77da03b9425") )	(38619, uint256S("0xdb6add44da020687e46a3d51619f38de233bbebe9cdae9cac57e4075e98912ed") )	(69247, uint256S("0x9dcfb5d19cf7a6e50620ae22bec528f48a3ea15a35785fe8c64490c666a1a24d") )	(98212, uint256S("0xc03d7e602c4f161628ee12abe30a0f2234037b21e2c7dd6275cf4b6959531e2c") )	(125414, uint256S("0x9b0de4e1b28295b8e042cbb49124153645170885eb575fc766de51dd718fa773") )	(183987, uint256S("0x67855a6c67412303d3656ea0d396049c370be07f8bb051545ed90627274bd9bb") )
(4889, uint256S("0x177371ba826459f90d94c4ffde448c0165fb316fef4d68cce0e94a3480e458a7") )	(38670, uint256S("0xde33a179777a6544902d618c2f526ecb57a93d435b3bb945590240ead58b95f6") )	(69250, uint256S("0x9bae0662888deb33bef97da5c7b6f07f5d2944262da0ea8e7311ff06e3373bfe") )	(98224, uint256S("0xca68ec825e65a538e3ed37e59b990d366f15675d40a4e570944ea85144edb453") )	(125451, uint256S("0xd1a919ec8bbef9093e5f0f1b0ff24d5faf0bbdf2acda14ffe32f8eabad990888") )	(184119, uint256S("0xb3baa460f4165070381263c7be7d4dc29442f38cd469a1c7203d413426a15d4e") )
(5164, uint256S("0x15f117617b4bd35e3f3d997111bf0eaaf2598917b01ea5410e710f063e9f1524") )	(38708, uint256S("0xabd67ed5cf16e465ecc5a2babe460ba64f485caed6e465f7c8b7e5ef47504f35") )	(69253, uint256S("0x6f53424436fe1a2f75fd7dbfccaf8ea46131b2bf18e35b87ee56be43ad0ee389") )	(98301, uint256S("0x46a92edc354f6e0f6c39b45421bed3bd88dd98f3dac0c0efcf0144aa1f6d0243") )	(125464, uint256S("0x79d5d01696fb79b75db7f92b044f39711c655689aa013ab83d97d87535d45440") )	(184186, uint256S("0x3d28f30f071cf03f84f6d49a4ce4cdd0197c7157f2d5474937236feca654a0d6") )
(5173, uint256S("0x5ef4534a121f70af73ec99103434dfa9ffbcb70dee799e4da9edd96ed720ec37") )	(38820, uint256S("0x506d8e9c6a47d22d8d38428586f231f981857b2c05957db6dcdd4ac777b4694a") )	(69259, uint256S("0x355e8650fb5320767b2603cb537b4389fe76f193c4f66685769cf6eb7591b2ea") )	(98321, uint256S("0xbda049359fe322a088d5ea590126927d07c97d48c92a94b8df70d7df153b7ca6") )	(125494, uint256S("0x3f15f0a3aa0aa741715d656606076da4dda3d5a2dda99acc4906c30a3e390cba") )	(184187, uint256S("0xc1e1854760f68c5d8e123a0182913d83047b38d4f5df1ff15ec0597023613ae7") )
(5178, uint256S("0xe4bb6d860e6d6350b3f730fc8f695eb571db4dc2819aecf1cb5e893b8855cb8d") )	(38856, uint256S("0xb9667e25015d4812ede21d49891718f0ccc6bcbe141432dd366c053e12495b60") )	(69274, uint256S("0x4270002588ca4594905f74506cd37c7b8a3988fb52ef2e5a73b062fcfb308796") )	(98348, uint256S("0xe1e7a5d232894f375ced98a2e55be3c94112728d489d54b8af0a8ecf2b13cd08") )	(125668, uint256S("0x72712f2a7205b40eed3e00d7004741b075ad2ab3ce0d3dbd63f5d4e1344bc37c") )	(184242, uint256S("0x5fc7781d7a8726390639115978fc64ad9f798ee0e7a44a4042e1a55422ce449d") )
(5203, uint256S("0xdf6b14325001d9f4b631e40290fea74e2c12ac106d2470716a26a74b6cfaa5c4") )	(38899, uint256S("0xf8ae1450333f1540d70e0f3c7f3bb15effbd9ae9cc86e068080be3aab5f43c0f") )	(69404, uint256S("0x9f8a0fc57d80bf5cd06878d8f7b8db6bd4ed2556c74fc81620a83c3bd0907834") )	(98367, uint256S("0xd44e36d2befd9148e7af21bcf8fcadd62267379dde1a724f16fe4acdbd11c2d9") )	(125692, uint256S("0x27a5f294cfd8bd2da94339341bb32c6bdab1e6234630803799abb5ec57759788") )	(184277, uint256S("0x3dbbc03387825d82eb19d8726388099f48f578cb95c62b6ce179d2fb411452b2") )
(5220, uint256S("0x9d8c2327984d3563c55c9c5746525c9f85b733125dd65318f7cfb5bf934af727") )	(38921, uint256S("0xec111467fcd71bba9e766ce1870a0dd441b781bb7c650c8460461f971a973394") )	(69486, uint256S("0xae908ca2464a15ad070b735c664828b3fb82e2c656bccee0db6fa00caf44ba67") )	(98424, uint256S("0xf35915ef9bdc9e07d9be7e0e35a18ac0dee5632ee206b9cba9602f1c25f70115") )	(125694, uint256S("0xdf902c810bc6ec866cdf33b96d3d554067281f7ae9b7c554208a5f5a8e6da0b9") )	(184326, uint256S("0xfd9bf60c32f699ae8eac24b1b24e0a93085a3c32e26ce5c62cc6925537f969a0") )
(5265, uint256S("0x43c79db55b98591c616577da99eb09da8e9bbdc7917c001773f6e73ec2f509b8") )	(38931, uint256S("0x7c000dfb9b96a996709fbe7df1c2b20c5bab88b2ef2ddc6f09e068d9732061c7") )	(69519, uint256S("0x94a5cde481ec80dc8ae117fe935b0cb54622b12e3643e2c07798dc767cccc061") )	(98475, uint256S("0xe5498808e3f89015f88f50506b5386441030f04b60704acf6a863827b8b8815e") )	(125745, uint256S("0xab720a472c559947ef083dab69fcacb854d351e5be51f505e778321fbf24c6da") )	(184342, uint256S("0xd5bdd57b58166ef79efda58d06720958e7507966ef417b1e9a891fc24d4707a1") )
(5294, uint256S("0xa714c96207b03c7d13d6ef120286f3b46c7e921a930d108ec8b5e50dd7cc8bf3") )	(39027, uint256S("0xde080eb460999dc70368357e1c6b407f17177317b257dd9e350e05bc9427df32") )	(69521, uint256S("0xf1d9e60b203361e4f5d51667b439df79130cc2b8b89e1fa31f45491aa6afe03a") )	(98561, uint256S("0x4a9c7ad3b62a2581dcbc3cdde26ec2c75aa08e0b56efdd294a2b7e8d874c0464") )	(125746, uint256S("0xdd7bea05749b42566dbbb48ebe922c3f80200a29bb27b69d8074dac18863f760") )	(184445, uint256S("0x945c59f8abbc962c605bce8b24c7f41cb0fb43a8a56ce571536124ccac9ec810") )
(5389, uint256S("0xbe1dea966a6f68388f32720f2a5962b73b3e3b44a30bac20e12d1480c7dc9e79") )	(39034, uint256S("0x15871cf510be9a5643182d19dbfa09f5701c61e5d6a3cee010dc1f30178efd64") )	(69529, uint256S("0xcc9c1805fc29e6c5763d310b54992dc66f1596db53fca736136c120faacbc7f1") )	(98584, uint256S("0xe138c7b98c4280fd2af856c16845d988ea41ba2f96b0b72955584bf993f5f663") )	(125757, uint256S("0xdbe00e65cf6e3bd008f0f44205e48f3fbd601906931c2c1c7d562afd4dc4c4d5") )	(184476, uint256S("0xf386a0b77e6d7f8f9e8db3d3e79610ae94a836ceb1487a2adf158b82bff70dd4") )
(5463, uint256S("0xfa1d835c53a765fd908086b35d63e6d73011644d244b787b202cdb1d4102d1b7") )	(39072, uint256S("0x3dfb5e660a78be0e138d5c14edd5d2ab249383f18d7b714a0aac2f57bb01d713") )	(69558, uint256S("0xd2d47df6d9fe7e100328bddb203e2d506bcafdcdbf81f32008b9c95cd08f0bba") )	(98590, uint256S("0x1e32ad29ae7cc6d78519936a143197e780c061c01971262fb476998d73a3e0e6") )	(125760, uint256S("0x16a01707cbfb020aea5d05570f1ba6a9f216a45398d86d2e881aec5487c4d3e8") )	(184574, uint256S("0xf39e28b3b21324e435e21e0c87cae6d3285c7f5d34847637a5e7696fd77cde29") )
(5511, uint256S("0x4728ecca8242c3bae6a6c47f63035e41b02a36efb584b63d39217addfb1cf341") )	(39139, uint256S("0x0465d1466697863effaf43e74f44bc9513ddcdf1b55a30097f26ac3b9c033e14") )	(69562, uint256S("0x81f89c76953a411ef72db336a88b2311b3126e718baa2942012af47fc8d0dff0") )	(98680, uint256S("0xfe7ee1aa94fb04d58ec5e8a457916b3ebc41a7742d89b8fc22cea53ce0a183b7") )	(125810, uint256S("0xd4e1d2859269ac4cba19bae57762f89fb192d7c1725d1a413bd26b7ecd82034d") )	(184600, uint256S("0x935e775265b2d37703e4addc0790f0f5ec7b38a05db2f8892bf4ac6b908fe557") )
(5563, uint256S("0xf2e6b4d52b5d2f139c3faad31aa3bd4b9e4c27db247549f9954191d00baeb945") )	(39155, uint256S("0xeba64ceaf55b0a4bd56a18bf9ac420891a5fd2163eed53114d6cc911eb5500bf") )	(69616, uint256S("0x00ecfedc6a86b6c2c7b2b7467b311282f168cff797a39063e1c7b09de1ebdf48") )	(98727, uint256S("0x3493692b596948405435bcb447b65424be817a3c2221c664438a330c06a574e2") )	(125828, uint256S("0xfa80fca8954eb3541391c08fb7853ddfe03c39bd21f6ce325c76fa9d96da831e") )	(184861, uint256S("0x9b2ad9e6897697bb35df9db51c4f2c74a01c99e1a247bafd0d92e05f4352a289") )
(5571, uint256S("0xa6c29c71bde8fc5fe633c06e624d2fc89a7e48d5edaa367956fd93310280d7e7") )	(39163, uint256S("0xff889516018035f6409e0b80ba353d2880c52cf47c657e5e9aa8665fec73a79e") )	(69640, uint256S("0x3a76f7cd58b52e7e10509516b5719f90dfcae1f216f5e5e13d850b4afa46d789") )	(98730, uint256S("0x5007b3b638dc8da6fd67a578da0a437cae192c9a52b94638dba029d3f4d9f195") )	(125867, uint256S("0x8af3d07b5ab9dfc0bb498dc418b2307d12a1f2bba2e5ce7d341a61d66307223a") )	(185141, uint256S("0x34e9da79283f44b53490193da5e11236006e5d1adde2d27606de5ae190f9d0fb") )
(5693, uint256S("0x0f95967fcf788dde6e5e8da6c180ff989bef08108a9ca39a1b300dbaf33a1eea") )	(39255, uint256S("0x23080fcf0f9057aa0bcef19ec1f5a1d3ed751b224816157a078df6f0de865178") )	(69646, uint256S("0x92e193e1a6ba270d1a4adf84aad6b5d9e06c66f13bf7960c10421297409d58b9") )	(98765, uint256S("0xfa2994cc7c55a27ddabfd1248aedab0809d85cb2b023607d9a4700d987be5075") )	(125897, uint256S("0x186e19c8725f0d06c8057ec20646866f038bee0e3c56c30e94476a66c842377f") )	(185254, uint256S("0xb0e8a00c34ccab7b5cc9b5b43e01d102e64689846bdd2993b5d119a17703304a") )
(5746, uint256S("0xe58cb27b01879bd48295a2ad0d25fa0d63f3382290ec0d181f95807adc38af73") )	(39257, uint256S("0x70f6d7972b7e03109514bb2f82d00bca0204fa0f858077760bd365a92504ae1e") )	(69663, uint256S("0xdb2144305517d4e1e7eae86a71cf9b6a74e2d79cd3e52243fe5589591e73f33a") )	(98770, uint256S("0x1d6c190894fcb57b8169256f0667b1efa6dcd23bbd28faccfe7d6677f3dff82f") )	(125909, uint256S("0xf1b63dfd2ae99a3845beb675bcba121fbe29e770cb657df761ea1916a3b3ddff") )	(185271, uint256S("0xa2f2d52ddcde046ebb157655fce7eac752273abea968e8ec3a2df5e4376e3eff") )
(5781, uint256S("0x32b5e7386d4a0c3f53e290a13e30f8839a042d4642798aad4778a7cbf1034d24") )	(39267, uint256S("0x3355e5c77c047f11d8ad017205b8d3549798cd93d86e2c8677e88ecd0c27ee54") )	(69711, uint256S("0x54b60d783484c1ed73ff06237a70591457e0592af8a72ecff8171aa895714975") )	(98836, uint256S("0x1774d0cfb54e6999b01e8dd7ca09a2a7562fad96bf3e2b335d403cae2bdc7aae") )	(125939, uint256S("0xbc02e034e16300e1d9a09e5e8431a33fbe8842776992a6bfab9d0a143327162b") )	(185378, uint256S("0x13903eae8170a156ea2e1f6a5b5daece3fe620d386ada5979799291ba6c1891f") )
(5789, uint256S("0x08872e7ea67d3fa0c84b71263a2464d63dfc6d5034f44033396935488aafa5dd") )	(39270, uint256S("0x9aa1afd4ee6051cd5a605f52c978a46e4c39b61f0677cc0dd9e5a684e351fee0") )	(69762, uint256S("0xa0c2ca8718bc9fa0d465416ab1790a7278c075b369a6adc634350d216bcd5e66") )	(98837, uint256S("0x4b133f2ea1c06f4390cb4aea8b86836c323f5b2282f1f12e3fa70615eab918b8") )	(125979, uint256S("0x52b4f3ec0c514212a641a4a683691337f6b88ce9a103b931638a3fc3436659cf") )	(185482, uint256S("0x0164dd801fd9392e219f6e9cfe5c579d638be415f034948f08496c71de95acea") )
(5807, uint256S("0x9481c5e4600e8689a28d02668fbac19f0db0ae55ef17cfc4163ff2ebca4a22b2") )	(39334, uint256S("0xdc31e331b65023dd07dc80cd0bd97b1793fd8931f32d06cb4dcaac337026c8ee") )	(69822, uint256S("0x43c8751ae6c78d67be3547d03deb352d29e72e6f08ca48357f87eb32e6454ac5") )	(98838, uint256S("0xa0ff530d9de07936d905022cdd2471801aa0b6f89d33d6dadd65204e5f3bcda3") )	(126137, uint256S("0x6d2f36b382e9543fc0f27e34c537d840b758b568a23325926b6c3bdecc6669b2") )	(185503, uint256S("0x6082811d73dd9463586c6413629fc857857cfede9ed4fdd98b1416c2fcf6a096") )
(5906, uint256S("0x3090fbaeaa24acb9859e88c8ed5346ed25e6a9a31a761568ac37d0d7b99b9adb") )	(39358, uint256S("0xec730067120735d02e8090f36263ccac7b458e219321dedacdd5dd075f0aca0e") )	(69837, uint256S("0x626a31569cd39cb99df0de5dce3f1fc8129eae948ca2b8ee85a2dfca9c577fdc") )	(98901, uint256S("0x7de2896e15d9036991a8f2318dca954504028661278d3e040447500d128df553") )	(126152, uint256S("0x1f761e3d77daf7ce9374a869d274449487729a21966a3cec2e90d157eb503130") )	(185862, uint256S("0x93b1d9a735dbce1e7902d3bae5434e1265766f51f4f10cbfbffdc170a6c8a09e") )
(5920, uint256S("0x0a83365f27c9be4549a44b401160f5f883fc043a24e359e7c26bb83f50f5b42e") )	(39382, uint256S("0x903fbf6fb966b63a1d8a70d6058d3d15adb486403bd3ac69db81c0297bd1140b") )	(69949, uint256S("0x3c02156b1dfd5700be759f7bbe8ea3094c3c596435008e7a08fd5d329058a5c8") )	(98934, uint256S("0x9d368d93626b09daa88b0781a6739aa52a2c83d06b881a1e90fb54df8971628e") )	(126259, uint256S("0x7128abd276163c79face1dbf8f915f30aa8005b66ca8ce80fbd0a537c7f4327d") )	(186073, uint256S("0x7918865923a816c06a9235ac18d6e5714b1bc7ac841d79fa6b2c6b7c1cf04c56") )
(5942, uint256S("0xf140b28d8111397774730ab285946f7aa768025c61817ad3789b3f79c25e0f30") )	(39440, uint256S("0x3fc111a84df759e897832650d26ad5ff8b717a3acaa043a49456ebf82870cd6c") )	(69964, uint256S("0xb65a4f9b8e7bba492eba6f6d2105b00783b5f94cb8d6a944665218b3f331eb44") )	(98973, uint256S("0xec7713c8fed748422a50a941f8b1d764bbf18156b31ec157f3027d5531886ccd") )	(126263, uint256S("0xd0ae8ca4b41ce960c95292eaefa32312551142c089ae605de52656523e372adc") )	(186215, uint256S("0x96f007e1204b06fa984ead6e812e19a68b5a5b532f39cbccfce164d62de552b7") )
(5956, uint256S("0x7db226928aa017406f22725333d9efa7960a9a229106406f9995c1e7921ed790") )	(39501, uint256S("0xf7ad8407eb9ad294f0300f313733ce086175a9bb5ee33fbef404c8fa06ca4750") )	(69977, uint256S("0xd784fcff50fbe878b2cb7d2073faae338a232752e43bdf37e516be74d4d0971e") )	(99022, uint256S("0x9425d8151d0122be142ef6c60b08e482b3b8c0433a3657560e72ffc73f3eeba5") )	(126334, uint256S("0x0de6303aca824aa4ef86be0098163bb960e603dd99f65de1693d261cd0ccd56a") )	(186239, uint256S("0x8c70ae522d69c011def1c85ed31758bbb5952a71ab578c1b0ff19a08ed9fcc11") )
(5994, uint256S("0xc1a88650d7c8d63b4da5eb3ffacce5079c1730049b9f5f68dd79ceecaf53afbb") )	(39545, uint256S("0x3722edbb1464161bdaf0744c1f724ff15380e4a0afb206f377c66d3551751238") )	(69983, uint256S("0x29dbfee5852d11056989d7540b1f32825cb15d3529827091d122f5266b002628") )	(99040, uint256S("0x857e60f12d194fd5594b26c702165fd0c42326e27627ecc28bb9b66952ad919f") )	(126343, uint256S("0xcdeb8cc4608a30e1a69d41f6f99c75f9d4523dda8c3a18f188847510f8ae1195") )	(186241, uint256S("0x606821fb1ef05e85a68805469f614e992eba871aba190cbc6c9c2a7f00a9435c") )
(6001, uint256S("0x18ae8234ca7855e8eaecf8a8ecca240d2b8076941c292597aba3db0b8aa36803") )	(39644, uint256S("0x8ed75f08b6a89ad20372e6a844f04e324703ee49b90837db6a0e0f52695a1cc1") )	(69990, uint256S("0xc0468441c0a69c0517dc1b8ba1c51b4a2331e6858093f66a4c14e59cb2dfb2bd") )	(99136, uint256S("0xe797e20a960015b473ed0b80549b4059fc419285f434ab89de333083b9bf0d6b") )	(126446, uint256S("0x896e0d533d291162b092066b37e37c6ec8afb843d1f412cf2058b1f7b1cae55b") )	(186459, uint256S("0x1a6989d354966c675546eefecaff2a726dbccfc66a924ca99d9f53a73bbba28e") )
(6036, uint256S("0xa708a1305c9cba969d03870118d97c7cd36f37c7ce82d54c317cd31873efd7db") )	(39672, uint256S("0x4b3f9e8728b5c90341258b63a60f71022b4c8ba12a7ebe52449ddf16c121543d") )	(70079, uint256S("0xd71a36346465be7ebf1b334b29230be43448d06ffab41624e8b4d4ef7aa6f328") )	(99216, uint256S("0xe83f8091f4f70acd8f88e70139418ea5ce8d2f03e32a7953559c1e89c537a5a8") )	(126450, uint256S("0xdaffdbed0eff1a0eb432d957918790279745375a374e09d6472b2539a5b61d86") )	(186507, uint256S("0xdf06c8cc5f7f14feb1fcef8a8e287a75144c1829dfb41b48e8e074d98ede7a89") )
(6068, uint256S("0x471b3003727d2629b97a1ee99e8c947f947294101684a144a65e88ae3a5a3fa2") )	(39689, uint256S("0x12ce3394c88f218b409fa3cb939101f8b37f598b915d280602ed98647d798737") )	(70147, uint256S("0x015118363711dceb547e54900d50e9a4dbb3e044bed8269cee89398d6f56e667") )	(99227, uint256S("0x3471479d364190dcd11ac5819873c974e0ae8099fd2ef6882ef82c957dee1b83") )	(126487, uint256S("0x55b8065abd399747e3c7420e936685828d40f966c50dce4a2013eb21408cfea1") )	(186546, uint256S("0xdfbaa8146c10dc330a48f63299b3ced470d445e4dfdfefc9e3a38df1f6bc9eab") )
(6076, uint256S("0xf69aa74d2ebbbeb2d658763f89cf60cbf6315d32b753ec4230c5ad40d60fc9c0") )	(39697, uint256S("0x1eced8f68ba00dcb9a5ab73bfdbf337991b682a2d871c2b20f80df76a6c74c95") )	(70155, uint256S("0x1b189254791d18107ddb727f6bcb8e1bc94e32d1addb406ce56893291c149541") )	(99311, uint256S("0xd0ab48330eae0d468113e85bf23990a9618a24d86eb74caa42255acf25aa8b50") )	(126534, uint256S("0x2f430e986cc8e5b1c6623b7a6df8fd09417194e180aa6637b58d7f01a9fb01f8") )	(186641, uint256S("0x1758747859dbaae02b0ed7a76240a563b0c6de97a04829282acde4c6d19cae50") )
(6087, uint256S("0x80ece6d262196926b229248aba9f693c52d7e24d9c18e3b184f0df6697ec915b") )	(39721, uint256S("0xd27e7f1b85eb54730c8a17aa4daeb75cb5f638188d4f4e345a68fd630ffe5952") )	(70294, uint256S("0x9b9ec7cb6ba0f43891fda4f4e94bd519acaed0c4a71948bc5cedb4abb568bf2c") )	(99343, uint256S("0xabf62aee17b743f858b53bb2850b3a5c2c2232dac550b077a2f083923cad78c4") )	(126539, uint256S("0xd5a44b2a967ae7899c497f0d47a1b50211d9bfd52db82fc1416a5b92a6399152") )	(186757, uint256S("0x9a04181022a16224bded974d6ebcbd1cd3b59e854b7977ec721fb90141c1bbe3") )
(6270, uint256S("0xdbbee1193aa554a7c3358ab5cef678d699d13d1f7f307ffd09e039d618de15a9") )	(39725, uint256S("0xbe163b6dd8eb33a8e4b6ba7932b11c883d78c9a59aa0a0655a0113028078f921") )	(70400, uint256S("0xcaf87b20758f6b050e6b53ddc383a62e2a0523c0d13cdb7bd6d98253671e543c") )	(99416, uint256S("0x7b17b6d1a5f67a08ebf7846a976ae9feaa6fd5863b61b9f21c06f9bdbc69633e") )	(126552, uint256S("0x1ac3b2e43623d68f7840d846c8c8d218b4642af4272b26b558ecbf8fc3e9d74c") )	(186789, uint256S("0xa15a4fed22d6684a85761036fe139d8ce6653c61882065020b01b1ea29f0c030") )
(6290, uint256S("0x0db86588b15aa31a244eea26d926a9d799cea135908e0271cd67d756efb1a565") )	(39815, uint256S("0x83cc27b4cc563429b47f53e4070fd14d64e889a5f29616143d489723bb8edd47") )	(70448, uint256S("0x3a2efb5da97cb749d7e6f90fdd6e8b4e6bb5ad95f73187bb508d972af50e73ba") )	(99539, uint256S("0x55d983948d7febff8c504c7e44a2d619bce01f46fd88bc009440c48b4a1cac84") )	(126558, uint256S("0x300048d1968ff4dfdc24299f913993fb67ab863196f378bf1908cc8c7a1d3a5f") )	(186855, uint256S("0x2ec0a81d9f2588e9c4faae23834d2a4a466613fc3766a2e9554d3d957d11fbf9") )
(6350, uint256S("0x078bea61c21dde0c9c41c153ff3e91805b8a1ca464bd2ea5c40d60ac80ae9435") )	(39858, uint256S("0x5d29370a28735337a71559e4df81e8959a8d7c68477e9ffe344018c22ff41607") )	(70485, uint256S("0x28c0b22dd4bb06ae1b22517b4efd5de9f45b26e20fb7c2c017fa01bdb708fb8d") )	(99559, uint256S("0x574177c37b537ffc0cd44c8676f71ca94fb323b2c0ba0a4b4fda28a9f495fd40") )	(126566, uint256S("0xef5a934feeee1c44b49d906ea8db2b5a8aca338e207d5ac0ef63b8dd92b307bf") )	(186897, uint256S("0x2e5ddbc6c3cca976849dc085c9b4b8819661424194193c5f05010786de7f9134") )
(6362, uint256S("0xd009336164ba69b3bcf7150b938a63ebdd2249a0882b78bbf037f674d7ce95ba") )	(39867, uint256S("0x61a21d3c9d7461a1ea808febe6fa7aec3283989cf4ca9a21326c2e484af28850") )	(70527, uint256S("0xcecf1495331d7bf672eacd7eaab6d8f5f1dc61704a0d8089c62f63006549a48a") )	(99610, uint256S("0xd510a6dbe6fc59f21de97b0928204c7f8ee2558350c7b7c8cf3fa17b4182782f") )	(126633, uint256S("0x33994ddaad8b1d5385a64f4e02e0f4e3d98713898924af1d907d43b1a7f0d4b7") )	(186950, uint256S("0x5a081eb7a248054c93745ea61714bea2c0b6ef00d110bad9cddf2e42f403b291") )
(6383, uint256S("0xcea5d789f596ebd4117583beaf987ee1ecd83a367975f93a3afc667492becb5b") )	(39872, uint256S("0x16827c15cf7925edcc233471dab501727fcc164f693cadafd9b9a160a11c8ad8") )	(70574, uint256S("0x4fd4006f6516c5a47a3836b1761b11d3712710162470c5fb4b92515157a2d24e") )	(99622, uint256S("0xf2cc333dc42ab2e6e7b304a47241d5e76d648c103973ee821d6702e6e444a373") )	(126645, uint256S("0x51f9760a75e0dbb88e30faf90e70980b92fdb38463986285e6bc598577341c55") )	(187057, uint256S("0x5aa95c2d4066efc1f6d4db1d20004c667a0f571680e3f1255a0dd59f6d8c7b4f") )
(6414, uint256S("0x8a4482313f74686b4e797313b28494a795007e3945bee080be12ab5a3208139a") )	(39890, uint256S("0xa425727279bb52b4a7db915d1efb69933d7ec58da820869748393d14ae7bbc14") )	(70596, uint256S("0x453398121bdb9b6fe9d6c22a568c0d388e926709e6c6b104ba0fb290ab899342") )	(99631, uint256S("0x4eab93add797a1f5e2813ac283b9b8234fbca8e586e0804389f677292702b69e") )	(126656, uint256S("0xa3a8e7bfdd4455b4448cf7e6389b9ab54756e7fafc84b68d23f7eb591b4e681e") )	(187217, uint256S("0xc68b8200594c63435e786e46fcd9f128e3022f448cb0739cd116adde42d7b537") )
(6544, uint256S("0x79f00b4d0616999f1c86e2c77c65f75722247e132f8c19a8f54671a1e7871b3a") )	(39894, uint256S("0x03c1fd49ed256dc9eaa2a150690fd9400cd5ff75e7b2e10fe4c69a2378e61edd") )	(70651, uint256S("0xe319118ed5d7460919cbdb99213673d6be9f94817db6fba2ee9add9ff2ef1bc4") )	(99648, uint256S("0xe59ec040a386ceb8852edb03612b1d53a2b88e8440cd902b94c7fdfe8e98068a") )	(126682, uint256S("0x972d4bcbba9c52f8dc33e557319d4e55375bcc878859d089997905b66da23f39") )	(187272, uint256S("0xc47092e82998df03270a49a5ef8c0e161de80d9fd33c2d3093f9d98c63433a62") )
(6667, uint256S("0xa79c95d74f0aa98f077abb35143ff96b2c17aec6ad6d002d85ed67c8e540e298") )	(39975, uint256S("0x55092b81b6479153849ad8065643763922e286dbd814040ad6785a1fc0ba77fb") )	(70669, uint256S("0x1acceefa76465a9ad441aa73918246ce2354d91940d676ac632bf151ef30b6a6") )	(99657, uint256S("0xf002f0ceb48877baa2f0125175e7758427df9ebdcd4956440fe81b4964eb728e") )	(126683, uint256S("0xee322cd479dec5eb76021b7b4043b1a18dc3bf5830d05e5d8babf6bc4f5b5aa1") )	(187527, uint256S("0x52c22dc4daa2c09e4dc43f4ea75027d708bfd7cd401abf83cb952e072ee93628") )
(6720, uint256S("0xf9efc8d4bf76a3ad7a395f56ce4c1b63dd73d459dad699eb46e30c1a22e6e4bb") )	(40027, uint256S("0x0e79fc0116c31ef4cabe72399fd9c63e72f034dab4206c34ba1c6596b7625ecc") )	(70683, uint256S("0xfb185a74f5acffe6396417df1a0d49aa29b1a98f3346161130236552243be725") )	(99675, uint256S("0xeaed00a87dbffbc93119f8bc555af11c6d8418aebda7f16f18bc90fac4b70e5b") )	(126689, uint256S("0x441d046aaee92efaee42624cf72fb55283c00fe262df4df0718c481eb4c92b21") )	(187597, uint256S("0x5bfa759244d416aa311d77024b11d0e8dc4a1f539aca00648b24791c6f1eeaab") )
(6769, uint256S("0x6040411f73241cdd10e7ef32eea0e06820fe395b332df2af7d64d1b43ea6b11c") )	(40048, uint256S("0xd38285abcb3d8c0b58ff8ad879c35cc31e1e33cf9d5ade2de2f43c340c4093fb") )	(70691, uint256S("0xa31bde8484a6c298c32237fc9d22cfdadff21a5be578e4ad75ad1d7c2ad992c3") )	(99832, uint256S("0x238672d0545e170f149a8cd02a9ab30abda348c3243c933248dc799337e62b6b") )	(126745, uint256S("0x9755528ebd5d1e071352bc56518d2ab3b3a49177c5c417dc521697ba1dd4617e") )	(187827, uint256S("0xf488bd98f6655d1edac7813bb6eaf212a6b7a2e9f59a1a12ed736db86982afe5") )
(6805, uint256S("0x524f6d5ea64dca3d3f38ef43f2a81a8661bbedd94b807f79210c8a51a2ec8c58") )	(40050, uint256S("0x6e58411d79c2e7d6f0e501e2f7736838b35707acf2855664b67e7e83b34d05eb") )	(70764, uint256S("0xf5b6e353a2b3d86855d3362e1306a29b67d29ae49eff589614320d2c3654c198") )	(99879, uint256S("0x8a1f1642d5695b9e7a64399909141392704ea40e110226a116d1c2a154c1e762") )	(126774, uint256S("0x2d12e74c706cbbe7cd3776a0ef16c35ed0717b21464f56e877a5280eca43f23e") )	(188181, uint256S("0x7e2bb8e384b66e8d098faafa908b60b73ccdb8c7e7e0a49bf455166f776d8b2c") )
(6809, uint256S("0xfdc3b45451250a59f8e5c18ffc5376c6febb686590a4890c9a467bd22d8f8bd7") )	(40112, uint256S("0xf4bbd37442e7273bd661422162bd477196a34fe0aa67ca11b0996300b7cb8a02") )	(70825, uint256S("0x98dbeae9ca68464815f7c204da1edecf5ca37d07ef15b48f716e5e4aedfed11b") )	(99889, uint256S("0xd60c37fabbec52180cb14bb982f6b2b831cf4d8aa1439c96454a5ffead849932") )	(126787, uint256S("0xaffa9142798f862ae9da2abd7b2a1a24d80bae005f7ca596803b354eafbc113d") )	(188403, uint256S("0xfdb9a10a5f2e5ed887bd40526615112951a630c4d7a1c4d43d8311b4240f4ba0") )
(6850, uint256S("0x09a68108801939791a7d1a77e7b1326ea0ae6092acda520483d1859986375a03") )	(40191, uint256S("0x11f0ccf9c7479d01426dff445bf594bcdf3845455371f6437fa562586bce5117") )	(70854, uint256S("0x5a865ad8f7cdf6c1160f0daac18e4f4bea1c1e602ae6728140942f2319c218a2") )	(99957, uint256S("0xbb8808e603c38dfbe72783cea6e33779638bf03176b90bb8821f7fa42b32a67a") )	(126897, uint256S("0x3e53609565db3192231f3e7216eec39a66d181493a718f0c023797338f8c49df") )	(188415, uint256S("0x622f9098c62cc364b51029576d66d62e6eca0c03f5d454d7e7f004175c4f62e8") )
(6918, uint256S("0x8a5b0b9a7c48f03a5454fec947b8de1f37ff7850830aa7f7c40ab41a4aea4ea0") )	(40256, uint256S("0xee2994a3148c1706085be1f571189aaadc93deb45141b42b43e7e0936eafb1ff") )	(70864, uint256S("0x645ad6effc7256008f431e11f6bdd32245c4067318ca12acc05363f40fc20a3f") )	(99999, uint256S("0xc15608d20ce55c4f71b2738a8ca7d83c3f00da48d8b5ae1796ba9792b56c6cc6") )	(126932, uint256S("0x3f93db612948de0eaa886c6d834682868fa9c566c3bc49cd56181e89d84a3fb6") )	(188456, uint256S("0xae049c9a6a7b7a7f4fd9fe301b51a21e55415e91b4bc62ac92ec7ea890ca7526") )
(6920, uint256S("0x7f2e79af49c99a07c4e906bd51c708d491cf9fa754c3bf1da63b99fdca838014") )	(40304, uint256S("0xf9985e4a4b1fd2df580798c90fafe54166007744ffa9a6524e64b667dadebce4") )	(70985, uint256S("0x841df3b27839e94abfb6e920b82c3e5e315fb7b27720a094782f6cc8aad1cc1f") )	(100026, uint256S("0x2fa44f8533a7e61432b17b04001723ebba3f0308039c0b1e61d2b3e4716f8e06") )	(126955, uint256S("0x1ad33636721626a49194e494ed7c57ff98296e1a4d0d297def7918816fd765cc") )	(188712, uint256S("0x1d0e1cc8c4937073e39dac1acf7bf87c5ff37ff601bba96873e71ce42c601ae9") )
(6934, uint256S("0x7ac1c6335a5c96f2b1cdab4b330a266a3b977a289b57157978d3f5a765d1b5f4") )	(40313, uint256S("0x0bf6897050ddca117cc36c68c9cc3fee929b6ca2b2d6440ab7e70a0775f9fc8c") )	(71030, uint256S("0xad8e54d6528f5480c6a380f17c61acb0dec878359eed5110c20f74513395650b") )	(100158, uint256S("0x3db0c81badac0c2756db12794f7dae95629911b23861beb3276b36261ea9eef6") )	(126959, uint256S("0x6f9d845c3dff73ab9bd65c62da0e9ed4482252541364c05d1a4cd2685d1696c4") )	(189055, uint256S("0x1b0f179e3db038edb7c2a69e33bb6264bd9e0f9881c616e6b4b376eecc0cd0a3") )
(6986, uint256S("0xb29dc5a39ee94552d29e2894c891303ce2a150834cd7f06a9227140a620c65f8") )	(40409, uint256S("0xc20397c0d6d3686b44bdd1eddbe179763b83907cae0eb55ad2fc4922716f9e78") )	(71110, uint256S("0xd6616d41157e2d8ab319ac85970b3c0314a99626e9f6120b0d663436fda1bc31") )	(100190, uint256S("0xce93763dc5e10d5901e4a9af0552d46f4a79c499649c56e1992e6b7c691517e9") )	(127060, uint256S("0x7cea99569bc89244afe9cd2b0a356e9bdfbcfdbfcc7044fb5235d76d3fed4670") )	(189090, uint256S("0xee1a6c945a000569b7bc66f6b6c3b841a15521f502d1afa1b886daf2dd773367") )
(6988, uint256S("0x4f4a01ee5252e51ab4e36379496ec5ca643374f3e057a236f81084f11ea63b3f") )	(40487, uint256S("0xfced32ba120ff054ebfe276912175a46c51f060521d9373b1af75eb1a20c7a49") )	(71137, uint256S("0x24af03bf72d23e68640e5123826b891f3984d915094157210c2662590df7e80f") )	(100227, uint256S("0x81a5e62f90475b869d136989687fee35e481aa3e3dbe55f053e49053aba8b31b") )	(127182, uint256S("0x1cc52427d76913abbf02d9dbbe2561aba792583e36d29e5c38bcac04e350d044") )	(189135, uint256S("0xb6431ea02955dd5d8a59c292cc0c1010a6ce7b2eb2c381ab9e81eb9bfd8fdc0d") )
(7027, uint256S("0x57374920e2868e0912837237ee59da13051c97536fab53d044c9b34e6b21fea4") )	(40514, uint256S("0x38ec0fe75af84243c02562c63ceb900f4b6ffd7a1f3789f310632a71b56ab30b") )	(71240, uint256S("0xe2e600c4988869ebe6f90f6c83ee068c545388693313b35e45fa67515d0687e7") )	(100250, uint256S("0x46e775ed4984daa00a9482d93b21eab7e840843889068510be002c6bd0200e3f") )	(127194, uint256S("0x17a159d55570a772ace0df2ba12eb04ed385e41b708b759cf140c9f5d01bff20") )	(189226, uint256S("0xc92c1969104de8d86519aaff385a61232b6ae437899435cb2cea249e4333db6a") )
(7092, uint256S("0xc23d96ace56644706da501be6fd29a7677dcabb139ba05aa22bc42a6028d5060") )	(40517, uint256S("0x6a587ca205003f57a763eda0d0f55a3de7ec64fb290f9a23abcf01e63b0230a8") )	(71252, uint256S("0xa9336cfacc9b524b3ef317df7d3f6cfc8fb9d550396674a906365568ec47e8bb") )	(100252, uint256S("0x09f293131cf085ab461a702562451b1f1129521219a656358e6c2e12916f8fd4") )	(127215, uint256S("0xe0644ca94d249d51a49a580396387feb27b4777926f7b3b2e6144d26f3a8d967") )	(189268, uint256S("0x8e42670f5f7896b075105bd1502d570dfda5aa94e0facb18787871c35aa6e9d1") )
(7133, uint256S("0x5ccaa7f456d4c71bfc8303f7a5ba06a6eb822fae37cb7310199bdf546eddd0ec") )	(40537, uint256S("0x96bf93c2dd9407faf7cf95fb1135bde2a6119893d8079859fc1a853e5ff7bdae") )	(71343, uint256S("0x15d751c93751a46aa6d659686840c7e66a1fbac23d1be0b1a487062569f74e1b") )	(100321, uint256S("0x450c37089f7cf49f61234f43e772bfaea82faea53034a3b573d71b14f8fd51aa") )	(127278, uint256S("0x751667ae4c71b0a7d2910619f6e1b93381b0473b461f0ad1a2a3da4095334654") )	(189280, uint256S("0xad32e883f5475dc14b01afefdf6321985f25c84defc594a2467822897e000887") )
(7207, uint256S("0xb68854c4539f549fba52a3cbd7dd6e05ef58352482072eabeb2edee1447b23ee") )	(40602, uint256S("0x04e1a0ab3c12a89d1725209a0493411eb355320b5358ae9e7cff21ea9dc2b63b") )	(71397, uint256S("0xcaba6481027d7182e0fb50a3e677f21c4e79848024dd6e6c4839cbff377d6648") )	(100502, uint256S("0xa52f2d2216305aa1be10d735ae54cf6597b022990d3c5dde5ad294a851ee84b5") )	(127298, uint256S("0x4cd9ad41085d32af74a84a657e9cb6f1091ebe53855b1e008e6346e655b656f2") )	(189323, uint256S("0x0cd27fa3f3020c35f59d81c3892093287a509ab5a4fafd20e22aee2c5c0d890e") )
(7215, uint256S("0xd70311d13ac5c0be8de4a168fb443b8fd08e33a371a76efeaecf34dc11315f8d") )	(40620, uint256S("0x27871e0e30c7dac208a4d6303804af73e123542ee2cea7f365518aa205b07de7") )	(71461, uint256S("0xb8e952821d7057d7fe86f3ee922acfed398c311cf106b08d2365aa1945496cf4") )	(100558, uint256S("0xd2aef4b35f1d4ad4cb36c83bac8cb7a6090d8ee6c709ff99ad03e133db2ab030") )	(127300, uint256S("0x70f1ef815c0ba76d239fbdc2c330914a8af6d31bfdab7536fb43eb06dba754cf") )	(189522, uint256S("0x91e52bbcbae13eddff2843cc527ffd923d4fcd10c51e42e762338535a97f387b") )
(7243, uint256S("0x8325ab0ce293feb6757ae3b4d1d9312f24f38116dd9d6b118bea7acf892cba6f") )	(40645, uint256S("0x64152a0d81cc0ec66b212e5628db6c151f7060efbc422ddac09c65bdc9014c07") )	(71535, uint256S("0xadf25cbd4a8987c45ca043b15bb63c841df7b612a75fa42ca1eabad8c0c58709") )	(100568, uint256S("0x1e937b29fc2a68d15071d446939b027adf0a11bce9698fb1cc7dc5319f446d76") )	(127332, uint256S("0x8d3afa36d8cdb078debf8b8e3d43e36fdb63659cfd587baafb3ffdaa1d70a89d") )	(189529, uint256S("0x36a9157e4bbf3da2e2a828f04529368059567f1aa10ced7d462fb9047667980c") )
(7315, uint256S("0x8e14fa7b49948f3bcff0336526fa849b2fe04a42e67faa69d6348574fe012a56") )	(40652, uint256S("0xb71f1a29072f013578eee6bf87512d5d86d8b96cc11dd59197af00deb77e6bd1") )	(71649, uint256S("0xc629bd9b9fa6c28a4081729a2e16570475a76ea95451e6a705ba9321c12bb8df") )	(100586, uint256S("0x1bd8d30eaf47cacbfd4ad65a1dcd1aa6903ae6cf18972ecb2f86580b4e6f5871") )	(127417, uint256S("0xd03a0153ed6cee12cf375e55d17771b4561f9f90b9eea9e36251d0c156dd7a1a") )	(189542, uint256S("0xfe14cf6430641fe21051fa0590896244cf5cdd4cfc8e3e95c59571bc3d2bd289") )
(7345, uint256S("0xff0f659e05d62e4c91af4d6d039c81a1841a108dd5a7fd11fb9261964ad4bbb4") )	(40831, uint256S("0x6b294f8af698bdab6a8d33bd6da41015518ce8271fd8260d7a9a9369553ed9d9") )	(71793, uint256S("0xa2203ed5ef8d22ff41d353c39c1531a857efc838deef84f9981b7d6163b6cd53") )	(100680, uint256S("0x29b1582b5ceac67d85f7bf10871dbc0c6945c8f394a97940c1110a9e5d6940cb") )	(127461, uint256S("0x48f673081ed14ceec9e89c623bb6b5c4d13794c3217fa932aba61c7aa0f23773") )	(189557, uint256S("0xa6dea1d20f2096088f59b76cef41d5e4578cbed095e8fe53477ce4aa4ebeb82d") )
(7349, uint256S("0xb1fd9a57d9d7ed5185e808390abdec8c03432bf17adb27c7a13d62d326ffca23") )	(40866, uint256S("0x0566d8f1c3c0c127e988a347004dd524ea4eca7d62a2e8b94be6dd606c0b0df8") )	(71839, uint256S("0x5ac5600fa6780ff1c05c089a1dad360c222e15d50e428f290118decbd597faa1") )	(100712, uint256S("0x8a7bfa7f9e7051238d796654e342d3c20634698bfeb393e5bd26a1487265169d") )	(127514, uint256S("0x73286bdd42385c4a400173a208af9ec4da4b88788048f6e95c0285ef18f1bf13") )	(189675, uint256S("0x94abc4b8393bba53c1617c6a69871a69c4f200625ef83adf77e9a082e0da3b14") )
(7401, uint256S("0x87db1d6551cd036d32aeab05563ec7864558767e3e2a5b88dd811569e8e211ff") )	(40894, uint256S("0xc094c9bf38121fab907961d192216248fcbacce1b0cfb7085f79d8746445c1f2") )	(71843, uint256S("0x03b0cce34f036df14178767d8482c001d2aeccbc89c542b8fafe2ea1d8fa7f8e") )	(100718, uint256S("0xc1d013f99d246da3c5e18a73dc68309ef586d3f3b28db99f6a569c0302a682dd") )	(127522, uint256S("0xbaddf7b260ad97c59d17013e02b0ed4433e8dc90803d454816894255a9b11e51") )	(189796, uint256S("0xe9ca04e4594ee347dd31472360d4539a568e71d542dc142d63eab377c6763f17") )
(7481, uint256S("0x6d495295cd4593becdbd043cfcf4f81d63e24c0a5fde17e844181030e81115a4") )	(40902, uint256S("0xb7d4591a9dcf31c9046abe09e730d21a18017c2525896fea4aeacf36cf004b64") )	(71864, uint256S("0x39af1b5abf6b0facc4da331d1898da7c126a7007eec38cc985f51e692ede4616") )	(100760, uint256S("0x8c4b2bad4477c9d48f9774e59adab93c35e2fc5a53843c0075ada8afaaf701cd") )	(127547, uint256S("0xe967b33d9e72efaee09c8c3a94ece02f881a3cc90ff6d702ec20f1b993503079") )	(190093, uint256S("0x97a8668797a94a3cfcd4c7dd0c172f9378e0b494c91afa4ca01e4e20c08b0739") )
(7518, uint256S("0xf663fd358eb9cf128a9f4b075f3e22db3d937c00c67ef52bdfcaf72fcd6f0a7a") )	(40936, uint256S("0x875a363449399a047b1027a93ab0759d8e9b7b9b970b00a18703628590e316db") )	(71940, uint256S("0xc5eefcee000419d1d9de1ddfed64f9cb2f97029609035dbc48d94d00cf6db46d") )	(100778, uint256S("0x3abb918c3de8321d44749b84ecac7e4f5a31ff36b585e30326bafb386a1112a8") )	(127597, uint256S("0x5f8fb4fae2ac9a2b0e9fce51d488a7bd2f1f1f87cb22cefb4a5bebc9a2f154e3") )	(190259, uint256S("0x2893796040e821aa723a81d472098e64a85ced0c035a85ccfc2c4b606674e939") )
(7567, uint256S("0x624041f694b33ecbf0f28aa667757d3144809f087d89310c0426748ee49e5ce2") )	(41059, uint256S("0xe15e872fce398a9d5c174821fd17022006ddc618287860f4014b3329f88ef9b4") )	(71965, uint256S("0x77f8c981eea480d749e0dca930339cfaacac7eeb515650d5396252d08b733d99") )	(100843, uint256S("0xc54c68dd3bfefa3a9ae9711a4a9371079c6511476912515a4f2a9de1d0797388") )	(127809, uint256S("0x874428565995b928636f1de9d0171279fd1505e5722d1684df9746c628259f1d") )	(190328, uint256S("0x614f46200534767927733ac03739b549602ec2f3093a6fd3b68f7ac5ef0ca5bb") )
(7576, uint256S("0x9f54e9d72ba21b1c31665da8bc4bb6a11bab75a94e01742a57ec55ff08384668") )	(41067, uint256S("0x57f083047cd51951ea70af1ec1e0ddccbfb430ef1e7ba5e8e4736888a248bea4") )	(72033, uint256S("0x0300a607e956da20d4454b19b7db2234b505378070128cd3dcc404d84b79793a") )	(100852, uint256S("0x7c704aa78824e81f0e276b0e509610bb0938ac08d45ae0190bdd7d73a97d36f8") )	(127815, uint256S("0xd13741431b7183bd1d06446ace220561c9e0012acbb89d7623883454599f58de") )	(190463, uint256S("0x514300d30c99d52ecffa8d76a737d717c55a8521858fa11a75feff9b2801c589") )
(7690, uint256S("0xbfda025f8dce8a303a047ad1ed026c33502d3bd77804bb4addb2dadbbfcac623") )	(41140, uint256S("0x63389abf0fe6fc7b0bdb459fae61f25c6eba4981c2486f3441006d9d821ad4e4") )	(72158, uint256S("0x35f48a5af250f669cdcdeca75bbe1ac23badb6f8d90f52012dd99eb30c4d0fa2") )	(100872, uint256S("0x247f24bc86abb7ce8862e3757d85490ea73948a619ebabeb8b8f5f8dd33f914c") )	(127860, uint256S("0x816c8615df820a209a197c93c6d5ffb688a29efbb5a416261767cdec02e1b283") )	(190531, uint256S("0x2e3180ee263775e10f46c07e5a0632099a0ff16887a44163979c094ba724a773") )
(7812, uint256S("0xee53f0768f02159b2f209aa343a6562faeaa2816bd5e5295d51296fe0aceb045") )	(41167, uint256S("0x8493fab13555753c4d3ecf2de6980e2d806779cd78a8804a830cc3448d5a3056") )	(72164, uint256S("0x2c8a30577d7cfb50ee825ad5bc69ad32eefebd5ce56458d2c0f7e094ab5aefcc") )	(100910, uint256S("0x5464ce9f59a546d90632b5d72c2917ae1d2294f4a0f05b2775cc14b99c861457") )	(127938, uint256S("0x06df982ad6729618be360e6c42fbfd4f56957a7759ff2dda2fc0abc289b963dc") )	(190585, uint256S("0x0f6c9b66eb4585c3e4a008ee33607290aa6a408f61ea007ddbe15dfe54ccbc98") )
(7985, uint256S("0x996adc7d87671e68cac7280dcdf86423973549304aedc9b1de8fe4c705b6e579") )	(41340, uint256S("0xd2e1092cbb27be2feeb07f6d5a6650e44bb5310cc48a224ad494970a1aafe4ab") )	(72183, uint256S("0x4e052693f22155d25311c4c951a9f6aea5895f88d876b7d71479513ed7e18597") )	(100969, uint256S("0x9ff7d367b1f53263afa58829aaf5461953e06f2e090caaa4854fa57027e72a36") )	(127970, uint256S("0x3e05d553abf6b10b1d3263dd3634393ca7a5861d93e67040718e2c615026629d") )	(190855, uint256S("0x20be64cc654171ef4aaa5519d3634f25e427a14ad56505deb1fa554ed0808a32") )
(8093, uint256S("0x34f3bb61804bb45a43dbb9fbc8a3299535f747ab02e1f2e1ad93b6ea74bae4a4") )	(41373, uint256S("0xb6a2d3fc7e95914412e1fbe195a52c9d6d7dda976b36f581324b99721020da81") )	(72220, uint256S("0x41569cd2b09dfa174701ee7959b5bd767d3d7fd884109f618330bab12e800aa9") )	(101055, uint256S("0xc44018cc82ec73e90f736eefdd03c8532c4f20c8faa5ebf29e9d5248fecf9cf8") )	(127972, uint256S("0x1c86ff3f91c05cb16bfff39a75c2013eb7505b5940c4be96f2238aa38edb5779") )	(190917, uint256S("0x4fad8cbd9345c00f0281a6f96cf85edcb063e3a8ca871056cff64ff40e7163c0") )
(8131, uint256S("0x13b03ec7750872ae4b9e39da2fec03abe337eaa439a690f905703473ef1d5cc7") )	(41386, uint256S("0xb94ff1b82d87ec93f4d490be9220138dca6bea71c4648f3c808a6c55a9014448") )	(72337, uint256S("0xfcbae86fc0344ba0b544c55db396ab5b1d5d268d8fabcedec529be2f3226cb2e") )	(101068, uint256S("0x6505f72e4effe14d6fe91c439853fb0a6f9f1e1b499df378fa9749b6a9da6242") )	(127974, uint256S("0x71127f98a75711ae05eb581f2b68dd41a2861aba795c1f6923a9b1e4039e6164") )	(190984, uint256S("0x8a710e7321b7450c1d212c682ceeffd00ffba88775357fdb5ad1af80f9f1df89") )
(8151, uint256S("0x034e3f28a3d03194c46531871a7a92ce33bee89791e2fafa9d602364ff075a34") )	(41394, uint256S("0x4510aee9c43567ba0650e769d500d91d7ea423928ebdda0ad18707ee2e6dd086") )	(72345, uint256S("0xb9f9c8e3dc4317b483e632bce66078900b6c78d380d4db1a8fe02d68d651bec3") )	(101093, uint256S("0x15619d47237f8e74b021381a44a6e218e9417795a716a8b68e281324409eeeb4") )	(127988, uint256S("0x764df96c1601ef6c0f4234477ed9653e4ff0bf937bce0dd7915e6315e4c5a87f") )	(191136, uint256S("0x826bd6e34dd8e7dd4d84b1b11f2dfbf79af297e3638cd92cbc92ec74c25f9c32") )
(8219, uint256S("0xc3659d2471b275854b4760a71ba279543651b7b5b5dd81ec653f5bb823fe7032") )	(41413, uint256S("0x8c598e5bc984401edb136d32926664ea0a021f3e14bac03a7176d122b9fe4e06") )	(72374, uint256S("0x12610592b91c705f6bfc3a977a63c4f6af8eae047c1f52bb9cf2f5c4ceec95fb") )	(101151, uint256S("0x6a1865e75d10d9940c337ee6e507e594ae64267de075e04b0d5f1a0843d144d7") )	(128017, uint256S("0xb9438c352c4e6ea4f3f774f0d4d9e47c13943d2cbdb20071eff9180d6cd59075") )	(191374, uint256S("0x302edaf2e5c82307260755b0f66e05623777868e7f4cf41fc19b9764ef4ac2cb") )
(8232, uint256S("0x9aaf658be14637446f1d28b0e3f9042ff4e03606df4f1e906c8a005f4a85b0ff") )	(41597, uint256S("0x075242020ee4356676c9d50c2aec228d0a547ddfe94b08d757a167092c22369f") )	(72378, uint256S("0x7d5265e5844b34e63761fecf0f34350a2039168c5724521abf2c7411ed717913") )	(101167, uint256S("0xceb52c1ddfd519814cd06eabf49b81a6f02446cbfd9da95d5b8bffc2ccd0b03e") )	(128038, uint256S("0xf2ed6c78170c55a50d59ab87ccc06a80e6272142ad1c3f7255bd27716d3562f7") )	(191432, uint256S("0x58da8130073c4f75eddafae0282a4d88d58a3a9affd896e97fcf88cc67bf044e") )
(8342, uint256S("0x5ece73df29dd91e8161130ac59ddc5d135a1149b6c8915461089ff97e0d459a2") )	(41737, uint256S("0x9282d82f7ca8382be70776dea8fdffc1aeb913a9d18ab2f6608c7e2aa1cc8260") )	(72476, uint256S("0x27794e88568ae0b1f637ff63275e46a4de04dacb7270fe71111fb189e9343a03") )	(101173, uint256S("0x72575be592bf76a7baff38e63eb2039fdd67d7b7ecf8c6ee1d501e568de34e26") )	(128047, uint256S("0xbd2bd2d3f43529bfcaa9dd5fc6839eeaf406fff3d1a9a8662f5c7b906c3148d9") )	(191486, uint256S("0x12cd7be4972cf8fa3c8fe26585ac87bd63d20526d6114096ce0d7ad6ef31f0a6") )
(8360, uint256S("0x0dc07d76051864a9e384340151cbfa14b11686497f1ca4c5f3d275390f4237bf") )	(41771, uint256S("0x75446ced889049e17cad254e313117dd1f396a2381c51b84e946a488eff5698c") )	(72584, uint256S("0x2c08915590c28293c070ea0f9eaa3113cf84abf8d69611265b2d3a863ffc46e6") )	(101187, uint256S("0xa2579e73983447c09ffec6659020c29f0896bf7332de16716d77611fe3718be9") )	(128055, uint256S("0x0e4c732d4767210d7c2c9d3fbae0dd41a043016013623b6c6dc2aba19ae3b316") )	(191576, uint256S("0x0aeed6c530c10abc96f7ba058cfb087cedb25979b7fefabc11d4bfbcdee6fd33") )
(8425, uint256S("0xc3e1d5f60dbe2899c0b5395afa09a95b61768e68283209f47608a80049f3dc2e") )	(41791, uint256S("0x3d3156742c83c05f9ba677b2bd05db050d0b36ca2c061970cd5f692eeb0c7402") )	(72587, uint256S("0xb689cee3846188d50902798e7b124999425c4779a82e1c73e81b23b7fcaaa0f8") )	(101233, uint256S("0x54fad049892477a8d7038e1a3471b973f4990b900d5221406fc04726b3bdf59c") )	(128086, uint256S("0x284b5ac9182834ee6686724f9c6e425d4074346af804e97257dd6a628d7113f8") )	(191596, uint256S("0x912a853f6c55d0197e66da66af7d6149b31d51f2d0ea2476ca5e7c167f6e47f3") )
(8440, uint256S("0x301becd6fd2aaa749026f287d325ce2292212bb22ecb5bb808122447d2074258") )	(41818, uint256S("0xdcbfff27faad16a638ea2b08078b9d7cf7b5d7f3214137688bfbfbafb93aad09") )	(72589, uint256S("0xa420a521ccb136461d0dd557512e3dfc38cce5dc54e0b0913f1ddf0850585c35") )	(101241, uint256S("0xd9b3a119cb1172baa837e593fdd80b41c489711b1827f23dc92674379ae59231") )	(128124, uint256S("0xb3831e1e14ad9cf17a2e60010fbb2fd8f59eb4906e4860190fd12deafa807de2") )	(191786, uint256S("0x9875e683c748d13f11d4ea6bbd640c3f0d571319569d67ea5ba9d742503bc9c4") )
(8486, uint256S("0x2b836c48dcf181ce0622373b6f1a1ab0904529f1590c22a5aece67a89628f669") )	(41998, uint256S("0x260afa8eaaacf0847d6ee4c8211b1caab1a293f2deb7d5a74563a4fab37573be") )	(72636, uint256S("0x7c0131d22657457ef9450b9d2be5a7e4ab47095986c815cb9544c70d6bad04ea") )	(101331, uint256S("0x49938fef41f346e7772e57ad22cd3317d75bb441dd311294c6cd047c75258d59") )	(128144, uint256S("0xccd0c5fb2a78fc1e1c28985c2e601617f9b7c0e1f772ee80b872b14814dbc456") )	(191791, uint256S("0xc0a66c2aa0638e32a8ff5cf8b03006f0a860ccc092ad71827f6844aa14fc6edb") )
(8501, uint256S("0x923f4fb2d4dde39cde132e970ff900d44c06cf8db6e5842eaa0c149837793609") )	(42037, uint256S("0x15a99974a1978a746651696d5f414479db6635e27287e37ee4602a7dcf0aeb62") )	(72651, uint256S("0xcab7330e17b4faceb8d59c2a8723a60f48852d77de959646896cb01c041036ed") )	(101338, uint256S("0x0d433b182db63e614ab9f6c6598625e063c265182920aa9bb46deb408e985d15") )	(128165, uint256S("0x7e816d22885b4fb3f8676320773cdd7d83ea056df15829aef1213517803c557c") )	(191927, uint256S("0x300a3abb61ff2960ab317118085a7c2611cd7c09eedfdaa0949527ecabf597f9") )
(8639, uint256S("0x87c5f8be9507d578a49bce228e10fd13acd2d92ad12ff086c6489093c9a5e4ce") )	(42070, uint256S("0x6e64afff9b116c1a8b38470f7d89e3a0ed3aaa75eb68070e1e74396c54ec4280") )	(72727, uint256S("0x97ea9c288b797110902f9ee71b878eb003f20dd886390ca1668ae84455495bfb") )	(101351, uint256S("0xe8ed7e77f7acf240386fdf5c3d5826f067115c8449dd74761522841818fb0115") )	(128180, uint256S("0x56d79354c2c75e721bd7a48bd268044e83c4d287a4471b72fb8383a0adde2784") )	(191961, uint256S("0xd630f672c10950ba7662c2c65dbc0413ad272abde8edee80e05d96e102e2b661") )
(8771, uint256S("0x06f890829f5f396c684ddf8c66a3e61aa9d59781f61a91c15540c34c2cb8d671") )	(42199, uint256S("0xb9092eeec91eb249b6416090c1dc6ddfdaeee27a91771b8c6cc70f18e0a1b928") )	(72730, uint256S("0xe3b548fe41c59e4c4bdfc5ba9285893d0bb30e216e1f7e08207781937a2db781") )	(101390, uint256S("0xf4b8ddd1db317e0abc3f417360a3fdf73a0634137a2f3783b28e820a00321b3f") )	(128370, uint256S("0xfac78dd1e3fa30a0a4d46a3864083bdb85a7f0eaf9bbf1bb3783016a11678049") )	(192122, uint256S("0x00a8ca0e99b64bc532d0e1dec8c13285a1b38f36632269506607ef17724e0463") )
(8789, uint256S("0xd09e62be8d0e2ed056c72f01d8ffd65bf912a622d2186b1940d94b89eb5e45a1") )	(42268, uint256S("0x2f0b38f5389bed3c39c66249864cf82b06281a73b0a3b79f4f87532e3926cf83") )	(72793, uint256S("0xb0285fdd1cb5dc19c4573b317f5eb839cd3ceb3c928ef35a3d14ac958b8892f6") )	(101412, uint256S("0xe8403768cbc27abf8eb39327ec314c1ef45308e9d9a06c59711c886b9061b9d4") )	(128412, uint256S("0x446642820e69ac94e668f4160c906af84fa6a9e5fa87fb725e964f299ee49761") )	(192284, uint256S("0xd594eb726b73b4c530ffbd729b986ebeb6fd99b39eab2772309a5eda9c6eac82") )
(8949, uint256S("0xa74396a64fadecb2b7378f5266801882a7c08384ac6a8f36e5bc6f0c48a20d78") )	(42344, uint256S("0x52704d738b9a8e95222b847a9c2953c641588808166654509cadc4e9b5e704ac") )	(72822, uint256S("0x8461ac17747b17b7e530a0a2bd788aa2dff007774b1bdda12d5c3738cb0c5b8b") )	(101489, uint256S("0x0d7dd456c82d32f9509810a4160e9c6c183a7e66a01e0f4a1fe39b56603168a8") )	(128466, uint256S("0x7a6dbf8310bdb18f87368d9b9248b7983ed54c00416f7baba60dd63133829038") )	(192461, uint256S("0x386ea1457c07d620c30766b732cec5572ec594ffd8c1532b6633bdba7fc698af") )
(9009, uint256S("0xb8c2b8d163d5cab26a1764a386372ef105390c2bcb9e6412feccf799a0cdac52") )	(42380, uint256S("0x87803af9eb93d410014e4c991dcbd7c373a490dd51e9936593d4decfeaf7e183") )	(72839, uint256S("0xefb09d88237644976e0cd697f1eaea659ba48e62088aa9ebc41b8f13a2c926d7") )	(101512, uint256S("0xec13819047f6a67e2bf3bfa1c5f9ce85b87f25d84a18b1fc76564763381d1103") )	(128480, uint256S("0x4f1d9508d96f3d19290d46767785717c35a1bfeed23f543741616de38dd419d0") )	(192485, uint256S("0x594a4663f549eee01fc179c16422a254c7f530e897e4286b44c5a5e8e8ade865") )
(9017, uint256S("0x423db83a1c2f495b7557c128efcc9e9028250e794b506800c064dfb3c519ee10") )	(42399, uint256S("0x4d90962103c676cc194f045629c0c78a267a924baea2f427f604023a63049fd6") )	(72868, uint256S("0x99911a452ac9c50baaed3410b4f6ba2e3e6261a59724d1ac6be8f6f41600f3a0") )	(101535, uint256S("0x658d3bf85d25578e1ee38f7540e7ea859e9de4d272d9b0743aea97fe0dce083b") )	(128489, uint256S("0xd34f66150b22b8252365cd4192252ba4be1aea71d14d0cb6d0ed316a947ca91d") )	(192622, uint256S("0xb8e3e17dfb5915a0f183dff8ea427007b3b2847830cb9097a11e9405a0110e7e") )
(9177, uint256S("0x299b6d43051592ba5d42b1c796f99586cfb2d62e3fd5292366337b2ea91fca9d") )	(42523, uint256S("0xcc670d3a8b719df7d20242804c85f57d830274227920d1daccc087501873431a") )	(72903, uint256S("0x6c08a542e0909127b6c59c96f354712a0c1130a97ecd3ae55266043fe5911705") )	(101566, uint256S("0xb071d55a93f4c785005ef38cf73f44dc19f441ab3e29b2e602d625b9f23487fc") )	(128537, uint256S("0x6603a0492cb9423a26fb990e06c6e23194c034a3a931459e7ed60b68fe1399c8") )	(192737, uint256S("0x98b2a2f34641366ef691cea808d940ac54b0988124addfd411ec9dd9e557f71f") )
(9184, uint256S("0x030daaeac7af7b3df725d6f6ac87dd5f1be2c3eb0819400d43630e98b2393ad8") )	(42554, uint256S("0x05a571b1f663a8d6152eddace2fcd1376b1fe9e2bab4481081293e64b4b00cf7") )	(73088, uint256S("0xe78e18b2ef485b91e734788098463f933e1f6c0a224849267abc884e6cb31190") )	(101630, uint256S("0x7a7fa786017eafce18b8b9b4499a8c5ac87bad7dcd3421bd5974d5beb9d63fc4") )	(128557, uint256S("0x5c0744ba8d6864f42d5dec5c6734f8fc68114dc933d353e7e507c688211b44da") )	(192766, uint256S("0xdd6223c89d53e08d49e87c821ec93a570c6f1ee50458f597c3227ed471d4bc0d") )
(9251, uint256S("0x86fa4dd78830a80de935b6ed4f8008ffc54bb219aa0e1ccace8177fd3caaeaf4") )	(42601, uint256S("0x420e3941030bb483fd0354b167ce2885b38007ad67cdc5eea30268d60430087d") )	(73164, uint256S("0x3aa9b65b3af3bd625a5eb070e1928c20feab62430ef180f3ad1f60618fa4518e") )	(101664, uint256S("0xfc63fe2f00dfc870bd1d71f5f96ea67e1357d54766582a13c23d1c91ba17f303") )	(128563, uint256S("0xed66cf7c75dd64b815c2a615e8ef45be76a2658c4cd4bf766548c1004fe54a62") )	(192777, uint256S("0x3e480dfed0bcfdf4eaf5b01381de0791288ee68bae7fb60c89ac0fc84df2ea14") )
(9281, uint256S("0xeac7f007e8bd6fe05b30cfc1fa6a9dfeaf38c337eefdfc9fb1175eb8bdf14b4f") )	(42644, uint256S("0xd8b49ba6d87604aad0463d9d5155628911db0c8babbf83e56569e7534ad8f5b4") )	(73184, uint256S("0x5cf8e9e8c392ee4a86216b4df41d365e20511dc7ce3f43fe2833544ad3f5d052") )	(101768, uint256S("0xfb300c7cae702197510b122cf4b1f27ad48e469367a54865c180b5062f524e46") )	(128576, uint256S("0x84ad206ae0424a1dc271d139188f19ce5f16f48e079870d2a7960e925f1b6ada") )	(192799, uint256S("0x41a7e562364d11d4102c4807bdb43729153ffbf6cfed567d4a12544487839963") )
(9292, uint256S("0x4e3a7b3c35dde95181c6da3db72cb545a99b3eb9bc6dd5a910ce4fb4362a47f0") )	(42787, uint256S("0xc5772159758433e7cceefc85913260807edd9d93ff298d1ac0789a86a8ca3889") )	(73189, uint256S("0xa15ecd958038c08fec67f7b5f241e343c6d766989bcf1d8ff57ff922d05d9f77") )	(101777, uint256S("0x2a850ec0fb8f479a9a236f28036679994a5a98d34b7a50e36580cad128040aef") )	(128616, uint256S("0xb53171bc6ace170d894901d9ae3bb8c9ec439af99cad2b81cebbdeb30df64be4") )	(192980, uint256S("0xa4f86ed5ee974d6559765d3c96c985f3ddaf1d855265744bea8c1b1c610da4e2") )
(9403, uint256S("0x299c8819c862fc86905bef7296ea1838b0902d56ad49718c263f6c199e21f578") )	(42880, uint256S("0x3d5b1a38ba6e5d85c4ed90608008d7f3505485fc278ed9362956820964874075") )	(73191, uint256S("0xd42c0d51fc529635f14cbd07026a437644b04a6a4685f68e7d2b57ff8fc36a65") )	(101810, uint256S("0xeb9b4f07142856a27cc467e7576a4ee8ec40c5bbaeda0499b3f0eefe072d0bd8") )	(128640, uint256S("0x372783ad010e8b11c92188f788208c0de5883f8d7eb248b3e3135546212c2409") )	(192989, uint256S("0x45d0798beeb5d9605cc733ce93ea245972d088e2bfcdb32e6e434724738baaee") )
(9412, uint256S("0x96086668be5c68f1b4c19895dbf67458e552d96ec808fa870cd54670e83dbf43") )	(42981, uint256S("0x6c0d7b121d761db7c62d0a689c91e4c84d133702faf5dea338c730742917543f") )	(73209, uint256S("0xcd97db86f6375d0630a26907755cc7533504efe6dcd743a4b69a4e516ae3806f") )	(101826, uint256S("0xeef299769a97ef9b7f005fcb3d426b6549b52fc4e620d0073462fe9f083953f1") )	(128652, uint256S("0xe6556f6378870661243cc9b91f1b6d30c63e04cbcaf3be9ccec349368ca46276") )	(193212, uint256S("0x2bd84b915398173213731eda8da1b59e2822a0b95397f84b09915ab342a084cc") )
(9449, uint256S("0x41fa5290ec493c41bcf4cf96b0b8ed960b810db9618ce1b24388ee37b2ac38f0") )	(43005, uint256S("0x5c7ae17c82b8c7f4e49e3ac04c7e3c7434fb83082a002fa00a095c3044c4be0d") )	(73290, uint256S("0xac514464049ebb59237be0f5576a0493ee21d9723a9c5c63b9781e23bc7f48cc") )	(101869, uint256S("0xa546a9628a05c7128b286e2c8cb3041e12df58199e97ddf6836f6cea2396180b") )	(128707, uint256S("0xc6984c9ea847b07298c737e29e88dec82c34b654449d502587bc5e0901866f09") )	(193318, uint256S("0x7432827ee74f36715152d7e66b144e86febd5473e8ed8e2eb8942244ca625f9b") )
(9483, uint256S("0x655b4a79f966dbde415b9490db7ec692383c2b7af88383414745a8c5628d9694") )	(43059, uint256S("0x45e22bc8ae929b0ad0245028f796079a31bd469eb3a928f6d3bae307b2358d58") )	(73360, uint256S("0xeb42110113f287d2f72c082b11496a88f2ec18c5fe7ebdc3a63988374f124af3") )	(101917, uint256S("0x308e97d5b0a7046d37ea0dc3cd68f3545a85d2c92145e011312dc57ae7c67593") )	(128715, uint256S("0xc76c0d1bf1fbe8dd05728a43be799b3940916add2b81cdfdcb0c85fd8433db2d") )	(193329, uint256S("0xb1e13ef31c7f9bd114dd2b02e879ef75e58ba1931f28d82ab46437608ef18048") )
(9529, uint256S("0x5338020339db6cfcb17ef460b5cd1af97ed7af7e20a7b9f4083914e5b79ca709") )	(43224, uint256S("0xbe3885d9505a09a81b6c61539eeede87ea288f2e87f5c4dfb0c804e414ac6c0f") )	(73365, uint256S("0x7711dc3f4821dfa390347165863da813624e576728c3fc20886767400e612722") )	(101925, uint256S("0x5d64a73644a4071ea7d86dd72abb855b222d070fbb835ded4a014daf28a55edd") )	(128719, uint256S("0xca318c213aed4ef5cb2e6cc9e1d1ad0fd8639e1e69dbd8c6bb0d2354810fedb9") )	(193492, uint256S("0xf7c6d8576a2f1211c544b9fb6cc594924d2d58af26c4850f90e1c0fbb1d37099") )
(9574, uint256S("0x922ed307ae601f9391fb2b54c4e7bd10ca56b259e76d8233d1b06d9219c94e72") )	(43273, uint256S("0xe8d7a09f83ce539d9f50298213e3019bbf02255c5cbfb238cb328240e30915b3") )	(73372, uint256S("0x7885cf57b573b33975156a2086fad985baecf7495098404c709be44d2b813706") )	(102089, uint256S("0xdf24ae8a4a8c00c4bc8c21ef026361d1f22e02dc217a74bed4697a0257526544") )	(128781, uint256S("0x55732aeb01fb8e899656365376dfe7b40b3026345d621d4669a562c704b990b1") )	(193519, uint256S("0xc5889c26feb13088720c80b0f5a94a73f875ba8ca863972da54c9f04214ce86b") )
(9746, uint256S("0xfd1cca338edeaaf8f31c0636586a1559361a18718de929ad25e5d67a35e1abff") )	(43563, uint256S("0x4e6790cc246b57767b4cd02bb97c3678b9cfdae7a93277f9657ae30c7553dbcc") )	(73515, uint256S("0xbd946b00e78bafbf8af58fbe9161fcf405aadceae40042f9511779de3f414139") )	(102105, uint256S("0xda3d3da68a8763ba2427915a7073d160573c47890e3bdb690a527460f9741ac8") )	(128916, uint256S("0x5969e6aecfd2b6f2f3d9ba803bfc4d19064f77556c7936f59f660870add3884c") )	(193533, uint256S("0x7af13e2af903db95ce3116711ddf7c639062960df930312339c20451fbba0c9b") )
(9791, uint256S("0xfafcdb354245532c3811a9d4a26dcca087078ee4386fd479cfbb3c8a935eae71") )	(43605, uint256S("0x6783edd2341a63414361fcff666c55446267ec1d8b229581e2b78d35b2a87d8f") )	(73526, uint256S("0xca3a4678f086cb81e280e7f38adfeec52ba99ae47cee3770dbb8fcd9e9935fb7") )	(102107, uint256S("0x8c9f2279a0e207b895628ade0831340863b7af4dbb124eeff2ae138df6803c6f") )	(128994, uint256S("0x3858ba5d1a24bc574b5097070fd75fe08e32e12afa224866074cbf6a8b2e9df8") )	(193628, uint256S("0x7328c94a2ba4577dd1b86cf4177cfc2c67dfc42f9533e7899184880f9b2902c3") )
(9807, uint256S("0x61069dfa703aac436decc69c4653e8e50317f0337fc912c238de4291881f6896") )	(43629, uint256S("0x66021ad3842e9828575ed84ebbf8409465038e23f4a07696dd916c3d507cbde6") )	(73556, uint256S("0x6484ec79486f6b16142593c9f80af29732fde024e28691509c0c51dd37e2a494") )	(102141, uint256S("0x467dea78c63304bbcc5c1b124958b31572533cae7db411eb1dfefed577093550") )	(129018, uint256S("0x1986d23e8ec207c0de6f7da5211963fc300d4d93e2cacab7f5dd0756d1018f44") )	(193634, uint256S("0xab0296307f479b7f9fd745867494428c32df685368e07411140ba25a0fe8b8c9") )
(9813, uint256S("0xe6871096e264edfc431e8eb05bdfd102e6526cf0e12bff8c1f98091dba74e80f") )	(43705, uint256S("0x0d572b6f2f79ceb514f6d18ca13951d964ec8053449079af622094be251a0e70") )	(73648, uint256S("0xa1c84fe5bdba8e298b0c60aae94fad95eba2758817d0863398b7723950431d67") )	(102227, uint256S("0x2e8bbc4366724cb2f5bfc67c2ae2178aa936ebef8691e21ca6ed446476431327") )	(129103, uint256S("0xb572f65d3a7b6752c96595840ef8698f4b7c1e2e2d3a4caa9f8cc8c312516d4a") )	(193679, uint256S("0x31c52a9ac1c46a054d9bf691f1c401438fe73f21aa5f1d0afb3c4127b83cccc0") )
(9838, uint256S("0x804d5d4228b906a122ea4c36b228cc5457994be944754f824911592f10f15358") )	(43731, uint256S("0xda092fb1001b0f1561e7b73d3a6e6c8a9cf49a9a3111ac51b7262ed40120b1d0") )	(73669, uint256S("0x373e1be77f038322da298844d23ce07026381ce2bbc1c71d78c1c24f9fe37657") )	(102379, uint256S("0x58b060fc892b7eaeddb3982c5086eda0838a7143f8f21fdac307075d5645a1c4") )	(129120, uint256S("0xc2d625a913cffbd88959663abbdde11e1dd7ebafd3e04ac13cbb6dc846a619d3") )	(193771, uint256S("0x7e4e4b22145e895e6b690944f46b44760024eeecd312236c45028b3438da665e") )
(9851, uint256S("0xe272cfc156550d37f3ffef771a1ef5839980c2b20011797c04e61bd0a3817e50") )	(43754, uint256S("0x3f91022ad5bd5d6a95675c374d482ea511ba7404190914850e67d7ae43436089") )	(73705, uint256S("0xeeb18bc7275b056cf54e1690683fdfa4317f618edc0b12f6b93452d51266e451") )	(102406, uint256S("0x5d0df86b1ebe52dda68209d1f733b3e0f8a4e2a6dd981665aecfbdbc28d377c3") )	(129131, uint256S("0x6784d85f2a1046605602ffb9fdfde91fdd2c24f71a61ef008371318a8c2bc98d") )	(193804, uint256S("0x3f6994947231ac47dd201f0abe0333ebc7f8cc55f2fad8aa81b5e58e671d2df8") )
(9862, uint256S("0x9cf6dead9acad53aefcb6786f7733f6956da53065c58355c169eafe15a0d0976") )	(43933, uint256S("0x7f9e665e05b90cfc6e6e5b7bfc4fcb6b73d58e7f95283692ade353757c7abebe") )	(73728, uint256S("0x78fd392a568bffea724c26ce31275281412ea94d6b99a55781d10f3749c2ebbd") )	(102607, uint256S("0xe938ba6d28b07f7d1d8d2913155a86aa3d3d652dd0eb6b0c74dd87725d3e36df") )	(129167, uint256S("0x9760209a240399b9ddc0c44b64a8bb8c1dc2ca1cb0bf85c01832d970051b002e") )	(194155, uint256S("0xb9354cd141d73e150315e2c5128ca29e7c4f59c8a44d950f22e794ba735f5d72") )
(9902, uint256S("0xf7faa89b0b8f7a360010fb7000c8c6faafa7f456cb766ade14ee425df34d04b0") )	(43955, uint256S("0x5f4777f9ef8880ea3385ac2491132685afd694952052f8641c29f534cdb74776") )	(73752, uint256S("0x3049bf20313aae4147b33c3128e73f2f7aacc89b4f4581871d39a468c17824e0") )	(102613, uint256S("0x474cebcb3cf90f9007fedbfac95ef423f2fb9182595e52b496175efb6563059b") )	(129186, uint256S("0x8d94091ab9dc98d24010c7a4c74a197a5f6e6fab9dc0d4e6555955dba47d4b1b") )	(194216, uint256S("0xb337f0b4f4a875e2df5ed6933e3fa72c820187713c4114f7499405f49254973f") )
(9919, uint256S("0xef802a64ac39d3ba24f19766eba75579b466d5e2b82fecd0fdb4df4338864065") )	(44050, uint256S("0x2ead28cc690c4f6184c6f1d9efdb3bec7a49302062ced82a7149a7c06481fdeb") )	(73756, uint256S("0xfe956c9339be5af2010e00a63185e9c44b15fe6a9ed1e791e1a7f0914f1d57c5") )	(102639, uint256S("0x5f30bb22e881cbb1f20a804669a96ab9cf5d7a005991f952f8eb641d637d06bf") )	(129277, uint256S("0x184926396561865d17b03b4dd007a9a951f4a9df61b7ee344dfa264d329023b4") )	(194509, uint256S("0xb828f67f180db9ffdaa9added654da31f95917667c1bc1b400e7f1f00ba5e46c") )
(10023, uint256S("0x81820d775bcd86e5a29182b8a7547f02de7f924c48abb9b38e3391cf2f2a0ae4") )	(44078, uint256S("0x4a7417823e022d77c51ca6a4ca6dab30f552806ca5ed88197d97f02a51e07f2d") )	(73854, uint256S("0xfdc02f17dbf603458d40046a400a6e05e0080dca28780b8ed6591e5766d619ca") )	(102765, uint256S("0x9a6898adfe335e17027f53774e65b423867c2a30d41e2ebbe81d6edf386e1769") )	(129281, uint256S("0x25ce8314ac256ff57b019f50a19380df3d160e5dd503de7c003335ced707074d") )	(194643, uint256S("0x582cade6fc1abbd20d20393783e123425f1a91cea425734b457147c0cfbd79c0") )
(10044, uint256S("0xa108f5dbadf173dc167c24853edb1f24214f4c16bc62182267d7e48caa0583a0") )	(44089, uint256S("0x9240cef7d1e11a70da5c700f7534ca6df4b9012a312a8bf8333241198ef1c7c9") )	(73861, uint256S("0x89c5a245c52d58cd5126b25cf344c898287f54debb152d705ee076d6ef8be007") )	(102771, uint256S("0x1cef581387d23b0fe65f004a17a55d00e37fd0eecdb170b7da8170a88c9c21bb") )	(129326, uint256S("0x5955ac8b2608ff90b540e61bf14fc2b64e8bce162dde7b3eca8a42aa0c0131fd") )	(194743, uint256S("0x9fd1a228b35f294c0e8fb66531619342f0b1e032317f0e59ee1022794761be70") )
(10077, uint256S("0x37f9526d06f64536f922f5395f6548fad6e7bb6b6e517adf27f80d6390fdac87") )	(44146, uint256S("0x6ce5755f81a569ce56fb42a31a2af7eaeb85418e82f2239ff9b1a47c72d7f3e3") )	(73886, uint256S("0x861d164532603b3cf235fff158e4622f7d923cfc49c82d1a490bfa2fbbf3bfcf") )	(102796, uint256S("0x4da08df70272339cc6e7ccb881ff7e99e6fa1f6133f638e96a1ded2222c7030f") )	(129340, uint256S("0x2a6f518480b84c11e09a0ba878c60a8f154b4d3980870df7c60cfdb2595b5564") )	(194832, uint256S("0xeac2a41063f077e5302a64e50378211618b359bb783aa2acb7332c1591aba2b5") )
(10083, uint256S("0x26262fd7823f20a737f9384c4d1425dac819f020188b47bdf3301f11f53f576b") )	(44169, uint256S("0x4418ce7ab64a6879e43a943fff0a7ff66f64af055d6bb6898d802ec6a6b09fd6") )	(73921, uint256S("0x1547f4bd39da258ae2065ef0ebd85b7998046df38fac9d45a202fc07f7dce98d") )	(102889, uint256S("0xa8170073c62361c8db68ad8b0824013728986eee84e0480c47b3a3be6dd08c00") )	(129445, uint256S("0x9e575578140c31f13b8bdb877a4178e0c909fe10170030945bacfde9b0c96407") )	(195057, uint256S("0x76cded7618a009a27959b9dc6b55cfb313d1074f149988f5d0facd9bfa691c22") )
(10107, uint256S("0xe6bea2cc7fe59794c8824f0401aabeea51b32c8988f56fa57bae0cf083601598") )	(44237, uint256S("0x4c90ee27368acdbe1c59857f604ab6ae202cf7dc1ce3bef355a4dd890cc893b7") )	(73936, uint256S("0x1477b63f0047bbab7320e31aa659f590babb7dbb3df2f660697864922e57ef86") )	(102930, uint256S("0xd5765428c1b0417702913aaaea7b67b5850a4a980fddaacc2538b86c025f7853") )	(129447, uint256S("0xc47cd80e097e75f54dcc058699830d00c63fee5eda5e6db4e984d8374ce39745") )	(195077, uint256S("0x23f1aa2833129cc6c69f7b57a147e34258bb84b8aef45d4863e30b23066c28b9") )
(10189, uint256S("0x42abac99d1f1090acfdc9023e5bffeb69e963cb5c9b082c3ad04e12422b4c37a") )	(44264, uint256S("0x5aaf7ad64fc4952f1c544e6e9b6b41d4614dbe9bc621cfa224806349a537ef4c") )	(73973, uint256S("0x84df53ae073e8f81739186dfb5372e18dbe433a888be9eb5623adfe0e4eca5a9") )	(102971, uint256S("0xfe701eb14d5d336430c85d22b03ebe086aff355fd9b05f7da628c9d3a4429f0c") )	(129473, uint256S("0x2fdd6ac110c63958516c357f720d544cb74763df0d0868dba974e825690506a1") )	(195169, uint256S("0x2b2fe749cbd4527ed4f79420f4805b55f851d1462c4f49a846d9ab1e7ac2853f") )
(10200, uint256S("0x67afce6d9154214070c706d9eb4b47ca766df533acb7ce614199af93b9db1778") )	(44281, uint256S("0xbb8165f8f8ea9347de970befabb649745f8e791ed56bcbaf2fccaeed1e0e788b") )	(73976, uint256S("0x92b8284433cb7889ebf191b24be494e82676539bede2c908e1ed71b128350226") )	(103192, uint256S("0xb355b8448d9f5d2482c692d4e0a4ae31d5dd46187a80cec18c8adb9342c8ffe5") )	(129561, uint256S("0x6d43b356cc6d44a3374245f92a1b46f2a64badd33b7d5dc0d53373c4428f18a0") )	(195270, uint256S("0xab921773f493424d8ad6d04692a2645965ec6d7a044786473cdbd8cdb4ffa352") )
(10259, uint256S("0x609550fb1ba1f17a7842378513d9f0c677eaceb89e38f46af4abe50e2bb52039") )	(44312, uint256S("0x501cfaa594452c45aa1dcc7c7b336c3b4bf7ef1d50d09f7079cce3d739ae1940") )	(74023, uint256S("0x47217d0f77f3852130e2c8619b9d7cc1f552ab671f7254737fcf5685f1cc00ce") )	(103223, uint256S("0x3c78223646549309e520bff0b5d73b1cf8135580ad1cce7084558862ceaee32e") )	(129620, uint256S("0x5d348e85baa3c07bbbc42043a51d731096264dc97f9275b316f75a85dcc6fa5a") )	(195376, uint256S("0xd2c7a6ffd5ef4e3716baa36b6e6a7818f7b6835eb426fd1fc3d4c1c5aabb196d") )
(10276, uint256S("0x72f84fbaeec21c9194e8cf611ba471d54e2a36386ac5e36905a7876251e086bd") )	(44318, uint256S("0xbbbd297e2f6377ec6f397bda131fe17bffc387a56ea8fb41b81d0c07e10b5225") )	(74027, uint256S("0x081928857f52d6c53dfe1466c56e485896f81070156b5a1bed8d7af292a8faa5") )	(103283, uint256S("0x390061fdd334a73b9169a08146eb05443a287bf849cdb6c7e89c86a6dd604a69") )	(129632, uint256S("0x37d1607b23e47400d9fb6cf92f22eaf90b11517bc45ef9e5066779896c07f491") )	(195384, uint256S("0xc083624e989fc13f1c4ef586ee053cc1b7a705e0015b0d5b0a18da25356ee7c2") )
(10296, uint256S("0xbd07aac92a3242678e0cab3b61e0cd74950c82055e25c22bf5a4c2d9aca1e88b") )	(44424, uint256S("0x02d2ed4fbe220e315f1d1ad1ba9c274f112e63ec02f826f4e2f12c26cf042d4e") )	(74038, uint256S("0x92a4a33a51cad5d3847eb88ae11a43407c91f259e06921a02eb160616cbec4b3") )	(103300, uint256S("0x4a0fef39643ad0f1c3a1b1a04d2adb9463770a4bcc84c527efd7789778f6eb11") )	(129650, uint256S("0x0b9c26e2bf46e9f6be70eaf243c6c8bf4f9ab013b4f06918f46ce2ba0a0a2416") )	(195433, uint256S("0x61d9974ad0aad560f2623e925798af48e9dd93ea893fefd266d99ef07cc83f5a") )
(10333, uint256S("0xdbfdb2d61e9d5695b5cbc7eb7246174ab8975d0869aad44fdcbc7dce025d4bb2") )	(44430, uint256S("0x5aba75bfdb754e3d11be79e2d94f6a63d9f8245012de589378adcb751d7411e4") )	(74082, uint256S("0x5f07e907a204d6c41be43dd529799d54b0b05a130ee56a6b6544cf52847e9b62") )	(103308, uint256S("0xa85a12a5e4eef9e53bb532951a685ee208def420802e14a7a0e2b080f870eb55") )	(129655, uint256S("0xaf8bc1ddc16399c682cabd53e8b73896366641b79c509a118aa11c4077922a73") )	(195454, uint256S("0x9757215409b232b59e255615be219d13c3a66c66cbe518035b6d2d0ff81b4b42") )
(10335, uint256S("0xbb2a3173f98d7a78b20f2af05ea70310449ee6f94c6fe504448177cfdacc6c0d") )	(44482, uint256S("0x8b82c53a743657b1d7302b18705723fc1f73ad029ae11c7adaef50be1f071689") )	(74112, uint256S("0xf775f657d09e607c1023ea05c7bd7960ea93de5118517e362966707739f90a96") )	(103346, uint256S("0x57ec536b8f3ac09a118228b93964ee66e818aae9cc83fc500b5bb2f9cd99e302") )	(129700, uint256S("0x079c1e146dc8dd3fc5ca9ea805ccf4b0af7a64f6f11ee0f805e62634b476dc5f") )	(195496, uint256S("0x84eafeeb16a5e959e8f4601b7cebc933315365cd5dc4133b89b9121fe92fe92b") )
(10337, uint256S("0xafa5aeae9ad8927053440cee7e34be0da107bef303a95fb8a838a4df0ce654c5") )	(44487, uint256S("0xb2b830fc86e0fc41c3e2cea84d22059f7e87add481b67f8e8d2d950b805dd12c") )	(74149, uint256S("0xb6855d2666c3cfa37c0202646e2ebe88ce2976ad3cf0d69e784639becbeeb662") )	(103412, uint256S("0xa8dbef4fc703bba8ec80d6b406ff47bdf56d0cc9109e0dc8b67a6be5588f4a63") )	(129707, uint256S("0xae4cb84d3e1160c4af589a9451358b102ec46a75b75783e817d66d6f0cb22b63") )	(195519, uint256S("0xd5b30c007cde74305ebfc9903ebb6387b2b5f1b8c4d4fb697781e2aa23022c35") )
(10383, uint256S("0x29bc53c5a6b4640a498acf3af6fd9d5ee8849d4e22bd2667579c67b3c33e01fc") )	(44541, uint256S("0x0dcafc938005939579b665285eadac42f057e8fafcb74557524c0c6cd0f0d4fd") )	(74260, uint256S("0x46754e5f9a64344ebb6d03bcc9a6e300c04ccedac930ed843d39359b5a2fe29a") )	(103500, uint256S("0x1a4bd825236be4ea4dd4f3805d4861369d7fec1a2c58c11a7d45efc314382976") )	(129793, uint256S("0x533ebf42b9bc1466513a87d9fbececedddde56c06f89afe896e617a0de5f3461") )	(195666, uint256S("0x37339e23e63170043bfbb5810ee07ca2eb95d6c5b7230bbb446d2f207a9f6f7d") )
(10549, uint256S("0x870f754c67004300801b79f2e8aa0c45395d381796840706d4a5bc97474c6962") )	(44562, uint256S("0x41e7b2400f1d84f0886fe6dc46a0ad6eef3a07aea0bb373e09005e321a19945c") )	(74281, uint256S("0x2c2fd96deddd16847a5637d2d34de1a9184cd920bf653427fc21b9f8a9d5005e") )	(103544, uint256S("0xf0d4b06bee42f2f89bbd2586e1b0ed0c54a0c44a37350ca0ac7d3f9b76edc6fb") )	(129797, uint256S("0x3f365526d77b1b2d368f792c44d7fe98395966ecab90c720ca9cd5a912d2ade1") )	(195670, uint256S("0x4d3e2b81c453595e294e16934accdc6d45c0552d29cd18d5e38979d7bbdbad56") )
(10707, uint256S("0x29e8fe8bf4f1b94517cb11aaa8439a47f0bd1a22d382d016b844c8eaa46744f4") )	(44572, uint256S("0x413bccd577a7cc11303bbe10e3b85018ac65cddb7e57aba177c5ed41940d7997") )	(74296, uint256S("0xfb5fa76925295a8ded853b117f5e2c436f95ef2235a0a32ad87279c29e8c6069") )	(103607, uint256S("0xbff17aaf5077a5ea662ba318a982fefba1e42f3f6879de2928f0030448efe332") )	(129804, uint256S("0xa500867b71b0256f2264712dc762c28b49244987d1eba1a2cea2693b12e6855b") )	(195757, uint256S("0x681e1358ae81ee83ff80739de06341f495c08d415622b729b80fb9f94737e14b") )
(10717, uint256S("0xf4283f26137369f30a8f92fb70f6ac7dacd9ade801c897d61b3bd55365ea9222") )	(44594, uint256S("0x7ad83bf85d7f5939ded4bc22e116137319d6eaab218f8a7d9b13354104d4d61b") )	(74377, uint256S("0x87dbb531ab16b87a92d19fdb50c505426b38c896d6fa6d6df82aa2c81b4d1702") )	(103669, uint256S("0xd9ec8e40a8df15e7b167feac24174340780aa7a33b1d53160d169e0fecabf95e") )	(129885, uint256S("0xb721fa569fb1b1d4f119c74c7091453a2c77df84e1adc92e1c84556667edb9ff") )	(195876, uint256S("0xc05f817cd887f1fe74c6a464356330248ef58e059ca7af2831a4abbc069db19b") )
(10777, uint256S("0xcb80f75c4d2917770cbbbaa465660aec0bbccbf16e554110627071ac198fabca") )	(44662, uint256S("0xf3e575c8b81ca45c5bd679cafe15744c03a63a281f855dd8f4e67426983780ff") )	(74436, uint256S("0x88417d3e3504af5e94f575750ea08ac8f70600bfb81dd0a36e72fa4e286ab4fc") )	(103684, uint256S("0xe961df29f23531463c7124c0ca311614e8665706fc7e37ab3bcc546602877a0f") )	(129995, uint256S("0x89d8b5841c8629bdfba81cd5fa0b09e614300ea13dab705faa45d6b113b65385") )	(196012, uint256S("0xfdb7cad85703940aa88ecab2420318045dff0309b293185a45964307d15bb144") )
(11026, uint256S("0x8abfad974f6027c514d5f08e59a1e62cfc338bb198738053b1f61963384f88a5") )	(44758, uint256S("0x1db4f52605e612b37435323187fdb1949c037dbfc49394379ff80bbe877f3c74") )	(74556, uint256S("0xda6de71560bf25c83d6f11604a27cfd03ce16c6253798a9046e01461862b583e") )	(103702, uint256S("0x381557011e0a83ff2cb98f5efaf74c02a823ac69c7e5a9c4784c2f57929084a5") )	(130116, uint256S("0x0ae47dd2327611f92a826ff6a2f853f63be276f6196f8efc6465654951b83bd7") )	(196091, uint256S("0xa5ecc5703669eca5accc2ec7c3a2ffe77af853d2f8b2c989c690931ed3a2fdd9") )
(11030, uint256S("0xb57c42e47908d7ffb14adc3efd4e3f836fa0263fbf167ba8453729f84c206698") )	(45057, uint256S("0xabe2ea6ac221802a310c9b2e95dc2920fa4eb3e76fe7f9c29ab2beb603489bfb") )	(74571, uint256S("0xce3587cdbfefa111b05f209dbed9fec35fab17c266e57dca3158f92219144c73") )	(103774, uint256S("0xadb2f6a7e418880841e50d93772b6637623de2336e4db7c39b8b3bd4abcd6218") )	(130166, uint256S("0x352ce66afec49026fa0f5c349286640ee06a426a31bf0f148c428c4d1e24b405") )	(196240, uint256S("0x8b8490c4702b83e4d705c87600563860144957d337deb9bc1f80fc2a4189b550") )
(11172, uint256S("0xa1e4e0e7795182446bb8ef7ba623282d58417a544ce3354bcea577372e61dc65") )	(45095, uint256S("0x2070e75c27a02d90f1e9309690abb115226f38da4b1156491ee112e47b75d452") )	(74581, uint256S("0xe9107b029e5ce598e847b88a2ce5a9785fcdd1f05243d14449f02d74b8e12098") )	(103813, uint256S("0xd891666789c4237698a6ba33e5ebbf6185d41ff73185fa4bf0f29774d2c86ce3") )	(130170, uint256S("0x045e493e690b809dcfd8015f3bd52f69c0de3a8eea127a638d1bf4a68230624e") )	(196292, uint256S("0xec7b30ac5bab0e7aebfbdc720fd479d04a5db00c0c23a1f958a39716a7fb5b54") )
(11199, uint256S("0xb4c30fd8a87085f83935d4aa8ec5f3a3b9e862a8e92ca22bca9673bbdb7f6813") )	(45126, uint256S("0x95d48a4c6d7e556e5da0fb7a3346f6895886c04d013287b991728f3023e0c1cc") )	(74647, uint256S("0x29e84c26f859e2edec58c6b2e0079b8f4f9288af26184a013a87e1469c587afc") )	(103816, uint256S("0x01b9eb3d9a779395b4ce29a8a6dfca78e6a09d1f571880badbc22694d9bb91ff") )	(130234, uint256S("0xd0ed14cff7f8588cb642039e6f764a3d318e260100dd846264bab7835fd89536") )	(196363, uint256S("0x5939b6af0c8dcb6c7915eca9718e61a91811439cfeb039ebae921694a6683a6a") )
(11222, uint256S("0xea71695769bd06f3f2e00d3d27686abe5b48c8fba4d4edf8add6123f9120b6b7") )	(45258, uint256S("0xdfec58c4d481b30af07e5e5bedfeb9fd80eca6c16e1f194ddc8cd71776017de3") )	(74781, uint256S("0x54d1b220a43e6d3f1217a02b7abb6a3b00dbebd558a700b8de616561f4f65e2d") )	(103817, uint256S("0xbfbc14bd92627f03c2646cfee37aa2c7e74bd5c8fa5f56d9d02dcdd578d06107") )	(130296, uint256S("0x4b027a334dabc92f4ae870c9a546142248862887827daa2237c80c632182638a") )	(196414, uint256S("0xc23598db50ace0aa596c9f5d772491562ac650e239662df72eb783f88b19be3f") )
(11252, uint256S("0x8d1c55e64a39608dc707c0ef542b696577358334b5f28fce545149a14d1267a6") )	(45267, uint256S("0x27c5ebf48c1f274145dd3860d5129b187e6b7f204bcd7adfb9fc934b7ebd1ddd") )	(74790, uint256S("0xe3d527601d68e8750bc96699779259db6154eb7d113edc9ca4e890afc949b963") )	(103857, uint256S("0x3f0002514bde86d813a52a9c741173133840db4b38b37844fddb26f7a3933f09") )	(130307, uint256S("0x66dd1a47f749e21073b4ec91b228f47dc3e4878013d8e5a82b8b8412fa960a74") )	(196429, uint256S("0x9f4bff14dd520a20b134c3fec576e7cba8a620c990921b69ed6bdc0ca938c5c4") )
(11296, uint256S("0xeafe77110b90e1d0fed40bf1ebedfc3a12e3fc3ea92c7e56a88533914031829e") )	(45302, uint256S("0x1f7ed41fac79323e048f5873eb51ccb4f9482ef6de3da58eda58447a2dd0b7fd") )	(74864, uint256S("0xcc6e44c676ad58400d8a9a4e7341feac0e2b107f387b41246888aa35d18fe918") )	(103928, uint256S("0x0548d4e78bd3f1470f795705f84f630311bf360bfcb3d75943493a73d808d94b") )	(130344, uint256S("0x9925919db55574723acb6bdccc071415d5e9abadc3e09c7dc660e40a17f34d1e") )	(196463, uint256S("0x10ddfda48c8df213514275cc2177a81dc4397e4eeaba7c69d14d8c9f9a10bc1b") )
(11463, uint256S("0x83ccb6fe40b6566cd46d4fc9350bb1cab7f17551c615c0b02ca6b76932c04e79") )	(45500, uint256S("0x43b70a342fb3e7ba0fa61cb1db47b6a21f099cbf0c1a55b2639e53d548fe8e45") )	(74887, uint256S("0xbe31a8360d5fea8ae687bafc7ed8cec8875d62e55bb8f3c1ed16ee28846c8295") )	(103989, uint256S("0x6b1cb4a5eae5680b3c90daa819d7c02c7d5c17b13fbe25973e3b348eb1c8df26") )	(130390, uint256S("0x79d8aece4512bc865dbf724de628a71736b44a12cfff43978554e6fba884b226") )	(196643, uint256S("0xa81b3468ce458e27673bdf52fbc9daad40608c8ee7d11675be97e3e808af7793") )
(11538, uint256S("0x794581b7d8842f83ae2c94079b6bd57227825c3ae021980a0c19810542d8e368") )	(45551, uint256S("0xd12a0f05c9023ecbf63f872775eebcc96dd3c918ed1f5b21d105a81ab3383214") )	(74921, uint256S("0x24034241fc480671ecda2f0ab2d1ebf2de4cb0358bb7e514986ac2911ae1a085") )	(104030, uint256S("0xf4445de8ab5139f49f8f35b514ec638105d7203c2a27f57c99643b4181e41d95") )	(130410, uint256S("0xdfe8a40a27a7f41593cf14e8d4a2122f95f169ebae9f002b21ab07ea519d151f") )	(196761, uint256S("0x14f062adf9f9ef93042a4ebdd0fb27044d8c335a2e473b4177c55e1c91f6f9a4") )
(11542, uint256S("0x3d24cee49e5ac0706d3d9459d152d3249e6f9acc8ae7f119f34e761da662a69b") )	(45575, uint256S("0x30cb93f1ce2e59a6badd50aa5a243613fe2053c972fe9eece838baefad05de71") )	(74936, uint256S("0x3dd2d76788f85e7854245e96e3cd4b4d2eb7ac0a3feb2a32eb051895bca207c9") )	(104145, uint256S("0x5130349655bbeff85e546a1b6f6ebd7497a2364f3f818c6daaf4ad0d079c3a12") )	(130411, uint256S("0x53496f730cd9dd71bb4fee1a1668358c7bde42d893480e3e02328f21af5e9e09") )	(197044, uint256S("0x4ce34f3887cc5c7157e925ac860e45a982fdd23c049e54b372955d10e99b398e") )
(11544, uint256S("0xfc89ca78aff7ffa150c05fa2401945aab6b7d939deed248ad6c6be786f355d89") )	(45726, uint256S("0x79daee18eedff749d8eea41ce3d5632661cb5de1e1da1276e115f86b4b42a72d") )	(74972, uint256S("0x053528e3931f04f6a0cd6f1f49db1561fb38b9dee20c5ba912025959f43e93d1") )	(104177, uint256S("0x140bc4db1a4e970635623dec963a8ed8ca14b0c801d38f42475637dfaf2a4023") )	(130453, uint256S("0xd7d9e34ee2e2ed543a973dd360d2a421b2ad28d22d112ecf3db043de9cc0d662") )	(197202, uint256S("0x7ba2f5a98e9848c945974ddcc6d10eddeab733d1c0d1bfe7fc86e20d4e111eb7") )
(11551, uint256S("0x6f401d47c6031aaa2044b4836e1178a09b1dc407565177732ec23d4c33381080") )	(45734, uint256S("0xcd172d616674ab79c5056cc764bd696433d9dacc937beb186ea199ab7a12f32f") )	(75059, uint256S("0xb602b60143e3866ad8b8975b2034828b7173f4b17b022f45f71c0a27013ff058") )	(104194, uint256S("0x31aff811036e7aabd3dc701b86a9205b70bf4dfd7a1c00f96fddc45631273b07") )	(130473, uint256S("0x4cb1272e9a4bbad6488850698f443fe4eb637797d8c934b565ea6895cb485ec4") )	(197354, uint256S("0xf822bc1d3e676c9bbae344100dacf8181e593db02bf2acb060d8ae736cc3ba51") )
(11600, uint256S("0xa6c55fe57b2d3e9d889e2e4f1351e6d89483f7558dcd31c113c0da35c41726b6") )	(45739, uint256S("0x4d2e553770e6a8bb49f16f9ed26224c522ec8bc9855bdad083829511bd611c0d") )	(75113, uint256S("0x54c0613152025de7287e70edd42e2ce77dde1ae8d5f513ffb93e8a9c51a3975d") )	(104304, uint256S("0x43a7fa7196d211258d8beed06d5b6d5afeec94506eec35bd341f7b0c52ea79e3") )	(130605, uint256S("0x85d7ca284753d564384ad812d393ce2a3e8e970a7bbe6a2e3672a0bcc5f70d65") )	(197372, uint256S("0x6810ed323fb0ab3cfaf4cd61f22e02c502d28edae0065269ef86034b4848e8a4") )
(11699, uint256S("0x07fcbd15de65f0540385a76683789c94e587e53fda36ae7a7c7a38076a57168d") )	(45747, uint256S("0x70ba7ad4b99175a32599f54fc4bd265f6b0c6d6fb37669ffc7d2531701d525f5") )	(75157, uint256S("0x1dfeccfb9ec2acf5538ad1a8059ce0b07076bcf4dfdae25a69e5bbd8ee89afb5") )	(104321, uint256S("0x84c9911b0e5f5177075a581f0cca5a33638240848f171cc051bddb17d5fdbdb4") )	(130711, uint256S("0x19c45f6e59f237670cf644f002a2f2f6a9b63a8b631d91345e3dc6e960d1fcc4") )	(197706, uint256S("0x33af240046a47f168007122b9a883b44dbd7c20a9de7c7f97a2b580286494767") )
(11723, uint256S("0x85db34bdfd529ab723a24c1eec1ffc4a8145a19d8539ac76ec3c2e85130ccdd3") )	(45880, uint256S("0x97012255745d23fdad92d7bcb9e93a093c7cad9c062065dbf997dbe4feb95759") )	(75194, uint256S("0x9936667facced03bea4e262b575af1f1de79d8b9c29f22ed145196055cb2efd1") )	(104327, uint256S("0x42a4137bea1ea9dae887826e16abe05995a645886ab01ba23439f21b6e6816e9") )	(130781, uint256S("0xafd219cd5b6423c37d508bdf71859c33c6c22b801a5ef4969192552e1006c4cd") )	(197719, uint256S("0x392dd5ac78997e4312309c19916c6e57ca6c47644b2b10bcc033d5098b18b3e3") )
(11728, uint256S("0xbe0871ae79c75873c1fc748f852b435e5874ebefd79708dff0ae73dd0545518b") )	(45937, uint256S("0x1d9d6228c233ef269f6dd999367ff211b3c95741d6201df5447e8a33e4b30e79") )	(75320, uint256S("0xc8b0cb277b21a684625a9faeef8d933e9c49114432d3b2e90de9e10334ec5976") )	(104331, uint256S("0xbbaff01f8384c66625462e983440168b6926733eae47bf817e09891a7069101e") )	(130837, uint256S("0x7b55fc317de9f923f53acd898552fc9bcf5cc517849607124a87e5a73b7baf66") )	(197777, uint256S("0x83abe5139b8801589ce4cf035a679aff512c65ead9a30ad56d89c27e2b54ca0e") )
(11794, uint256S("0xf230296a6256ef8ea1c0edf0d0670061a583aee820af2c993e884b4694baa8c3") )	(45957, uint256S("0x193a48c70a266ebd907316f61c040b0ed94dc80cd2d0e21bcdeb14697959e0d9") )	(75416, uint256S("0x8deb7a1f87d6d8d0b07d96f130b29d7120f6f5bf94aadb8a81b8a74eda491e8c") )	(104364, uint256S("0x71a20afcd6d97d53420092903fb0aa795f9bbd181dd916408523388ae5c5c093") )	(130882, uint256S("0xbf037590234b0c5dc9a63a7d92d01e341929641f396354bff9b1ef6d15ef2854") )	(198107, uint256S("0x89f2ad4a1513eb8c20ef106c744b3b65f812695e2ec49270c27438120551be40") )
(11832, uint256S("0x9adf1c9d4b24be27a99f0d47e4dcbbe43f0236745b6091085eaf0c1931f39589") )	(46086, uint256S("0xfd00428e004af47af033c17912562008cd549cf8c57087961d8f9ab51e5b9ccf") )	(75504, uint256S("0xc653569c885ae61a6ec792c29692204afc1f802f9da7f179ec7344b206871036") )	(104387, uint256S("0xb41f1848cef0e55e9f3f9dd2bcf4a03b7f5fe954ee2a98ff7724374e3b3c844b") )	(130933, uint256S("0x8c9c9c5203e812a1d0ed341b38468350ab5fc3af80deacc460afc77a29b54df5") )	(198111, uint256S("0xd0f5e198abbeabed9a43fcd2218e2eb59b9acac4c15ca13f8a55b8f2c12cc3a2") )
(11913, uint256S("0x58a72b87b3dc4536462b34a3bfca85ed42cfd3306f1370b8c3f4f0779aa3f989") )	(46140, uint256S("0x0c5cf875fc794a77a23c020580b46ffb9820a4e3f2fa31594ee904e9976b01bd") )	(75611, uint256S("0x6de46662eb3c3a4fffc64f9d17ceb5972461ed6a3f254c1f9fb5748400ee8dd3") )	(104389, uint256S("0x1c4677c88c270afaeef2a3158d86bcad6e676878691d61a73694848c0528fcaf") )	(130967, uint256S("0x64c93c98f5ab4690014c6b3840f6acc6338c3738dad3d331b218015d283b8eae") )	(198127, uint256S("0x0a21d19799732ff7b37a981ea0c2dd40fa3e560787a6424d40200a0ea71073c6") )
(12132, uint256S("0x8ef6098235fa86a33c56ff052a7472d272471f8af1772207fb5f1365472c3602") )	(46162, uint256S("0x692cbc98dc10b616bf66229347ee03d8e0741c7cab8296482b332171ad5f34ce") )	(75627, uint256S("0xba6b87d2134ec9132d62c33d2595c4b6af1fbe63f82ce25e7ab13c890d3870dd") )	(104526, uint256S("0xab1993112ca49b85d9c3a8dc11700cac9b039ce7e8b6fecf061df5a288185ae7") )	(131019, uint256S("0x7a5fa962b8dfd5de5e1a61038cd97a8d0d330019c4b1a5ebff69b7c1dc998188") )	(198286, uint256S("0xb2378e5bdc1404c86d972d97c44d366fafcaff4ce2979e7afe9acf38badb6bac") )
(12182, uint256S("0x302e4c18bf6669e319933863010c0db6b70eba9d6f2a41eb85f2a214d7e62452") )	(46193, uint256S("0xd9a7c7778df24c60479d3d0b9d08ffd773be38e33d365b8b0159e7dd538c5338") )	(75640, uint256S("0xb26d87d3ff8c260ec55a309d20fecaa4b6795747eecdf66c2f7c2a60e4b7c046") )	(104533, uint256S("0x91b78e8afa64a00b266c7d971dd7497006ebce5b5ccfa2e9f270fbbeecbaf9df") )	(131033, uint256S("0x599d6c1fee11db391ae808b5cd3cffaf4081123580f6341c2cff240e38f0231c") )	(198327, uint256S("0x46a2d86e4e7643ef831b920db0e81537917db7575cc5f517d8916996fa88cee9") )
(12227, uint256S("0x2cd71f723ef325f03f3b54aa8c2aec19c61080c5e8496fd9319d8936d93d6915") )	(46217, uint256S("0x25078623a862b2d59130d4eab93335d809c2b71e58c1543eff095c1b359ac16d") )	(75665, uint256S("0x1d3b44fb96fb6855676c257422f1896cb5f3de2e084408c60dc008156d896d41") )	(104568, uint256S("0x25e9f4c5242871fd779d397e452762a9d34b5fdc448520cc4b6f00635eedad71") )	(131065, uint256S("0x8cdb1b1baebc9dae02fcda96003c36ecb71b41aff5876445fa3d6591b82d4a90") )	(198479, uint256S("0xbda36b63ff154947fec5c004a54c6618ce31bcc5d8801b23e6f074065de997c1") )
(12262, uint256S("0x623d99b152de5277a4a6246d3df87b44fc89e7e281ef91996013714d1a221d24") )	(46246, uint256S("0x2766a1b702ee8870a34ef6f85b51e24ef68cf0cf9999a31fcbc070b8d557b873") )	(75730, uint256S("0x2f459476a508827cc5dc6dda1f031d2069078cfe8b8c00c56394b0c88dd444d7") )	(104571, uint256S("0xbd62c01c9059beb15f36ba8450cbe820f44b9cbaad257c06a30e0f7898164ee0") )	(131081, uint256S("0x9e49c9e47f582b48fd3ccf7655ab51005d8a5a94a8d77c23cd056c58d0a4377d") )	(198596, uint256S("0xc9fa78d70ce83bdb80753706b30c4ef9481a512be0e0c1bff25e5604ec64a23d") )
(12291, uint256S("0x14215fa216c2424f64033cb754b544784c0f64a9aa6aa62feaf35b6626b60507") )	(46274, uint256S("0x4bb941b11747d429a2c0b499a00497848882a20ddbe809d72355c5aa33b64fbc") )	(75867, uint256S("0xb40fd9bd53ddd4d0a75214781805e277c197f9ff5c97a0ef3152eaf148e06c0b") )	(104587, uint256S("0x6b5719bc1be8b880ab753dedbc5055f895492af79c59b6542676fc0939eab7ee") )	(131117, uint256S("0xf682014c0b3159028598f9595a22426fd12045305d35c68b35bf94c20b679d7c") )	(198801, uint256S("0x4a22205d7764200ab6b763477163f093e56f483ddfec96b31930a28a31a9aa01") )
(12315, uint256S("0x154e790f94a6d6b3e9355d4b586f93f992385527fa9bba9d4114ed73116cd20d") )	(46278, uint256S("0xbc06e08a3e66d083d2acafc26351532b638f9046da36fe3b6afc306c44e57892") )	(75929, uint256S("0xc5d26e40fe8d6bf973430e0b0ba32c27753363d694bff49794ffd3cd8ab0264e") )	(104659, uint256S("0xcba8f2a29248fd98709f9e4aa02587a68527afae4094e0f9f74156a8859def3d") )	(131124, uint256S("0x0d54fac743e6381612feebc1c4d94ac6854e92cde4611eb505f5258ea4901326") )	(199060, uint256S("0xfff556c3d6c79895bf04b06aeae2b8c56dcece2236d79a68f1530bae048a6f05") )
(12417, uint256S("0x90e5dcabd152b6a9a53ff9b1befa6c6afdeb55061b30973ad0d049ce7bc01672") )	(46296, uint256S("0xd34fed4601ebdab97695d5f69bc3d5946b8842600401532ddfcb91a938bf3dee") )	(75984, uint256S("0xfa6b75b8f6dda1d63296d93faba26187334595229439b244fc68ca31fbd28148") )	(104698, uint256S("0x8bab431839b166642fb843867dc874a5cdbed15dc3336f557781d10bbac7f6ba") )	(131133, uint256S("0xabfa080a59435440426cf6de5ad5999a62675a7c471bf30c48553d9f3241307a") )	(199215, uint256S("0x49cd67bf3556ffd4eb676f659b2fc378be7cba320c920c4f5b32b81cd45e70a0") )
(12469, uint256S("0x47db003c62f8fc89f1a6c6b1a77ba52f4ec7eed6dc36a21271959ee7906a041a") )	(46390, uint256S("0x2ff06fb965d3cbfe5933c162c540ba3903370137994068c48481f35c3fa18b37") )	(75998, uint256S("0x22ed71784cfc2ea8e2cc5679189af436bf9bfe0380b17e400a2fc43b4f4a8599") )	(104717, uint256S("0x5f1403c5acc1a35e26418a896e6236123f0e4773223cc84d7e6ced57ddb3121a") )	(131198, uint256S("0x9e82e162420c11595c504c2ab5187bdd5e04bddf65da90c2fbf9a1a415247c6a") )	(199393, uint256S("0x38666e153f6bfd508d30cde8b4be6c4c55e8566b097c344e8d96b3da12056e40") )
(12622, uint256S("0x363b98ec58c753c36a795fd4f0b4972363033f777a583fa10ecdc394759014d6") )	(46405, uint256S("0xf2e44d3806770b7005be6e15481d63c18a84db29bc076907eca81f773d32ba82") )	(76062, uint256S("0xb74063b705c69ff508320a2d01106864df07f0968460d1abfae4f624dc2cb0a9") )	(104731, uint256S("0xdbb2847994beaf3b59d19dc90d246e053473206ff5bad26aa5d5557240c3c40e") )	(131234, uint256S("0xa1cfb4c28a0b7bf5c6cfbfec011db99780a975443b089f4e22c6d487cebdb47f") )	(199445, uint256S("0x1b030216a4f44df56ae3a18bf972d6c723b2e4a9f1c26b74b11295cc5c572bf7") )
(12745, uint256S("0x094a53a8286d113f9d4c034f648a23f83a377912198bdff9f12af1083ea835fd") )	(46477, uint256S("0xd0adf3963703e3bf7cef5dea3187f9f9de3eff111d7e78985a1174270ff3a209") )	(76109, uint256S("0x7694635834d7e0efe273be329cb329e437f15391dda151b9af01ee01d237a304") )	(104755, uint256S("0xd6ee40b337e24aeba1adeb38c0b3f4b4c42798689138e44b4ee068ce3e203ae3") )	(131256, uint256S("0x834f9edab53d6e684616ed6544f8735994a2143f4a5647d298dd2188ac967bb3") )	(199462, uint256S("0xdfec591c1fbe6392570fd24eb77ccf7fbf47edec7bc61061aa227c530346ec14") )
(12804, uint256S("0x53ee9ff96426b5724d03a6048af28d25cf109625ec660803e617bd163960bdd0") )	(46543, uint256S("0xe82cf35c972036298e9ba16d8379fd9d1750bed179e9ea15854d3331e2cf04a7") )	(76127, uint256S("0x6db160c3c70b6be0a752292e46ac834b211cfab07bf09df2c1a5e3ff41ff80b9") )	(104764, uint256S("0xa054b88b17bfd1243d5fefe53f465f0c56f6ec43274459628cce996a3eba7783") )	(131316, uint256S("0xb9332a59c054731ebdd58c534b8cb895bf52927b2609eb72fc8c04a22e14bbda") )	(199667, uint256S("0x8fa19598f33fe60fe6a3a0f7c69f8d118d4f30a9519d40c65fbcb2e2e5cff1a4") )
(12834, uint256S("0xa71be5c12e9e6aab6f19ad4a37ff56bb57fb2d11eeff2769e3196d506fdce017") )	(46550, uint256S("0xba3ccf1b886bf4e4d3d6bdf584440689031911ea76709601f79d0c740dd39636") )	(76153, uint256S("0x455728fea8d52bafe099d18f7b681def42e6b23c74fa049dcb9720e7079d3900") )	(104795, uint256S("0x057ca29becbfb43f827d1d10c785712db57bf75c7860ee0390f0b090e15f3785") )	(131340, uint256S("0x674dfc8f5a1f7915ee62be2414f7566088e904388f85e0dfdb84fe13e86d2b65") )	(199980, uint256S("0x6b587877e29a3669b96bb9cd1c3e9b586684e645e679d3c0531226989f3e2e48") )
(12900, uint256S("0x4da0fb343cd1074be28e6cd41c9ed6631994bfa12fb3ef10a856a54de3f519f2") )	(46570, uint256S("0xfb85372f802444be984366cb6bdbd62da116d127f8360a0c01d8206b31625dd8") )	(76171, uint256S("0x186faad969c966a8bf426ff5b6387f36c816107b718a066ecccde940897b8dea") )	(104839, uint256S("0x3837c9b7ff61e82cd59ca7ce939a289f53ade795b387c895c98e86cea20252c2") )	(131357, uint256S("0xbb01774e0c63d429508c6f581075505bd07b7a8d238c451b5ee0836d6aa74ede") )	(200001, uint256S("0xa165f8c88d49335aaa91c80778551da67024ca15022c34da46e080d565e8109d") )
(12917, uint256S("0xde31c8311d251c7f43d591ad6610d7d530cc2362c8137efa129a8e0f4a3c0ef1") )	(46677, uint256S("0x40cd6ad780eff28b3ef898d497f05274ca030e1ed7d62ff9aedf99256b126011") )	(76198, uint256S("0x5045a6f6c567ac965e330312d095094f7136b7c9bfb1635e0482c7cf12ed451b") )	(104856, uint256S("0x23cb247a39acb52782f1cce8c0579f224c1560985301495c96f3f27a0e3ef6b2") )	(131360, uint256S("0x4ec321e0f2c98c2a1db85afce7912956662de8bf5943d20f8a21a25e7a37465c") )	(200002, uint256S("0x64f7075be45b45e03c9697342e1f5cd4e4919bccf04823b11e855d1b3e268170") )
(12918, uint256S("0x7f2294a71b572cac78a5bedb04ae92b0fc2fabfd1999230ac04d1137d238f474") )	(46683, uint256S("0xbb16ad8a37e36e42e34aba530f23998bb4573011568427d13db8ec2fd67af205") )	(76209, uint256S("0x8a474bc53746eb8cf372cde47390d74c4a57e8499cadbdebf522d2e4c972dc4b") )	(104862, uint256S("0x3a9938d040a84ac1a467194e622604220df793414ecac6c01c3ec335d07f8dc9") )	(131374, uint256S("0x9c5a907b6fda5efc7fc77655b9997c60152bf87196179d594118d1c49080e1ea") )	(200136, uint256S("0x4b4a147ad44868bd9a55865adb8ee69a70f7db7c6c7eca9073370878e9ccb202") )
(13005, uint256S("0x1ceaa1d7c5bd7c17c7d707b2a290ff278d46117acef3089c1158ab6d5a5481f1") )	(46691, uint256S("0x9126d39958a5c1d375b87b1a72a7e1aaa77e7a5243588c6acc648444d2358068") )	(76237, uint256S("0xfa0e9df32fde9acc982437910133d2edc053410d1469825da1ad729a287b0963") )	(104893, uint256S("0xa05bb7e10fc166f483df1344625397f17f7262727ccba95a3690ea58d00360c2") )	(131380, uint256S("0xed947f1319d9ea541be33995fda8181857d3f3d396993161ce9c0ed4b9e9cf71") )	(200333, uint256S("0xfbf8ef8483ccecdeb12ea431b71f59bba7763b9c5d8bdf2d96486a6154bb6b46") )
(13021, uint256S("0x3f66707aebffe1a00837b8a9e349a56350e273fe959c66fd85ce8b44192c6468") )	(46818, uint256S("0x4ffb36a4bf339bf96b6392e07cd266a70209de186e7712f0b6af47078f42282a") )	(76272, uint256S("0x71a3ae38b6f19910f20b109c823a0591b171bc99c3cd623e681f3245a8b84480") )	(104937, uint256S("0x9100f1c4a564c56fc58b0fb48eb83566594a5a310dbe5870d812901a610e5607") )	(131437, uint256S("0xb37171306fcf140fe88d3eda966a94a93e69e3dcd7c7702f28e386ef03ef747d") )	(200335, uint256S("0xf759f5f329c19014d31784ff8e7de1d6d40826e43a9b041060f8c55eeaaaa713") )
(13028, uint256S("0x037b1b95a381d882f47468cbd65919240f9c835673b13c868326bfad026906de") )	(46826, uint256S("0x231686e436c29922ba570581d4b7fa68702eb95d868362286894c7a3a10b8110") )	(76280, uint256S("0x3bb7d830684cd40f8b482255360003f8c0f21fbe0a7ed30c4a204828a6603909") )	(104951, uint256S("0x38dd8bc9402d076ed40346a7f848cf8ad17152f9b7992609ac620014254c424b") )	(131453, uint256S("0x548897ac27aea72dce0b2ecd9901c7081fa9708abc556137fcf778e3b45d6fe5") )	(200399, uint256S("0x9596c07e08876c9b120e3ec17235f3e496da6e7d0ba5bea965a0cd5d87bd0478") )
(13123, uint256S("0xa5355a1b5dbae4084dded745c74152854e42e4322563d8fe51835e692fc905c2") )	(46881, uint256S("0x561b527235feac5dab4dedd9dce27e31b77fa87c663d8f12e20d7375429a5364") )	(76297, uint256S("0x06f0dd1196d6618c6cf93f97c3249b161093015335b0ba8f621d0bc25454bf28") )	(104964, uint256S("0x79183fd4396621a29ce2c16c6ae166cc1fc83cafb2632830a97609d75d435175") )	(131512, uint256S("0x180de57adcc3ee3fb1cfcd6215d43dab295e8b746704d021a861d389b3ea2eb5") )	(200497, uint256S("0x26359781c6e251665d0ec08914cb1f5520ccc5043ac4de4c2d41f1cb1012ccb6") )
(13147, uint256S("0xab636390f5f21f70aeee180ad84fbb6e50c12b664f6ea6be0e4a16dec2ace921") )	(47011, uint256S("0x8537f24051d69b8421de46a8ff437db66b5e16318aa4551f20e2d6b823e7dde0") )	(76421, uint256S("0x621d7b4af95835e169b355548b6880d45b7f00e9e2e83992e1f2cbf77cf5221d") )	(104992, uint256S("0x5c7b513ae351592237dd628ed1dc5c940aeeae1749bbf7f3abdd8ced3c9a2877") )	(131576, uint256S("0x4e8b046ca9c25435d282a2121784c5e4bc29d07e6bf212b17028f45a32a7212b") )	(200534, uint256S("0x267c73aae8e8ac3f6403b795d7260ea217802d6a6a906d767d3f5c8e28107ce0") )
(13204, uint256S("0x4dc115f356f687cf3b2edb2adf5dc60cc8b7e3968ce600845e0c669c3d145111") )	(47031, uint256S("0x3af24f48068f7426faa6c73a66f760517a3e42beb747324d5e22c5505a0a0bbe") )	(76498, uint256S("0x5efa9ef0dac3162d7bf0c8d21a49049a7b50cfaa73e340b365e6812ccb15c6f6") )	(104993, uint256S("0x7325a9b1b4050df76dd1eb519623d75eaaa0268524c76e66358a59cd36a093f6") )	(131614, uint256S("0x879e85baf19b34c8f83ac45a3c0a14a08ea68fb052ef91d315e6a9c37656c7a8") )	(200599, uint256S("0x00d78f6dd4fdc6c6fca544c44d990fbecfef01dc6e91f4aa4ab2efa32c252e4e") )
(13261, uint256S("0x5a33250c642d500159a2aeb8f21ff8e74c099c6114a67d961bf0926ffb088f4e") )	(47069, uint256S("0x67fb218a28c9e311c5923cbad1c1c3da6e171b32458355cd13764e4db871f7fb") )	(76526, uint256S("0x3e697483fc50c64afc60d534b8e30ba8cba57e4ac7416a1d21a95bc60ed47517") )	(104994, uint256S("0xe4ddad28be531ea6ffa999f9dc78c4cfc1f25c59880ac7df513ef613aeaee68f") )	(131686, uint256S("0x3f41f6b2217882c043a8f627125f8d47af8438f36ff86042710c29f6a7559398") )	(201066, uint256S("0x22662b4e995563bce5cba8f3721d675f990ebff4988ef72c30141cf67d3d255d") )
(13265, uint256S("0x0e12a8d6d2e059a6df80e3908a0ade57699222776f1db07eff42a454ee4df4cc") )	(47087, uint256S("0x5594dbd4eb54081c3383f45c8fa89a45bb305740e44dc3fa7dd205bc196fbc3f") )	(76593, uint256S("0xcdac3b23cd8a3c655fc43062b9b8d50d43e3b12258d921ed6b8444c5e21eab80") )	(105012, uint256S("0xc2d311eb87e56838ec48fb56b42e237485ec7e9bbb85cfdbfd250f7e0767a80b") )	(131731, uint256S("0x423785da21b0881b9f1c28af248435ea26043de84a606f3ed5b48d6d84dab860") )	(201079, uint256S("0xe1905a1c46b48f80fafd245a40f6aa709a88a7524c98742a2241d496280acb63") )
(13289, uint256S("0x96126b0a1280c890032418e0eeafc443152879df4cc588437870ecec44727492") )	(47123, uint256S("0xfa20c531db7ac9bee764a4c7f2fdb983557c47a870d085c930b057d78618d887") )	(76658, uint256S("0xd7ef428b8f1de660460521532721f2ebcfe3ab243f73a2c5c01364ce6d3287da") )	(105034, uint256S("0x8b0dafbaef17cf886dc47f9cc6ec458ab98057ecfb9907b2ac22297e971b14ee") )	(131733, uint256S("0xdf25aa5fd4e09373168f2d71d896d210ae3526d296bd9a3b6b3540fbcd3f1858") )	(201152, uint256S("0x8ce704ac4d100e2c25aefedb30a6e22f0c4625e69a62bfca0fd5c2d8bba5fe31") )
(13299, uint256S("0x83cdee240c04f1bac568595384df834fc865578dbb1db95788607883bc60700f") )	(47142, uint256S("0xd2a42edaafc23c059c9a8acebae77c8c20febb686cb7a522ead9ecc10b39bf3f") )	(76660, uint256S("0xc77fd25252dfbf224c4cd27d8e8f232e508d3591ca25e279aaea695a4e113613") )	(105111, uint256S("0xaec2c7ab71110a3c415571f83e115c1ac8aec366ea974f0fcdd1aeee096576f1") )	(131795, uint256S("0xb049872352df261f84e60c24cd61fffd6aa232466ccd03b6eaabe1c167c6ac84") )	(201178, uint256S("0x7b3dab4555c5cd20f2df0e0abe597f6f8deea253b20246a0d3a1d9b16e6e36e9") )
(13416, uint256S("0x899c620c14cdd8682ed5e7dd05fb965d649e30b2f404c130a9bc44d65dcc33b0") )	(47160, uint256S("0xb4fa7f5a83f4e46d672c7533980276b53d7f6f3805e9ee6599ec9e53e21fc33b") )	(76735, uint256S("0xcfc17faacc3d3ef6e1ca50d8599740d3903a62050b873b35d1a55cfd71b5eb8d") )	(105138, uint256S("0xe423e8c8de72cdc5d53c69fd270130ef1742b33b632774112fae91c6f32aaacc") )	(131851, uint256S("0x17488b09025baea8ea8eba9cd4c674cd43442e006d2afcc0f474466ad3e38d4c") )	(201445, uint256S("0x80ce19c87fcbd00316f20b5a590f4645e1caa79ca0afb61c24f6fab0e34bde45") )
(13513, uint256S("0x27fe47c166b8db92c0ce29c0c6dbb5bdee0f07832593677837e3211fedbfb7e7") )	(47165, uint256S("0x9cc7a5d9bf42e2a5fc48b48c16562df6e60eb2f5a5dd722ef4a23147fb3c4c1b") )	(76755, uint256S("0x387d638ccc71c1fc39a8ed8edd9fa43d265ac331bc5865c77cfd65dc4f5d32c8") )	(105149, uint256S("0xdb505cb2f2f261fa2c2fdf5146f09380af298418be47ff22861f509379e7ca74") )	(131987, uint256S("0x6a2b7bb7b8c4a7d6373d0f15fc433d28cb8ca099b7646875e3cf971737b49810") )	(201626, uint256S("0xadd671f8c221eb60d69b439a95ebb2586e3e84f3aca575f6b516848c74e80791") )
(13727, uint256S("0x3fb8f259641e33066dbba7a807c25752711c833e9fa2c1ed81927944b86f7423") )	(47214, uint256S("0x5e021c3f589429aa875e754c4b3be0b04b25faba457b42f83f57800d424ff718") )	(76795, uint256S("0xf76e2633ef112b46d40f459ab7fe610a4472890fe3b85cb5c534ba2320ad2d83") )	(105282, uint256S("0x01bad29ff996b937628b328857bbf6e264e931f3d3668a62e8377b2f0187e9ab") )	(131988, uint256S("0x84e2f572b3a64a0f9a15e687d78413012d6ce71c33bd80ce690edac2fe812aa7") )	(201761, uint256S("0x3437dc61795f8e6f7021becfc06648725ac26f34967496965fcf2a7517888c87") )
(13734, uint256S("0x53c1d91079126776f328d8bd0068db97a8e011e8fc505e493994b18a82994d52") )	(47216, uint256S("0xf7cafb7f9f110da6a5a149a1661e25870124b14c368a7051cecd1a1036d7464e") )	(76804, uint256S("0x89505e1be75ad3091cf2888a63835e9506a6d4dab3e8fa809a1630c4e37f08e7") )	(105342, uint256S("0x613bc05f7b50c9a63c09b224595b278559d02cc13e5e0246a4607e7767cd0591") )	(131995, uint256S("0x29429ed8d170203ffd31f829453522283dc39a90b60986e9d3ece41854c411f7") )	(202138, uint256S("0x90ea741536c65df968c86463c68ca892151395d3710234eb6ff82047a5ba7adf") )
(13816, uint256S("0x11e1ccca5c44d3c113a3e989418484719031bb33e57c4561e340920a961dcde8") )	(47260, uint256S("0x96a9e0ab8d23aa0f2797575fdceba14b54f67ac391e21ed526633a62140a60eb") )	(76814, uint256S("0xa05b4bc8bb75088a2099faaa5f193a818259c217738f59be35e10e11a0e7b5ca") )	(105368, uint256S("0xe25900473454d4f8100e6b042211ba3bd5735afdfe24c5cf311fa58bb02db354") )	(131996, uint256S("0x8b042bd4ab9e92a8d5fbdd2fc9b8e92ca0c542dfe9dd164214d730a2b757d526") )	(202151, uint256S("0x0d434aa8825aa80a54b647674b3547b5a9a5a7d52249b4fc741a787faded1ca9") )
(13935, uint256S("0x3ee3d4226ced96a5cffd9ba9c6a2d2f2351b3c86b41c62b4751f257ce8d3966a") )	(47277, uint256S("0x0837c748308f0188119df7fb3a093d2bad037048e8d204b382e753effb492377") )	(76838, uint256S("0xd7c7f0210733a4517aba4a752ced4e4f6b578789560bfe1332fd442815030a16") )	(105425, uint256S("0x9183e51ba77acbf046f8e3ae7bc438180fd897ec58d2e61a8a726fd104375f4f") )	(132011, uint256S("0x32695876b815a18e9a8b2b515bc14cec23ad388d58f6940969066c798253d127") )	(202285, uint256S("0x9e57e6fdefecf45c02361a3f5b91e81d15ada405c98b232d5186a759540e227c") )
(13977, uint256S("0x6c2bf4315c71e9859bef033bcf483aa2d0f4831e9baa36df64f5e0b43bc40ad7") )	(47357, uint256S("0x12e74be0a1a8dd9b737972a6899e4387e661d95557dc47029588d384bf812a09") )	(76847, uint256S("0xd7877461b3e11d1ae6b604fe8aa18223387151e50beac7e4e33cec7f6b51acae") )	(105435, uint256S("0x0eb66a948fd65fb5aed251f07f3d863a50028482bf9e147b19dadb2ff414f409") )	(132144, uint256S("0xa3eb1ee3b6861d89482802bbf05ea4f04052734f27d650b64e14da0cb0784638") )	(202438, uint256S("0x5b36648aed51aee45f3722272aff4eb650d7396780f15cf99317f54a236cddf5") )
(14000, uint256S("0xb149f2b8bdfbe42149317b1135c6c2f265188a43b98e49e6713a638422b8db3e") )	(47369, uint256S("0x0a2ec82ba42a500eac0f768f867e5569a79b7c8e81d9e7d1c69254be4831472d") )	(76948, uint256S("0x04104ecd3462a540825cec52daa8c723d80179a7d1e959b9356442790dce98b2") )	(105478, uint256S("0xdb0aefcf3971b4f3c7ed4acea8071c87509bbfcc577b4a8afb0ab498a210f5dd") )	(132227, uint256S("0xa95142f5ee625063c1fd742d31749ede5e7e6775363a25b3cf9bd430bdf8a8d3") )	(202463, uint256S("0xed941786e648faf3028e91289cc116657013ae0376ab409cee9c49a1cb6c608c") )
(14098, uint256S("0xd3f4ecf72fa0612e35702d643acadd550a87a501a7f5f069c002e6bdff2678a7") )	(47403, uint256S("0x47d012ccc016bb86845a7a0325780a7d94f8d4d1efe40ea74c0eee7870188afe") )	(76953, uint256S("0x714b3efdde2f6a7bbd57b2523ea19c066edb282001df3599445bccec6b504957") )	(105480, uint256S("0xddc958ac4ea7eeecfd32c79fafca89c10f03f4ddc5bb68f80423747801d97af3") )	(132278, uint256S("0xfc17e58622832f6e7422bdff64ca783893175b9a23962cba582820577d44b363") )	(202527, uint256S("0x61cfed1ece1c655d3745fcc0178ce3aa2b7140325c8b97d5ed6c92e7bf9b93e4") )
(14169, uint256S("0x3e29e87e2b0a21a12a09a2f18b8a462f30fceabbfd858e9d209fa3396c2a8727") )	(47427, uint256S("0xc33e584887c011fb436b643a7f489ee7edc5df6d7fb0c3357199b7efdd5cd3b9") )	(76966, uint256S("0x413b184282cc2175add5fd9dd642720baefa3fbe8817827e8235129167f80d11") )	(105503, uint256S("0x00290a8c595ff9e5bf73decedc2bb2dc8b3f5f092e011b57b18debc2f9e3df4f") )	(132294, uint256S("0x83bc2e5986872f9c6f27200efee159f5923cfaa53b54d3f3c0a5401fdca0d864") )	(202548, uint256S("0xd86149175ef9c49b147158d4589df4dd686614ec02a0df3f68de90e7c823f8bb") )
(14176, uint256S("0x6d36ba4df5a9144d5f2631f8f24c3531f13c2dbdc49605fc79469885ed36f40e") )	(47486, uint256S("0x0c18c62903e3afc35ce9298f6ee51bec593dcc3f8780cf109b91ab4ece40c9bc") )	(77056, uint256S("0x581ffa38fb72d4d3d73a8308594fe334a6ee8ea971bc99fddf99f5e737d210f2") )	(105564, uint256S("0x8d44e1d5da9fc6c5c253e0a6d30e5ffedc97aa11a787702badd04300c25cf0a6") )	(132331, uint256S("0xcc1eacff3d6c8f9e87abec91d716f7d2a6935e2aebdc1288773e790aa87cd870") )	(202882, uint256S("0x0e226c79de0c21b76d300fbbb7fc410438fffa46f7daccb50f7877bfa708c485") )
(14319, uint256S("0x99f361fba44cbaf8022d14cdfe9e1c52f7a8835b3404b923e245a5b90c0961b4") )	(47509, uint256S("0x13fb338bebdce6ce4ce656af9b46e54bae1c934a7f9b4a10143e992e0bb6f5c0") )	(77101, uint256S("0xe60e1675ae04ab15ddd41f1bd6660734203503a5217c37f4e37a2f740e46e5d0") )	(105567, uint256S("0xc0231b5b1c6cb915cfb9cc299358659c67cfe6d90e675fa2dade7ea17a625702") )	(132344, uint256S("0x1046afe3a7014916b479e8c36bf558dcd33f6bc53b68ea2ae049d0767b4dd720") )	(203011, uint256S("0x3284a11254facaa2b96a07a8d490f9e521f31f7e02653e59ec2b15cab653c7ac") )
(14391, uint256S("0x24d3d63af95b7c527cc4b1011198b328a8c20ac7cbf118278c2fa9c9cbb5e84b") )	(47589, uint256S("0x858a7ed53018ac48f2604b06ea61aad540b6f95794cb3a054f169dcf58e4ef51") )	(77130, uint256S("0x1da703f1b7b4171b5c2ccf845b0e4998a34d0b4cca6a8a772ffa605d1e926d37") )	(105615, uint256S("0x616edea3e0b821509368119f6ac74e5d83e7d104bedcec77b55dce194b27d897") )	(132367, uint256S("0xa33bbc261c42fe7f7638b33edffbfc8edd6750aaa342cb24d8e98f3aa876cd3e") )	(203122, uint256S("0x606ec51890fae1e763804d57adfa248da7f22a4856135a295f68d1afc77a928a") )
(14475, uint256S("0x5b37d455d6663b5e3d51afd8650069002e94802cf28fbbf12cf80c458db80f17") )	(47742, uint256S("0x2805d498c16ca7f9fa75008e6ca3119f943c031d4bd11862b8eb9bed7efa6506") )	(77144, uint256S("0xed99c4decd8dfe903830e46df5661d97b9356348d43cfa7fb5f0276c5724a8e2") )	(105621, uint256S("0x2a7432c1877efaaf869ecdcd873588a1b406d2b39bcb83df3bb0803034947db7") )	(132419, uint256S("0x3a42a41eb0689ab9168a8664b2cd00bcb1eda3fa592bf0904a66f876dbb41f8c") )	(203325, uint256S("0xa7abb880fbf5d1ddde4d3b459b43e00a9f3e6b6830f85d335dcc6a10161b1428") )
(14492, uint256S("0xb37de24913474813a6dc2e89072d2fcdbbf9e2d938e661a79dacacb2b906b3ff") )	(47880, uint256S("0x187e1cb03c4b9102f08930e7b98bb76d15c0f4c736e6636e4224dec135a061b7") )	(77175, uint256S("0x9984f8f053cc19b310ed99a6c2ec27b9fc8c6bcde0d3240d07aa99003171105b") )	(105638, uint256S("0x654877f18d72cfb7d1c091e34fd0334e292778e41ce58dc2727eac38a6b09ab5") )	(132495, uint256S("0x0905ef2e3ddf05c808816cdcaf6f7095961ee5a323d4c5a1d23efbfddd54c59c") )	(203344, uint256S("0xf65d97d28e1f05414fa1ec7a815f843342a4f049ff10e7e5b94d2044ee8a9e01") )
(14548, uint256S("0x847bb07e88d5ef3083e636f79b73f5aa02bfd145d560904a5ecc53205644b684") )	(47945, uint256S("0xea7687c051e64b89cfa1eb95f3b3a8f489efd3205bab69045446ab45783be0d8") )	(77197, uint256S("0xab4f64af08f4c633c647d00a42cc3090e6dfeb7af0d5a76e7e02717d6cdbad7d") )	(105692, uint256S("0xaa456ae2e709f748993e755c7039cefabe7a06e5652faa18989accd1393330c2") )	(132527, uint256S("0xa1e04b6adfabebf672ac7aa99cca4f80d873ca2b293795a310ae6790364a1f33") )	(203358, uint256S("0x620e20eb36471fe04a78e08ddcddd5879f648310cd24a96d4783fafed1d4505f") )
(14713, uint256S("0xbd8f730c23e4e900c4d5593a9efa2d185f5213ef53d6febb5c520493f533c8ad") )	(48002, uint256S("0x82571614a996e8c81051985c9a269edfeb36ef524606cbdb7b9a60f9edaa65dd") )	(77253, uint256S("0x738225119b317f7420641b6be5aac56f260f7111ab958d7b109efa4283e55ca5") )	(105713, uint256S("0x521c6fc3d0965de424a47af8346c64ed69e33411bdbb573b118618d977ff392d") )	(132636, uint256S("0x7157eb46b7452d9abdac475066489b28fbde5fe3b7372e9dde4e614a5e060596") )	(203381, uint256S("0x5737e5c6acac59db3f834ad2c449dad297c65fbf27897e5e332b5ef0d89878cc") )
(14746, uint256S("0xad4398552b571d2211e059840093953f8160983e5eace36f2de20c1bdaffd9ea") )	(48041, uint256S("0x359b835137161e02dd71a2c1a5702043a578023d0f7dd258d1f098526f1517b9") )	(77449, uint256S("0x362ebaccd382172ea50e1b9033d94f18d2d7aacb66c9543b986e910b53427f30") )	(105809, uint256S("0x88582c34e5008ee4ed94c1a7abf12013959b2ad4cf9ec30961c1edac17e1f620") )	(132644, uint256S("0xda43d0294a4752340c64595e614f15822be3aa4a13af6a2dd81ab981b8048e8e") )	(203440, uint256S("0xf784f9590162d0cbad0f34f429196bdb7510a9aaf6a1f85ee2740be5da5fbe00") )
(14752, uint256S("0xc7a85f193c24dc201ce1a5b28bc3ff6b632e54ff1b620eb7e9b1a1e37588504e") )	(48091, uint256S("0xe30b416cef9ed5983006626e3e0e9309d19d2f17830353e3578cce8189155588") )	(77480, uint256S("0x1abc33274b3445f7b41f11c485a538938c22647f3bb7f45780b2c0c437c1890b") )	(105844, uint256S("0xb5d9b30055031c638361c9a397fc62d21864e902631c5244ad2f9a31db73eb9e") )	(132682, uint256S("0x1a51dd8a09e0d4e8cf8bc854ec4850d9dabacd532eb8f7dbd2bd00e6a5089b04") )	(203451, uint256S("0xab9a98a507cfbc059ff1ce00370bbdec301221c9e26f4d4c19c0a087eaae9207") )
(14848, uint256S("0xe99ea9c04529891ae6ec8b1a7d83182775421a29722f62a3a89902463c053973") )	(48164, uint256S("0x0c658789dcea3c1ed8ab4c380b7a29cd645ab6abc18e95cfa92d5872379469a3") )	(77496, uint256S("0xc8467acff46554d1d9745ef381731743accc8853d8afbda7f9b2450814f3d803") )	(105873, uint256S("0x6e34ec180c9edeea3cf15d670a31e1d3a7e0cb90db0a270dbfa9ebc28b2fd2a3") )	(132775, uint256S("0xdbb060cd1199444f882c645c55a56052b4fc93b18855978e2a03580c2628891a") )	(203467, uint256S("0x55bf7574051967b75f548466ec6ad355d3153de2fdaaaec86b60bf532c2f09f9") )
(14864, uint256S("0x61ec3820c62d4fe4db0b56a3b23740bab9864fe37518ec467c20020c4892c486") )	(48200, uint256S("0x19842f68314d55dd7514530b8a8e4e5662d729b6f7c4b4775ccd90726c311c51") )	(77499, uint256S("0xeb764b128394ecf3277e6bd747fedf718c2d3fdda144f32d935c6ab2b6c7df3d") )	(105948, uint256S("0x54ffa2460f36f4bfe53c830377363faf751cf696c2047d95933128bc1869352a") )	(132800, uint256S("0xe93a1ed23d5861750f2c874b2c9175f2299e1ebc8d9554427e272b652d938a19") )	(203492, uint256S("0x51d0473b3ab62dd7daa66a3a973a702f85decce286b675b09d8f6a67c0785d64") )
(14959, uint256S("0x21e531e5c68138c4c0dd813db416d3b85c982bfb24195be6f803e8b001af9782") )	(48242, uint256S("0xce0887adc44f3b86dac3ca526159330b2c0ff4eb1ce39c1d17eb2eabed7be536") )	(77708, uint256S("0x10a52fcc5e8821968bc84462853a7e7b3ba32c4c1484e77b66dfcba20e4854bf") )	(106006, uint256S("0xb594750fc785736256a0b97c4eaba96d68be3dcb3ea1933e481fc0dae1f2fe78") )	(132814, uint256S("0xa8a9d78758daddef92d4e3a869bb7fcc8d5df2d2b30bbeafa49f83f488d3d389") )	(203631, uint256S("0x639e435e9992820952b03c05886f79ea2325249e7325906536147e6227d2d301") )
(14965, uint256S("0x4affda0c97b5fc91581ffb24b65eb4e781adf7561a7316786a8661a4a8828e99") )	(48257, uint256S("0x612f9bdba9d2d9ddb2cccd5896df70080b8fadd52b1f3ceeabcfed6ce3b9eb0f") )	(77730, uint256S("0x132fd6754c8365bf0b0ae24d6137749d57cebfec8dd41708fa0685954f20109f") )	(106024, uint256S("0xf40ec9ed8e38e8a7412083fad7178ae015e30e5cf4fe367c7b965c310dd3c86d") )	(132819, uint256S("0xf7658ce50500a30a10f8d4da1a7c3080554047c1b6dbab316d20a20e73990baf") )	(203641, uint256S("0x8b44dc881bc1b1d682e9b7fe9b3974aa432d8c692c005588301b28b1a8b57aeb") )
(14994, uint256S("0xc28cdd68cde4b887d9ab366cb28ef6df3daa98d4fbc9b64bc486d08e7d3aa20c") )	(48268, uint256S("0x82f08a3a04e619f8a6ed6c24f13ff00d55ff81881962f30c95347e45f6b8cec1") )	(77843, uint256S("0x5d658794eccf26967d80d6502009de0971e56a42dda10af9faa5344ca10a9275") )	(106080, uint256S("0x029b4c433a2efb21624981f9ff5f70ca615f60eff62df11aeb448e729a1bf5e3") )	(132885, uint256S("0xff77196b95e399e3b3114aa0ff0929b83640ad1b878bb6ab59829caceaf675c0") )	(203654, uint256S("0xd010ffe3feca9cacc37231b2c6d23979bce2425863a3223bd629b63084ebc012") )
(15005, uint256S("0x6db7e7b0aebefc48c6ac5fec98d59ec8f7a2ecaf8c28ce39ba9d2c70c764f3ff") )	(48280, uint256S("0x0288084fe5e764f12f55f0f95b980437d602c11ec9df4d4f9d6bb3bbf57f949e") )	(77887, uint256S("0xa45cd7b9570ea7d12dab1e311eda3cbf4332a4b3b0b0ae53377a8df05a368ce5") )	(106105, uint256S("0x5e915ab2cdf22685719476e65d16299cdce7a9f2a962f0773f16b314286b3aa4") )	(132898, uint256S("0x596bd35e1f582877be97b2be1d0b8fa4763b5c38cbd8e65bd4741ad14e19330a") )	(203842, uint256S("0xbd6945650e1426510382ff9910343b28ded94592f2adad8be3f9720ee398dc84") )
(15106, uint256S("0xe2b2f9db1adbe876b105c69a490ad59cf6650c36413ed47c1ed33796940ebd44") )	(48287, uint256S("0xb1b5c6713c4e6d07bc574642448f4e9c38984f59f20405ec4f4da8109ea6f31e") )	(77898, uint256S("0x1af801a1eaf00a111c8a19ddcb563a060f5cc61b00ce884af1d190ad48af3249") )	(106158, uint256S("0x14398f60ddf495a2dc124a23b4cc016ccea9390ad48edb0928a10a82cbd90a18") )	(132911, uint256S("0xc6660f5709f7ebaa9f0f2c1751da1751a957f165bfebbd4b7adb2b3330838d8a") )	(204175, uint256S("0x4485d4289511206dbc0f827c602f9918e718d21fc4b83d5f97a5fa24e8506b3d") )
(15204, uint256S("0xb9985908d53b72d81b14a4da079cf0649e5467ac563b56066a667009a8b2a52a") )	(48296, uint256S("0x4b2a17b120d0cf7456412b297d1cd04fb7787f031cf61375c4f12b0f104adac8") )	(77949, uint256S("0x3a4cad36da0b57498aeefc379c275c927e7e1b33a7cf80f2eedaec0f736262c3") )	(106227, uint256S("0x599fc985f98be344128e770a111bdecc40793e18917dbe8c063b5dc47e178a40") )	(132925, uint256S("0x4280febdb2fe2f71fdfbd14f2b13d408475613f01a7f3c38bccdbf9ba3c6091e") )	(204235, uint256S("0x73a0ce2ba1c981bd1d385e093d21ad9599885929fdd1a108d47316c47fcdd142") )
(15259, uint256S("0x4f00382233cb80d6287f1b3ddb5ea13949e2aa0a31f94f4fb80910167fc23017") )	(48338, uint256S("0xa68a2d81f70d3becf2e87661d752e84d9af35d5828dbce0558bd7bb8cf8d0be3") )	(78179, uint256S("0xce1ecf91251682c3e61ecfc9832d9d6819ebc460b42b649f14be8c94752915c6") )	(106313, uint256S("0x525f94f4c35002471ee550d07d5af773584160f91c90e5b295b0419a3a0f0dab") )	(132989, uint256S("0x35364e41028adf3e80c36595ee0ed2f7e6e2853c41cdf28d7939ce324ca9f88d") )	(204567, uint256S("0x103396cc3bda19061608c4ac8880a015a56c7e94ec5d5ceb1a1a13d4eb2c53e4") )
(15295, uint256S("0xcf83d349573bfff7e06f37b6e2b77c47b612cc35285edcc3a6c4b0043a564339") )	(48413, uint256S("0xf01dfa36b39ce8412acee4cdebbdab2845ae633747f5335c73ae88224184194e") )	(78231, uint256S("0x36b6d7ae40ff8a9ef7880b92c44642e1ffd920689b176dec96ad16cfa692f37f") )	(106336, uint256S("0x028280ee6e80f50541529db6c0ae785fd9639fd201d47a05a35102e3677fee55") )	(133135, uint256S("0xd0f8bb043127c58390f59bfca323924cfba311361bffb82553be62d76586632a") )	(204625, uint256S("0xc3a3691f8e0fbfc100620a3c9339edf5cd8bef9b74c1482a45b8c6314b7b92de") )
(15394, uint256S("0xf3e204f2f830b9a38f25ea76cb61ff515f25d05c6db4bbaa9eed709220009694") )	(48446, uint256S("0x5fb2744d5e80fc1c82978ae10080b8bcd8fc581453fe741b524bfb213ae2f816") )	(78303, uint256S("0x71182ec2675ab16fb41b31078b4801c7b9b864fbf1928049028f9d7fdb7368a9") )	(106355, uint256S("0xe40c67257c86dc7a77be4e3b4de8d57e58eec6172d1deafdc4965fcecd447391") )	(133191, uint256S("0x246fdb1ef165f5327931ca678b80c25303bce036f31d697f64a48474aa9e117d") )	(204664, uint256S("0x364d8f7b092afed4834568b4b5f4b7f526b6b0552ca64d617794022e69d09703") )
(15436, uint256S("0xa4f9dd7f6795a511fe3651825d532d15aabedbe9e97ed99f82e03850b9b9efbd") )	(48466, uint256S("0xc5694ea5b323f6ee9f4ed0dfc2fcea6d7f5b5b69bf826a3d7039ce5593b17b43") )	(78350, uint256S("0xda0e2e3e3ec6c788450c001d8af93da1215dd15c19893547ce5aed517292f174") )	(106428, uint256S("0x09b50a8b73a8786561d84de7abc5bf90faf9153d38b73dbf9a79510d15534ec2") )	(133237, uint256S("0x81823275e636fcfd7722d0f24fe4ddc220c1f9242d46d6bde8b04f343bbd3539") )	(204999, uint256S("0x07b7c7d2f50ca15f72582aa3776a3b3c4b72d631e7bdef5f8311966fbfbae3ad") )
(15491, uint256S("0x35e81617992b912ce77842c7f13b756a5a477e13dbe7a41c5465a18b42843cd1") )	(48542, uint256S("0x940078639dce8029a2ff7a0ac442a57e1013004a3fec80fe384e5cedb8a007e4") )	(78354, uint256S("0x4751214f6a014e57299b1aeab844a52b77871b99df086d6ff5db0e067afd6645") )	(106447, uint256S("0x158200e9c4757e012d1ce8d0e3aa6c2b2e71092bd3cbc3df6950afbc465ddae8") )	(133300, uint256S("0xa10d86d7edaa83ffdb7c05f2e8e95fb722797c6e67a7decff5e32eecc95b3d43") )	(205006, uint256S("0x4c4c8c1313d24931e327d0af1383d240aab9b0f7debdc1f7cbcb0f5ea65b04d9") )
(15502, uint256S("0x32e2c8052f8cb258a657ab4f74919f39cead9f62577e24ce043238aac502cd8d") )	(48555, uint256S("0xdece818e6db7b83a680bc53fe9a7cc53a8fffe988f2944d76afc9a9b8bab244e") )	(78363, uint256S("0x9efbd87e412e1e28218731a53a6950ce3d746351e1736e93add48c26d38f2e70") )	(106519, uint256S("0x53c26827b4290d9bc3ef1dac561915cfe58b338c9f3fb12762302bf487f425d3") )	(133318, uint256S("0xaeb1fda7e9ee37395d5cb8943c490b14c940b48a4872d8cbced41cb1a3b745ab") )	(205364, uint256S("0x91ce4cbbcb6dfccab9076a9de0d7bb01d44f0442eb5dcbb7f1df4cecb265ec8a") )
(15575, uint256S("0x614ea1207caaffbddcbf04da95d401f22b185d28d8293f4db668db9567f494bb") )	(48582, uint256S("0xaa95af522753d1341d3bf8ff103cb3a255c1f819b3cdf54a6208a685da7ac61d") )	(78431, uint256S("0x193d5a4b15afe9e2cbd468ea58b86d811af021be86626f0f83afc5461c293161") )	(106539, uint256S("0xd8c7609df5557442dd1f6de199181a8ad82b2b031c0098f56c5d5b222f001956") )	(133320, uint256S("0x8b337714cce245c05e60dea79f073989dd802d33db8a5f9ed165025643d646c7") )	(205605, uint256S("0x4d8a52111d9704943e4525ebb373e478234a266508c6be0fe3eb2586956b7225") )
(15691, uint256S("0x09b8a79fdec3aeb73bb826946f46f09b84a33685cff7e772c1b80d85afae280d") )	(48585, uint256S("0x77b07c48827acbd0777224d2996debdbc0c80ef70b4061646c371c37e35c4877") )	(78443, uint256S("0x1ffaea35861725e5ec17600bb83bb94ae215cb2ddf678f3ffa168708f35c8b16") )	(106606, uint256S("0xd41e5232fe3bb9aad87f5cad7a3a2dd9f55866969f57821abd0b642dba443f65") )	(133324, uint256S("0x9043da5b9989f44c411d1097568170dedb0a28cd2956e0dbfbc784e5a82a8468") )	(205634, uint256S("0x95dd58ba3a4c361a76a7a4fe647c7807132203a832f445d3ab7e3848204f0c6f") )
(15731, uint256S("0x5ab51288ab535fce6fe45ca09eee2de4134514311ad24e27bfbfd76bc66146e6") )	(48592, uint256S("0x1e0c02cd11d9f47cad23bef10a7eae4ddb6a0765f44a5ef6745233e3a70504c5") )	(78490, uint256S("0xe2e36d8f31e9796ffbedb9fb932f29e5aa598e1feaf8f46d8dc4f685dc8e4a65") )	(106680, uint256S("0x9688f75622a3a59c48f050529439f56e4fa74ed36ff077fbd939cb71c5831e2b") )	(133404, uint256S("0xb3abcd0e002652caf1d2baeadb0baae652010c04847584e8bcb532f2d8759f1e") )	(205827, uint256S("0xb7e15ad2fd2e2d1acf82891af3d3533724bcf84870c1bf9a09462880c67cd2b1") )
(15849, uint256S("0x0d1d07a7944410cefce96cf56bda8671fd8671d8f3396f3485cc0a6c61c4d90b") )	(48765, uint256S("0xf0df742ad288efa167d7a41574334ee1d56385da5ec6889444d36093d84c6078") )	(78741, uint256S("0x334e5a4ffefa8eaf5a7d5a2974ab28ebe7d5503eaf57eb66d378f61ad0a4d316") )	(106712, uint256S("0x89e5c953720ba8fda37ae97a503a2017aa4748ecf769ce089f6e7cb8086d6924") )	(133452, uint256S("0xa6f225c33422d1c888ba9b2d7eb7efc7f80ec3306d79af3a0f3fecf3726bb727") )	(205962, uint256S("0xf931ccb8a103a2a708c41cb242abb24511b6a06a7d0f918bcac85839f195a23a") )
(15879, uint256S("0x7db2d71bcb84faa2446aa0892b8fe1c1368819a5a33ad5982b9432a42b5ae0d3") )	(48781, uint256S("0x8a0e8eef714b53d463ea537978e44e76dca4c9ae743b1e8a0b7b5e5a00dbdbc7") )	(78777, uint256S("0xbf5a5fd180ac14faf82f84c76e412645ce41d166af6d2f348d08d87716eb9c5f") )	(106718, uint256S("0x4b1ace842b4f7a82720155eb81f8dbe9cdcf9b636d978d2837750d212b0fb266") )	(133476, uint256S("0x1736708a25951267de04805e8249bb5399be16cd6ae97d2fae2a8b0b7c4c74f6") )	(206109, uint256S("0x6dbee212987a0cd610b8f4a4c3eb35cfe852d97d5d3a6abc2cd99f239027c673") )
(15903, uint256S("0x321e9fb82acb53d4fea85dadfc1fd6eefea895b6a95200ba60d6666dd2e776d7") )	(48901, uint256S("0xa7ccfea4e026eb9804bf59e8e9196fc6439e1f3042aae33ab17624f5a6611017") )	(78781, uint256S("0x1e12b18144d36b934367e4ccfb4bdc78513c872193852589b7c4cc028659ba85") )	(106777, uint256S("0x308c157863a780103d739e69d77e5c9cf9245b03fe270e920119e3a94a44e63b") )	(133486, uint256S("0x0d2339238200edfad4fa0e073b4b093f5205d4178dbe7679ed1fa5e765b826a8") )	(206130, uint256S("0xabe41189aa152d9e647bcf315c923c94b45ea289ea633971e73d87db9896e3f0") )
(15956, uint256S("0x55ffaa82b5388f593407726fee0fac8e5de846b4efd1cc84afc929b4095177ec") )	(48968, uint256S("0x1cb4d55c7d31ae53fdb9c5b437cea3df37b3deab4dd6987c9cae3d3e7a9ec212") )	(78839, uint256S("0xc613ea1c71c90bb79bac3af00084e9c14557f803f24d51fa2daa6c048dff1690") )	(106848, uint256S("0x2ae269c86d72729d6f2a060fa44f2241950f0c76ba300b88cf8871bd783b9d4f") )	(133489, uint256S("0x723bbdd7f1c3d399d72bfc79c97d4f1c6c1995edf1e1a9442717af0e1725de80") )	(206205, uint256S("0x1c6fa743dfe91bf87c6069c474f6ddb596b7c3716b86da82696cf0b9985d607c") )
(15992, uint256S("0xe0d01e17f98cad693f94930c0fb34dc6ad58e7601881018de48c6ff5b51db95a") )	(49003, uint256S("0x0afad05773b69a5d611edc9feb0c1290466fbb4db120e72e9a7f5ee509207485") )	(78917, uint256S("0x5f8e89b59a153f3ea2026ad381e9476164eddbe10bd9e2b356bb88e1b09607f4") )	(106879, uint256S("0xc1340575474684cb0ec426e42649c197aaebee52a38bb20b7e56d6e9a2628550") )	(133520, uint256S("0x199394f7834e84a7733de16c4856fc27b8b1f92b7efe49844305ed8238a5a114") )	(206232, uint256S("0x6afcde222114d70eb1500fc7425a1d48bb80e4688ebcca71430fb97e7f86af8e") )
(16125, uint256S("0x7a1898b0cc097065d73088f796e1e55d3ce41f28caf235712809a3b605fe5a52") )	(49051, uint256S("0x7c8e6e0a68c21bce50a2561732cf21f3fcf3414d34700fa5f9034dc7ec7857d4") )	(78923, uint256S("0xb684196fee1a76778ed95179dc605a6f38783e9ad73b0bfa6a72b470733f2b4a") )	(106904, uint256S("0x61a724f503ccc1322757fe9d70fa53b067ee194608ac9820faf0d6a9f603cc75") )	(133587, uint256S("0x439743448c9dece8f5d06bb1c51d5d9f116582bae91b7db73c23eee76ebec955") )	(206243, uint256S("0x9702d558db53a6a5c692445ed6000a20908ad6a58eac3e6cf0ed5572654938d2") )
(16155, uint256S("0x77c6f66f7a1749191464b506b62886adbb9a48076731d4eb6f31e038ffbf90af") )	(49119, uint256S("0x062f89dd697b34c3b6ae9b4d9901dda32e7507568322e10d02fe68decc03b929") )	(78981, uint256S("0x0de22590bb80d79acf0eccd2fc20811500169f4763b2d2d70d5ca78906f69569") )	(107015, uint256S("0xac620aed4d42b5fc4502665fc414d48cb4b702187f09162aa964f39bb7d3d0d4") )	(133667, uint256S("0xa4fe8c7b8483b9f4bd8c7a031d8b08acdcd41196610ee95a0dfb60f6d55b8b79") )	(206364, uint256S("0xf1dd039444e8b9e91593033fedba356a09718097848bc2f0bafba5f9f8b7d8da") )
(16184, uint256S("0xadfd37228e21122d6108db59106806ace6c4eec46a7a3fa2d19ad0c44e489e39") )	(49173, uint256S("0xb58761bf3f7413063c215458a6323ae14a372d17a92a03750fcc42d2ae1d714a") )	(79156, uint256S("0x0c2b8fd3ee4fbb07d5e066052bc672047d742b0328cda40dd400d4eca16c8b1a") )	(107030, uint256S("0xd10e203d67e7fd41694a68e2b28c336c2db16e44f1be66fe1bda047e83b98adf") )	(133685, uint256S("0x82a1379c0b3e86c45d0e3313fe4fe72e5b2e3c23d646db71a08e3990459215f2") )	(206370, uint256S("0xfb713a1e2379f445987b615cf9bcd93f19f5fb7521d821d1eb3cfa02a820dfb4") )
(16311, uint256S("0x6975bb99e55d4f334f31821d792c5112c13ce8339a6ba770383344556a7fe5f6") )	(49227, uint256S("0xf4dcf0d13f3831c69cfb08a35c9f3eb47be0004243000293c27fc2c4b521d1da") )	(79190, uint256S("0xa55700192f2bbf742c2d1b5aef746debc8a3c105b2f0c80f883bc256b11414d9") )	(107035, uint256S("0xd305b5aade3705eadafde55ed426a9a9a577abfc66e360c139122ee085ae6398") )	(133704, uint256S("0x1b325204d8835ca633786b7f27205d5d6d1262ba59909333ce7a9a30282afe16") )	(206541, uint256S("0x575cd50f181d98cde2731225c28ab1c5492782652645d12ea62bb444feb997cc") )
(16391, uint256S("0xc2a8d82e449d69c8511237e3e598b42b40c67b26a9565d96c933f2d1d8a8fc40") )	(49230, uint256S("0x6fbe5446c58ab6c05aed078402f0f9545b2dc678b3e14ed63085f7b65ff0d21d") )	(79260, uint256S("0xd0191ff37de262ecdb574eaedfb84cad678c9a7a911b5eb50164908a7417e7b8") )	(107049, uint256S("0x29f14003209732fa6b9fe762845696d92227872bb7cf90080705bff900ff93b6") )	(133723, uint256S("0x7b8116032ebfc87ba99567c0c78f31186e06c8a0601b03bff995e6855b09d7c3") )	(206622, uint256S("0x206baf0febfe906448a3e71dd5e46f0583bd2b9643f493c01aff849c5614d08f") )
(16399, uint256S("0xd5915c30ca935aa6387c2b67a8dd035fb0460531e597634f2c0cda210653179d") )	(49244, uint256S("0x9e9ab699f4624d6022ac812a6de63ba2aec5a5dd3427b0c3df6c27f4ffdc5b75") )	(79272, uint256S("0x73badcd6dc22f00e26147c99c9a0e94732889328c2e5f53389cff60391f030f2") )	(107066, uint256S("0xb9464c24868bc300a899bb63e250d85937bb16ce1aab7df9924b85085d5cde0b") )	(133755, uint256S("0xf47e1f095a4f68dcd0b59414299eab1ea7afb8f0f2d65d6cc28540f169b6921d") )	(206792, uint256S("0xaf1814ab091e0ed6c9c04119f75b8724fa6a32de057cb6bebd42454f9b483ee5") )
(16443, uint256S("0x25a2c5effa5610f93e9bc6c270efd0658f6f99e45b1adb12224c24fff3214916") )	(49260, uint256S("0x69c5d0d9f583eb9c3ea4998e58c93a449a16014c0783024d862b0c0295a097e6") )	(79275, uint256S("0x074efb7e445dd44377fd1486af2c397271b6da9b11b3f4c793bcc30429d91fe1") )	(107090, uint256S("0x1b2a2f16e49d3c526e87feb6db422b97b4899505bbe94562f8873aecc953e1e3") )	(133766, uint256S("0x6722e06c4b5e05422b43b9b09860d1c32a416681b8ad6f77d4a174a64d900988") )	(207088, uint256S("0x55cebbbe74639d827b14c15671c8f77fc93e39fa97e23760a16578e5550ede40") )
(16523, uint256S("0x9e3b611a2addd38caeb5ea3998ddeca7590b3a4bd465781aa81a6740c3d2464b") )	(49331, uint256S("0x727b1353bae86e9dee13dee877f2b6e9827fb3b2c5928e5798b4ac59d0b5c434") )	(79316, uint256S("0x9612692ecf8ecc7d6d556bde5ac1a0ce7ea56c52ea78e94bdc65240b6b634170") )	(107109, uint256S("0xb76b3ab60246016459021462b7023560eb0834b0d670a21c4ecfc37563108efa") )	(133809, uint256S("0x0b6838df722a24165a9cfc53b8c095926b04ddfe294b78f50358092900006114") )	(207230, uint256S("0x18886215b8c2e23af0afd36b007039c7e7e201f8adcda2c2199c9e36924eed98") )
(16530, uint256S("0xa98735f5cd9c70b5c21325e19d036840f43191c5819eeea828be6362b8fc6a6b") )	(49420, uint256S("0xc06a5ba7eb08d0a78ea2d9650658771a6fc29294724f6cf3a944ff4bf4782542") )	(79319, uint256S("0x98930ea3340c846d3ecf6aeaa38c38b98646e46344cccdf5a73170fc68474170") )	(107233, uint256S("0x0ab5434675fa5eacfc53e912cb8e19eb3151b4f6e708efc6493ff47aee5122a2") )	(133861, uint256S("0xc413e1efc3b1a44b29a5d8c3f180a543cbadb65d8c37921dcd62a62bed6073aa") )	(207427, uint256S("0x54d5e8911aa37ee0490859ea6010abed9c125361ce96b14c73f2359f15533c00") )
(16539, uint256S("0x04cc902b2df7391be561d1d22d1c73c26fa50d26b6cf08223bc5c174c694ae00") )	(49460, uint256S("0xb378e6d837cc2806a2fb375a1690ce7b2a8e45ac7a60ef6ed4ea0de16815e861") )	(79346, uint256S("0x89d796a5ee31e723f56f2a0971a3a498b1aee29222cb642053ac2d328236e8d7") )	(107282, uint256S("0xbf9fcdf76fa2a4271ef31627f19dcd66b96ba4e55d2dff201bd3752e9c869836") )	(133916, uint256S("0x5d64ba92edcc3493d9ba09f2129528b73201c0a96cc7644e12524281a22976e4") )	(207441, uint256S("0xac84e499f53f6d71cbf961ffc18cfa471bde33f5e1fb88b9a2541a040e21bf6b") )
(16560, uint256S("0xa52de6f08b8488a228a08392bbd3024d873704a66eec316200ebf23cba50a33f") )	(49500, uint256S("0x52bf9c0598ff07700f091cc66f037d8c20d42e1b1cb1348b86aafe8cc7158b3c") )	(79349, uint256S("0x8613378ccef0a169f15a38f16eaf25e2484e3bd827b8c94c43f77827af63b7b9") )	(107300, uint256S("0x63d69e7158cf989ad7010563a107a2bd98d41a19de484db3ead9e1e0032813ca") )	(133940, uint256S("0x02ea0361650bef89c8349c2f75f9f72496025b8dfc6a48b3e937c3087d6e4062") )	(207752, uint256S("0x0f9ca2c4f4de05897e0bf711305e8958243b2af59921092d120eb82ca5e30eae") )
(16599, uint256S("0x7cfdbd92ffa42ad401c53c79fd0ac6b0b63657c42977a9f886494465e11e3c10") )	(49511, uint256S("0x384d60eb8d4e21b0e02131d993f3c66c68e9f964918c9c677af4c8002d4153c3") )	(79413, uint256S("0x416dbe53d21569438cffa715cce1422b972683d2e0e3a78e2b6fc7a465e973a6") )	(107322, uint256S("0xd58f0b8d14d7bbc1ff47d416b58323007a629469878c92190de77c1ed13e2a08") )	(133950, uint256S("0xf6032e3a150d5bdb64fb9e2142334c824f56010cfcff3acabe4009b535abd572") )	(207764, uint256S("0x5ebaa561f614e00b9bfec3163d2250739bcdf8879a701dc9a759cee03c7c7722") )
(16736, uint256S("0xb9e398c09b296b075f69c585f33b1d5a30c12117d0bd76aae9ffa306edc59549") )	(49566, uint256S("0x6770e139f1de8167be556f79cafb8ffee9329d8ff25301a5541515af47b2fa78") )	(79430, uint256S("0xe7de9070c7073cc30218312a978e7e81a7de3a0315d6d1eea1508f7e093b2732") )	(107327, uint256S("0x0bcec3dda3b59d3960497ac4a3eff86180ba4bfa35c0a719d3c3437cb1442252") )	(134076, uint256S("0x76b05a8b7a75b339cdc4088178d337145a2baea7e44875ef278c0eb37764154e") )	(207956, uint256S("0x226a65a5c5c45b499c38fae51bd077dfadc80bcf36a63f0b8a797cc6ac66aa08") )
(16740, uint256S("0x27b391f15380e1053cbb97541e8709b6688af3c93b3a7909e39932101f199a1f") )	(49589, uint256S("0x001d5a2baaa3c9c90f5a3526c2329aa96caa54399b5e029b61282d5e3d184fef") )	(79455, uint256S("0x3ee86b37828516af1b67c940ce1366a0772365ebdbd923e48b256f1ecbffe0ba") )	(107429, uint256S("0x5526cbb1c9873e6b90d0e838284b6b8efda7f947d7cef75db6476a66d1941f2e") )	(134192, uint256S("0xd9ce65b359b4f173a260d130f5fa101a187e2daa40d6a6a30657398b8a4af29d") )	(207966, uint256S("0xef61ffa9cd3603af0c7c4fd053b04f3b8a1b30e31ff2d2adb86219121e919d11") )
(16838, uint256S("0xb3b50d9ebec54cebca1f01203523d4512e5fa48d8bf36dbc29efc5579e39c3dc") )	(49647, uint256S("0x88abab6c8200b7f7325149f29b7bd73cbe21ed8e944fd8f3dea897ea92525982") )	(79513, uint256S("0x6825769c421a8f681587ed416cf43c7894275ca884c2222efb607b4155c26d63") )	(107431, uint256S("0xf124767ac76d6ec9cca68a0b3e21816a4f5a81054eaa67fe65059ff932059e0a") )	(134210, uint256S("0x42e6b0beff7188e85d1e45a7c9dd169c9f6aeab50cc34b92ae8735ff63987709") )	(207986, uint256S("0x10fd714ccf06e3c08bbca6bc925fdbbff0563a31abcbd31f1dec78c5fdc128d8") )
(16915, uint256S("0x9b8c1e4b2f057106f6c75d0cd0d05ac85fbd1bd3c50e4e1dbeb29031583fe54a") )	(49671, uint256S("0x74c9dc4101fdd6263aa46bc8e7800bb249c0e99f69df2b05d13c347769109720") )	(79514, uint256S("0x2efdf566274b473a6c06dc84ca46e6b4dc4fffa9a4ae8a36f8241ffdb1340e6e") )	(107439, uint256S("0x53b25ac7ae831fb012f6b64f776ed2e877039c95378e2c4b6f590e597c813925") )	(134242, uint256S("0x72282ba88993044cac6fe3473cf6baea65bf7278f45fee9561a8e232b6458f64") )	(208056, uint256S("0x67729a364c9ed75adb5c90da67586d16f5f69692c7daefbbe8e78ba07f64676b") )
(17074, uint256S("0x5853ae4c85fdee1fd30936ed25f62fbdee5dddaa57c0124ee229093ab39019b4") )	(49766, uint256S("0xc312ab71b822602d5dfef86e62823b339fda75e1a11a865190f7ac6ed1e2e0fa") )	(79545, uint256S("0x69f0d9bc09a1456926c639c877d1dc9b3bcd3fca96ee98647753723dd1526b59") )	(107477, uint256S("0xf408c4c40c7480e146a7d16b35f5cf1275c690e5d9311b74e9a60f0821333a0a") )	(134418, uint256S("0xa34b22a4c9463c358d45baa058faec3aed5ec5b6d3d95fab9f6f82eca07b70a8") )	(208264, uint256S("0x0587c2f42ac1db31e08b91fcc87021e9c059444c8045b0fbe24829dfe5aab29b") )
(17163, uint256S("0x64b7711351797d6ef33596e4ce394e3bd328db7c388b21ed74b5e514988eeb2a") )	(49797, uint256S("0x6c538d5303889149dc16ba74119246705dffb5f31731496e4477bad9fe156ccd") )	(79602, uint256S("0x4fe9a532dd1718d6bfba2c4f0706e8d355e8cc589ae9dd092e8b61a69c8a71be") )	(107564, uint256S("0x24a71972abb5a508d38a9cd4ff9f88800b6594f5a7a8185a33b129ea3720bcae") )	(134473, uint256S("0xf16a229cf7deb4c31c6914e6cd1e0edfdc366af8237f2e01094aa38f51bdd4d0") )	(208461, uint256S("0x85afbf8d1181c635d792132db0722751aa4c94f15283e5fe40e57dd3fb707744") )
(17195, uint256S("0xe215fde7c7fff43a0a2268f8fe3566b67fdb44218668448db1542e464d1a09e3") )	(49846, uint256S("0x69b7ef6bc4cb3252332d1f44e5894f34141d15a23633795f2fd757af8ac8913f") )	(79609, uint256S("0xf9d3494c3cb032d4a5ad2c44773cdfeca856cfa906fac440adc8cf6b0ffefb0f") )	(107659, uint256S("0x8306cc1867b17341ec3d2ca6e083206c476511aa388825453c1f50d4e683e927") )	(134576, uint256S("0x5e3355e1f134cae5c9fc61a4a9587b7172f90a77e503f768691539c9a16b66dc") )	(208815, uint256S("0x0996e5b6758b711e8fb948d48af290c38488bb0f5301425320402fdab5a74c76") )
(17260, uint256S("0x7bb2f7e43ea4ec1dcdc44202920dd597e28dba9b3b9c94aac04b084dbfd7fd33") )	(49867, uint256S("0x8a7c3e0b64280d42e5a0e80f49a4ac84af10718a3b6ae2d7976d83fd8d8fe9b7") )	(79613, uint256S("0x7a4564a01275c530091e56948e901a8c4ba12f5f68fdf73e98ccbfea4a293906") )	(107660, uint256S("0x422d433cadef55bdc2af159a7f859a6a0348dc8a5e59e826a0b6802d845bfa51") )	(134578, uint256S("0x28ebca6a415439feb8794b6c563d1d633aa4ed6e10f54101dd13848e59e32ee3") )	(208865, uint256S("0x246a97f7c24dae5a7b7baf6457a43caf3936509831a714fa0c3d38ba09332762") )
(17271, uint256S("0xd29c216a10cb935dc81fc7789e939257146dc5b739a666edd9155b5ae6c5966a") )	(49971, uint256S("0xefd1bc1f762e614e5341923e9b52411f71e2ba59351fa760bbcfecb90005cf94") )	(79624, uint256S("0x3f289537c9025f67bb92ef1fe073c155ad19cb9b5c016af0423202b8ea7b1d4c") )	(107675, uint256S("0xd2a3dbf060f12a4a93210c37b7950b5a121a0824c1e3a483f159b6e48f47d381") )	(134612, uint256S("0xeed7fb32cb45f0ebadeffe5df5a7c47715548e17034be67db1919994cbfc3deb") )	(208894, uint256S("0xbc66676e43d90945b8150f12739f1073b10cb923188f0b172edaaca4ec4b0288") )
(17350, uint256S("0x263805a5cff6020a1f00d7b15b8c5980d4af73d8e6c21a00e575cd31cbf8748f") )	(50075, uint256S("0x5c938926c5185398d89faad69e769f68daa5c529e539d2ff2440626ac896866b") )	(79636, uint256S("0x485440dd6dc4459c0f0c1528d92dfca8e5bdcf159c0a030bcc9fb0fcb2bc1031") )	(107700, uint256S("0x2e5b06107f7cb4427a1560586640479a06f50ecaeed294badbe1b7d3ed47f0e5") )	(134753, uint256S("0xa89847a891512380b84cfb80f7d20c754caa22804abbf81b65c212ea4bdffd8c") )	(208978, uint256S("0x10a060073ca8f69dc0891e4551b2e841c791e37dcdc18579ef5ec0507def8c55") )
(17362, uint256S("0x5ed93b5fb829fb92cd3cafc4d5bfe5b9a1dfc64d3f4a26a507cffdae084399cf") )	(50121, uint256S("0x1b427d90981d8ed573f42c3b802a9a2b650b7fd92e6d502799f55680074d7709") )	(79665, uint256S("0x6ee0155f78777e91236f1fd02a1a1d0ec8989c2f1032ca6a680b83c1ca5b85c5") )	(107723, uint256S("0x1729ad497c2503998290bb3256e06ae2c49a95a6b29e53a78bbc5e5f9260004f") )	(134770, uint256S("0xac292fccbdf46f54950a13a85f7c699856d2ceed9880e7f9e55e50daefe2e8eb") )	(209073, uint256S("0x195e1d545eddbe454006a7f4e2990f7061c34b01902bd0ba631f450544222766") )
(17375, uint256S("0x80520696805bb185b59d7451ca05814aed4fb79949fc42e89c0155f0e9606227") )	(50146, uint256S("0xde78beba9e13911046eeb555552015dc3f2f30c19bbd5c7317ff84e7d2058c28") )	(79751, uint256S("0x90d71ab84e4101046a7910718ddc127fca495a4f25e386b62b3bf5dd6401ff8d") )	(107744, uint256S("0x496f9f83db74068b63eddb2138f8e72983d650deea286acda40f1a11f312db58") )	(134876, uint256S("0x624272480f7928b62758b8770fbdd1122de1c640da9fab070e8916a0da48e7fe") )	(209219, uint256S("0x81a23330906bc2d91d8b317faa3ad8e9332de10f58e7f7316f8c080a0e1e1059") )
(17383, uint256S("0x4f6c4562b712161de071488d471b339d48c0d0c999a6afec66f5d92c36ce96fa") )	(50294, uint256S("0xec16aa1c853bc04a5ca2687bb963fd6bd39ca82c0f37c20359fa45929dbda1e3") )	(79758, uint256S("0xecc5914d0ee6a2b105f9bad41a3fba04c1bcec76af1dae29c236627d25dc6538") )	(107778, uint256S("0x639e36bafc12de40996ba93d703f42e8f26c5db3b087e65c02c0ce936ec0124d") )	(134935, uint256S("0x00897bb390dca2cb94c88dc6fb3853e31335ad66318aff6277fbeb71ae8ae042") )	(209230, uint256S("0xf412e6efa3a1e77254cb14e5cc1b7462db705846d90c1452fe421d7c997dbbc7") )
(17419, uint256S("0xa1ca6ac02ef0ad49aec0da607b18364022ba0d0454d6605724226d2c23fc0dd5") )	(50341, uint256S("0x01f505e8a15c517a638bc6cccee696d690551ffe5d2c3bb0cc8667638174bc71") )	(79778, uint256S("0x0b904564927dff80a5825d9faf3e3e9b26f0d2499742a06b3d436efc15d72781") )	(107797, uint256S("0xaeb95a422655e5bfe9c11933c9ad1a8640604a22db4699c8d069806cc7afe56c") )	(134964, uint256S("0x8051487aef79e14ed5c67cd919c850793d409af949cdea4c34345be0a1b83f72") )	(209400, uint256S("0x33bf9eb5c646d66eae3835d658a75d511da22d13424fe48c43abcd5b26fdc3e2") )
(17442, uint256S("0xd8fceb89d80cc90476b46241b424c8f9a146e163a7cc73804d76f4c81d407f70") )	(50361, uint256S("0x421448ef94ca094d83e7e2315e84ff1719f801a37e925111ebf3818a475ad051") )	(79790, uint256S("0xa629c3f6e2f1f9592180464e79d5057990abd9d63e34a34858ba47962fd24a8d") )	(107893, uint256S("0x97bbd1062493752cdb3c8c429926d63249435792539fd061b9a5b8bfb1fc1877") )	(135316, uint256S("0x2d4664ee080957f38462569a574f7fde810150947e0d1e67d500b8e490fa2077") )	(209688, uint256S("0xb8d03ff57100c448ef5ac185693f3c08898e4466e740b90740c81ed94d3d2495") )
(17517, uint256S("0xdd54241c48cc9f2c56a5ede889febc6489b5cdf4043a5d81c7625e5f414a7695") )	(50375, uint256S("0x4abe55d3549f39129582d85dd3b8ddd796a6306c30545afe6eb8258fd38b22bc") )	(79887, uint256S("0x81d359e9af8872ee105b97b680d5b3fd0d6b65c456bdea90a9904568a21a81c6") )	(107929, uint256S("0xfcdedabe46494f22c882c676b7ebc40d0c24902e9029a3f909e64fc0517f02a6") )	(135505, uint256S("0xb98ea0d36aaa6eecd978641be7b6e24d7923b686d279dcc97b98554daecf4a44") )	(209733, uint256S("0x405344bbdacc802fd9155cecc2cc9865a9fc012954358e00f99ab87e3baa4b6d") )
(17615, uint256S("0xe468e84f199d2af71e5a34d8d29efd3210811ec94177d72a451abb21b9923c55") )	(50411, uint256S("0x484b7ea6bd06640622dadf1dc1b846b80d20f1ab8bdd413e2199d0b30f4b1f75") )	(79955, uint256S("0x820122713f601c748209e54d8ec15072ea38172995b83bc3d68b88914e69efc1") )	(108011, uint256S("0x633fa74769a796dd4cf5e34664820aba232ae122aa7246abca3791e46695fa33") )	(135588, uint256S("0x5082113db9f91f12c77b79c4f8eb7939b42919f4017471efee2d07475ab4b2e2") )	(209808, uint256S("0xd09300d77575c450f9fbb9018d74354cc2bcfaca09a7a7efa68fb97113ed0cf6") )
(17643, uint256S("0xe9cfa164ee9af9f834bebdca21500c971792d21cabea594762215352f6502b79") )	(50434, uint256S("0x1c90189b24551de625aa2f7e564002153171a9db0769ac8686bfed649b54b629") )	(79965, uint256S("0xd99a9b61eb6b4b061295b3bd397730a0f4cc2dbb353136680285e298e8c20223") )	(108014, uint256S("0x15ad03580746c4e348296263be86647889d94c2e9612009643bdfa7dcb2b0737") )	(135841, uint256S("0x1903d2b59ca6fa65ebed921e75ea705c759ae97c21891c4e3dd947999ecc2353") )	(209836, uint256S("0x8d6c7cd023cfade6a2f018c70a871074370010a9d011658537734b0ff52af4bb") )
(17691, uint256S("0xb465fb74c075106377156c2c74d0bd1bba26e8a7b0e27698346954bb7b794cae") )	(50574, uint256S("0x25ac6fca01aa2197660c95064988b5ef102134d4c8e084a491db83974cbef916") )	(80060, uint256S("0xca39247094000cc6659c75755e2403e7752e7fceda622e0fde2857a7ba106492") )	(108041, uint256S("0xf3d5c84131ff39dd3c87ab20c05dd5b2943669b3384f29a092135457bbf0c0ca") )	(136065, uint256S("0xe6601a04405d11672147c558cb91f580d67b9d30ca9aa0bbaa27c810b3e84696") )	(209921, uint256S("0xd3d74350607fd4a6c3403fa95c5122555e3602ece4920caabe85a4891d6a3a06") )
(17704, uint256S("0x4af9c203c8844d3256da5eefdf4ec56e0ab1c17879be7dbc0d9be8fdaa3b047d") )	(50580, uint256S("0x0b0058a947099e9fe0608f4b69a84601dd86f2ce2486b572824d3691bec83408") )	(80069, uint256S("0x760d381bb1dddd42f67f23b6e65201c98722bc099fd20ea1d6205203d9b86b11") )	(108263, uint256S("0xa54063dd528aea679e92608be48a3786e7276c297da82d533722e4e2339aaadb") )	(136230, uint256S("0xb72986ebb6155bd068f0af4004dfc03ed1430737d3e55b03675557188f7381e9") )	(210595, uint256S("0x59d2e799bdd64255f93fefa681260fb0a75ecbb23e9fbe9055f0eee710d73407") )
(17731, uint256S("0x0a26389128e65ed3f28c830eead7d158efe2d4b47c332ba19df7b794e5e676e1") )	(50599, uint256S("0x8d1c37c6fe4e17403da9bf7b56af2bebfbac265a1b89c8100dd6f12b18543d99") )	(80081, uint256S("0xe0e14149c82c25fcb01771b28c534b6ec1765ed89b0d95a7250b8eb17a481ad1") )	(108264, uint256S("0xbcf506bd4fcf272e7ceda0d60f4ad8dc24c33dab0db53c0c4c0e3124194cab60") )	(136466, uint256S("0x7a77567786a89a4c62e34bcbda967fd774cc22148a1c5d045df3f0666e1c6486") )	(210765, uint256S("0x748efddb819fd9c6127cd1ba015b1e3de347669f1ab024008c82c0ebb230826f") )
(17743, uint256S("0x97f21501bc618047313485cf3f7bff29bbd9bbe49628b12aeffaef231051077e") )	(50652, uint256S("0x6b5e1542d3fc0f9051e3329000422910579aff8bec11bc04eb2137c6875275de") )	(80128, uint256S("0x62dd8a83e96534294d26065a6af3ae91654c5474f66b522f8d2d86d8ea47ec30") )	(108301, uint256S("0x5c457118ba5a8418caf5998a83be84b99e4063ced9f0e5382aa9db692083d958") )	(136545, uint256S("0x3452f81d5ecc09e7ef6f5cbb5587374b120b2ab6bded744615193221181ca834") )	(211053, uint256S("0x53f61ebdd2816b20e3b6d647754831f83adf67c2d26c0adb0c37f28deef0bc23") )
(17752, uint256S("0xbd3bd829c04763cf28f2cfd93919f2bcf36d588a295f6c5fab47b4bafc523bf0") )	(50752, uint256S("0x7cbdae1f3d16a12123e9e266396a50513617934cf85e288cf60e417733c75854") )	(80130, uint256S("0xdc58dba90bec496fcc6613f7e61fafd84651ca6c060713b2a0645d1f4c38f797") )	(108326, uint256S("0xa622f4c0d4589942ee93f51a5e550788460a573e0125041f61cde7cd139063e3") )	(136565, uint256S("0x04cd1e1d316db39d775cf5ce3f18e70793afc13f56452db4b35a513f3d0fd3a5") )	(211076, uint256S("0x6a3ff48954466dfbeaf656c15c33f4e90c07ae3da9ebdad7c1a2387cda94020a") )
(17794, uint256S("0xd3982ecd7129203024628b3630891ae36110137f8c89a34453b61fb87025371f") )	(50840, uint256S("0x2c97a8e8517e163f7c13540017b21fde3b37781fa1e04262f890d3c88cf8ac18") )	(80144, uint256S("0x1485bd3dc943174a035a6b9b166aab8e1e58c51932ca23d8384a55299719a4cc") )	(108335, uint256S("0x35ff83384d671b411a3ae36262f618557eba7b1f5e3f6e7dbcb69b54810589f8") )	(136685, uint256S("0xc142400b4a72ce8278c89a219d25ad41d62549fe0d999ac0a02653fabd75d98b") )	(211373, uint256S("0x561b117a081b1d6b27dc50edbd225082e261a0d4b9f0aedfb39552135c895579") )
(17823, uint256S("0x31d4e3aa4e04d8746d4b791cb815c527138689d34ddef3dc81a668cc24b2d002") )	(50870, uint256S("0x1eda4418fada4066d748b46ad9e3cb1b7c406a6b8e68b49dedeb1caa802f8814") )	(80193, uint256S("0x7eeb8725856a3f49e365e1c5cde5329bdf33a8b6fe9e40423b52832a6bcfaefe") )	(108404, uint256S("0xbe6e12acf7ef4707983c7dc987314db61c8cc93ac7bbc808ff81fba8f76efcf5") )	(136745, uint256S("0xad181c35dcfca7dbbe5c247ea554fdddc0d3b4f804e71667dc36c83d50f3d2d3") )	(211589, uint256S("0x8cdaf5ec2fabcbf5d64cdafadfd71decdb1584b0439bad8e0de5bc2abe06dc0f") )
(17952, uint256S("0x6ea86390f5d06b0f5d216eaeb558d9c8c9a38d64318ae9e1e874ecccc000eb92") )	(50883, uint256S("0xb383790f22fa02d2ef823375ed63d020062669f2a49f698c6d301294804807c9") )	(80285, uint256S("0x40498f8f7516bbd59ec1771aea1ebfd7359d0f33acc14e75257d36ea8520fb98") )	(108432, uint256S("0x8f38eb98c672b4559eab78d39fdd22bad07b9a5e265680a702822cba43b5fd9b") )	(136863, uint256S("0xb6bd8001a77c13116ed4d53af1d553bf334eac3a60df49378a36da6e38456893") )	(211602, uint256S("0xc4f5ab83d4542559ac49cb40016eeb39052ab91934e9b458aa9abb3bdb2b3e96") )
(18003, uint256S("0xe65d8bad32194e2be5c899a3efa1932113e8684132704fc5957b78a2dae1ad2d") )	(50899, uint256S("0xd118b8b2aaf0bd4019f47965b40076909b93ff88973188a11beba8c697ecefd9") )	(80342, uint256S("0x5fc259d30021fa6e369058a86d0acadcc6837bbab3b72dbe38fdf09b3ed91322") )	(108512, uint256S("0x5e410180ef6c4a0024b7699f8fb5e74aeb0765b793843dd2f090070f29a53307") )	(136910, uint256S("0x421c9e5fe320b91af2698adb49929ab0f7af4f1721a4cfb6e4c772d266a30c09") )	(211623, uint256S("0x5bf923867c45c90145a25755815d717a8157fab00e23333bf35f7fe73ed52358") )
(18008, uint256S("0xd3934cdaf8ab66a1f89b5bd995272bb9992eaf1cfe863f511dadbbfce52bacc5") )	(50947, uint256S("0xafac619d682309c81aaada97e4e2fd0a6982ec54e4ad944e90791fdc9f8b48fb") )	(80372, uint256S("0x66ac86fdee125acf379e9a018af650fd0357245d96ce8d10f882220793a3e929") )	(108534, uint256S("0x41b656f3d4f8674f8a37e822e13049780387802839f9b5ff3d61ad94713885d4") )	(137015, uint256S("0x783454afab90b84af194c754983dde9a94eb035fad6bd222ac27381cbe6c7816") )	(211825, uint256S("0xfe0fa608c101b589f4b37d06503c7738583e85195b4f3b18cc4e8381e31fbbd1") )
(18069, uint256S("0x2f65bdc124897db9be04440062a1a736654c66707ff60f73ee38c333198e0bf6") )	(50987, uint256S("0x166adaec539ede5d7b7c52294ebe85b73d824691ad5c56edeb4d63841fe3430a") )	(80405, uint256S("0x3d7ac639c4bb46b9463d2dc15240f1182002c907fc381494fc9e02d958c88c91") )	(108587, uint256S("0x702b85782ef254d7c80675ceb61cf2744ef6c250294e5455f5832a57ecd895f0") )	(137025, uint256S("0x3c58ca0377812369a5e18a77e45249e71c5fd81612da7fe0894ba8ba7b81c128") )	(211853, uint256S("0x73c8904a046c1dc11d86fe207bfa519e99a79b377906dd126ff295a63d4ea153") )
(18109, uint256S("0x0c73f1c9ac04b9cca1a688a65fdc6a3e3fa6bff6848984d3ad8d88dbe0f4a520") )	(50989, uint256S("0x55e2cf81757a95116d050a04901e5d2a9c864295e2d67d4cf19f98f9a1cb7ecb") )	(80562, uint256S("0x266f3772687dd4328509077122de26cdc4c510c1f4b1eeaf905400f7119fe92c") )	(108602, uint256S("0xdcb4e33db1961d07a4b284c7161ca8e4a071baaca3e5ee3fd04394700ecc28b9") )	(137086, uint256S("0x0119e55e6bb42f358aa028cd092bf4e90a8561cf990a6f596440291d0f2a2757") )	(211909, uint256S("0xbf13b1e8d3bb3dfb67dcd92633edca72af8dabe42c1e4990999e42aad8bf9d56") )
(18160, uint256S("0xf3534b8d7edc4fc8144a15da68fc8eb2645a538e166b79729fea7f7d080a64ba") )	(50992, uint256S("0x085f9193ed453561b6c2aff34f714660ef4bc4e8689b6d631d5ff69072b65436") )	(80639, uint256S("0xd2d94e191946112e1b3411e9c8d786414546bf784b58248dff838dc1a6e136b7") )	(108604, uint256S("0xc41fad655652d46ea70f9f08cf38a144426b6c5a403f7e14778ddd5a84d13a63") )	(137103, uint256S("0xa2fa6965959cc2245e9768ad870743a2fbdbf35c103843eed34353e14557445a") )	(211970, uint256S("0x022aa5f594452492ca93a9e473d52bb4809d9a510a81cfcc4a8029b630590598") )
(18273, uint256S("0xe9fd24f14ac3c567aa66c226592adb4a07ce132bf82578ccd64636c98aac0f91") )	(51033, uint256S("0x2ddfd2e80ad4fcdbfab2a96b3cc31e5c20eb42790c548e60883bb251107602ae") )	(80641, uint256S("0x8598e95fe8ef86aff09d2218f800098a877670c95d47dd921dc455e00177d942") )	(108625, uint256S("0x4563ada1840040c299320ede1a754ab698796677c5dd27cc2e11d4859e379f36") )	(137192, uint256S("0xa1a80c161719ee83c6ffa970b549dc2245dfbebec9287502f65ecf96426159a9") )	(212194, uint256S("0x0d720e097b2bb8627f64bf22f7f4b71343008860765f3854b68da5f50227d72b") )
(18277, uint256S("0x55104ec74be5196e72e27bb21f6d6ac603301d0d6a470c8e71f7eb91550f7995") )	(51080, uint256S("0x292d174fd460cb918c80d730523016c7bc8d6d5d21bfc60173df3f1985eb7d82") )	(80692, uint256S("0x6d5521fd02fc9c0ad8cd49f1de4b75f000e5c26b212b5797675cc922881b372d") )	(108689, uint256S("0x43c3dfd882db047d6624ffa4fa10c2d2501f645c0d1fdb9e3dd2034b77964c33") )	(137194, uint256S("0x18bc65a80f62120140eb1008b8204fca57f1835e9a11e4c6bd305242ac81e354") )	(212462, uint256S("0x0251ff6e1d4c55ce83dc65d80698593b91f03452d1c4b4b9eea6294b63583fc3") )
(18283, uint256S("0xf576df101b91372c673fe8814fd48646500c154fa81a167253fff228a5cf6a6d") )	(51150, uint256S("0x17c2cc90f46a4f29c2e49c31115e7a57b0781c61efe808dd3d85766af38e07d0") )	(80751, uint256S("0x2df8dba31b8fcf76688140b71a410edc2f70f88f24896d6d53e58ea6a0962e07") )	(108690, uint256S("0xb44f698066b3216968546bd818e6bfdf65a2208185b0d5eeda0b4645c0d60d82") )	(137274, uint256S("0xea15ac806fb19093508cfd370a642ecfc66fd5992104f940dc5aa403098d2045") )	(212542, uint256S("0x23843bd43aff1554f7ba050c90020b29367b65333228856c488ef6f41fcdcb6f") )
(18285, uint256S("0xb4ffb72a4a803a939dda4e99a70a54f62d3f57e39ebba8b1d23291d29aa666d8") )	(51211, uint256S("0x2a258305eac375d6e4d1936aec9f00321a865ad531089819b22795c00271d117") )	(80838, uint256S("0x7ec9ae99ef644013577bdaf562d309dd556407ce30cc505f5063d4914d27e1c3") )	(108727, uint256S("0xd59e0355e8f5ae4717705ea8360dd1e21a8cdf793117f5d9b303fb3d9d29d7d3") )	(137279, uint256S("0x573b65dcf1e1cf948f05a05913f433f0357e39f9c6c59e42b9e50695deb343ec") )	(212562, uint256S("0x0120520bf79a6c32c3dfc88a6044277dd46146a58da3eac19a60810e45e95b81") )
(18367, uint256S("0x295c9bc4a8f0ed1c852e0e42104033390b5bb6c525a1e6956a245ff8028f766a") )	(51256, uint256S("0xaf74a470f22b9ffd03a88a68599e2b163d16784222b63d2a78973b86c7f68b17") )	(80926, uint256S("0x98b4c9be4674aec44fdec1863ddc634f52bb0413f5f75db9a9ab12deb8091bd4") )	(108840, uint256S("0xca98f5496aa5c43f1e811dff7159dcfdfb4997c1ce6fad98f923467d0a1d4057") )	(137329, uint256S("0xe347f6a9513308690bb74133c4e7f3257e83f79940fbe33c3123f73e1f89d6d9") )	(212612, uint256S("0x8b49d207b4a18129e7d6ccf3f32f6892a364f6f13d2c7bc64c23c84295039a3b") )
(18402, uint256S("0x13848c4be0c55d1bbdd38cccdff850c6447db62cf5778087465fd2ba2f18d164") )	(51328, uint256S("0xa7d95a9c305f66d0a18d6b2b957d55b369a53e1166fffe9e31bbdfab28c01bcc") )	(80966, uint256S("0x48ec429d695a8d4c02f9aeaaa0742f1e59751ac8e99d040bd482f1ebfb5697c6") )	(108869, uint256S("0x11d53b8d2a1c8a4676b6c2ed12f140bb843c34d482d41a9a723db5f1340dbfcd") )	(137363, uint256S("0xcd1a15f217bcb8d592f4fa93b5e2059108f5418928f83b205d90ad43d7cdb510") )	(212889, uint256S("0x7537f6ecb6684c180324d4d8a6293d6f6bf97a69420754ed5432b6e455d21c8a") )
(18404, uint256S("0x94001b01fb791db6b4deafd456be552b2e93f5c7d34fb036cdaf0f5460c23831") )	(51368, uint256S("0xd8872face46cb14aabb6b7d8c4f8f6fe0be14f6dcc14f8c3b1b196286904491b") )	(81052, uint256S("0xe0d23753b4a1de89f6c8f32ed96bd27ab92354ed708f8abede31586b3c334d1e") )	(108892, uint256S("0x19b3cac8b1f0350fb8790dd550c92e79b512f00be94f8a79fee703bc08d6d4f6") )	(137396, uint256S("0x93b2c2f3d591f4048c70850d25fa060e84dfa83c719a392e94454bc68e61c289") )	(212933, uint256S("0xc8d0b41c47813767243d6bcd0c4253a14a432e53646d9f3635809c2bb8fbf85c") )
(18433, uint256S("0xa52bc3d1b4dc8990d0b46ab841b230dea1b650f1da8d04858a65022ca6b8c6c1") )	(51434, uint256S("0x6f8d420220fb911fb0a4a419dab0adc9a5228443406e81e15fdbe199dcb7e2d6") )	(81095, uint256S("0xfd26c1b415a8a6dd5448586d4caec5ceda368d989f442780e0ed632117d2d5b8") )	(108899, uint256S("0x16796a5d5c4ca12117474ed7b97ff31b56fabc27ba9bf06df03d310e607bebaf") )	(137494, uint256S("0xbfe0984d4274f94142c8c76c8beaa4206e5bef4d0195d2fda8a66579d26a38c2") )	(213110, uint256S("0x6b658227317202063ea4a4705d392416704aaa17a569132a5985272f050b6245") )
(18442, uint256S("0xcaa347f604889b1ee49cfd62d69235545c65d2b62fca3f5c1ef1606ffebb154b") )	(51439, uint256S("0xeae89bf6789ee0ce57d67dff8543b55b49a0ca4c7d07b944081b7c6776a554db") )	(81140, uint256S("0x8f6ed43db89077ca7537cd61ad96e363341326176642f76c900a38b24ecb1e31") )	(108979, uint256S("0xc9dda6fca8bc28563c489342fab53a106cbd10f2bef9304120cc302db5435cc8") )	(137601, uint256S("0x33f22f01ecff029fef5bf5a631587e7670e4d4ef0cc544e4714e5db54a5badaf") )	(213204, uint256S("0x4b4faeb8f263efa6eff36ff4cda1cc5cfa6a26136637d5fab8ebd86c2cbf9a27") )
(18445, uint256S("0x03849d668139e6aa6153435e7c66e3a6529830fe68f2391e41f22b6bd527df9b") )	(51644, uint256S("0x531be3ed6be3a3059908a6f7f2320ec04d10232512b77f9a424b4ab70aa4ea4f") )	(81148, uint256S("0xabb2899917f9cb2f102c96186bc4cc7fd39bc553f7509a1d7ff4a5a7448a76ad") )	(109035, uint256S("0xca1949d1644dd12f01d3b2b85f6ddc92ada520c7b6265afc7a1f9049e038d9db") )	(137653, uint256S("0xe9d97d20e86797a0e67e642de852fd36238d5afb3a7d6f9d88fcb61e9975e958") )	(213346, uint256S("0xdfaeb283e5e2ab0b725d09a5919915a9e499be0b20eefe6f9a37f73bfec2edc5") )
(18669, uint256S("0xd8709478e725b1ed61e9bccb80a40b1d5507891fd48c1480464b39ced2aabd44") )	(51701, uint256S("0x732bb662ff9217ad126debbd7f7529d3cd69c79ddfa10d93523e167713e6ec37") )	(81213, uint256S("0x3ac89d46510981397e1b4f0c89f551520126b5d724e334f6e843c2c8a79aaef2") )	(109038, uint256S("0x7515ad5a093bb42ebf6df2c6348550506a0beeb9c92fd34a07f5e656a50389ec") )	(137831, uint256S("0x664cbacd63c8e40ae43fb446ed0566f0b54e649a2db4b2696133333c36033b0e") )	(213365, uint256S("0xa77d5550aa4ec92f492a02455ad865325cf2226d30c50da93cc6717e5f950508") )
(18684, uint256S("0x6743cea57b77e650b329c0ae8b1bc7a254d33fac6efac6d34196044f4bca5b1a") )	(51750, uint256S("0x1c07f4662fe652eba3da2e29264f497fa97ea9f6e7577bf45831a2bf526c61d7") )	(81341, uint256S("0x42897b9dd5122fd6e04552dcd2ed23faa5df870c8090d66a865678aa7f3bc4af") )	(109040, uint256S("0xddb8f49c4636948c9c7801b50ac0c74a9c498bada69b7da242878226a57f9a01") )	(137917, uint256S("0x454aefd507478b388be89cba7eb34cd70a53242688862cff447a9ded0da9d64a") )	(213572, uint256S("0x2faf9c86c840371e6e32ed75accdfb859230e34b2dcb586e1d899317980c92b0") )
(18783, uint256S("0x0ba762dad59651bb0fba30286a2efc4ae7fb756e8e03bf87015e89068f7f6907") )	(51780, uint256S("0x34fa8a3a9b136786b8dd1f8b284f87a54fc2ef9334bc95b161c403a2cd92818b") )	(81395, uint256S("0xc77011defe90a073a037d0dc11d8de0edf9dd9101a5e4f4ba5efdfa6bf3983f7") )	(109048, uint256S("0xaafaf0ea1c3feb5716a541bb2e68ded635e2902d71ece2dac9b12d62831e6d23") )	(138025, uint256S("0x616af44ec742b0c8853599ff475495500a01c9655a7da43162be67ea5533f430") )	(213671, uint256S("0x39eb12d4c00898d862376bd967444b1cc1fc9165fce9e242f376387fce410b34") )
(18807, uint256S("0x5cbc20b04dc5332627bf80e1874422ccf94304d7e1ecdf0c9b6baeec1e179d2a") )	(51867, uint256S("0xef9915a8cd572792b2ef19def67c60943f23bee6cbec790d8ad7d49fa7425a61") )	(81410, uint256S("0xab4e5123819c49b71f1543cae590ea0257705c49715088ba125fa2b69267799d") )	(109061, uint256S("0x5aafdd8ddec3eacf99a8cb44a666b8fd7e59cb169c95eba107a8b2c8d8b518ca") )	(138036, uint256S("0x1412f5f1db27853c3b507ed357b870d03221ea83813e5f72ecbde7503359c399") )	(213971, uint256S("0x306fd580635109ed5b80f5f2ad3f1c19d833247d62fb762db383b07499eaab0c") )
(18808, uint256S("0x2d79ffbe01c185c0cb2cfbecf3dbddb856b604b54651be9a8aa27a4dcc2caae0") )	(51881, uint256S("0xfb717847017434329ad7a4663b6846555e0c988330cf1c2dc3befa5a4c3e307b") )	(81474, uint256S("0x5e7eac5a20d81e2cfdb5ba03f56a9adb9ee3d134f8d16466eca64ce513d5fb34") )	(109087, uint256S("0x50d3a2d0813104233b140145f97e5bc5a879943549b22241eebe1174a1acc38c") )	(138392, uint256S("0x67a029044b2d45455336153dd51c659303e6329b5f81d2012e2315eae644e0dc") )	(214165, uint256S("0xc657e607777347747608333da1248ceef5f743df5e474cbbf0c7c079f25bf876") )
(18822, uint256S("0x187964420b47d4da00886436ec09c6af64a855d5709ad74946d154721bcf0dce") )	(51915, uint256S("0x5c3d7ddd644e00c01b169777e626753d2ba4dbbc13d7fb4e00dea02b230a454d") )	(81511, uint256S("0x05434768a20725582dbb814dbcabdb41bd456d53f58f1da97a69ff4f51ae6db1") )	(109117, uint256S("0xebf1f23ee740e45dd263c0194f6836da5ca6773dda8e2a9005e7507fceba14ed") )	(138398, uint256S("0x19814d531c0ab27418d801c2cbbae074cee379728f1f8a0e094e2abba96d7427") )	(214215, uint256S("0x13d3d51418e94047d9cc3e8b98effd5d30d43223aba86909cd1bc7f9b5067e1a") )
(18833, uint256S("0xd9dfe9d398973008f1b68e04f7862c3e1201abd7cb0b1432e9069ae5ad67f3d7") )	(51925, uint256S("0x1c27c7e4460894fae4bccb8d2acd5e23081e66f89c8fdaae6f1ac65b5468e329") )	(81527, uint256S("0xd885489f2d81d5402c657dfc5d892d5b75ecf2d91192dfb5360510baa9628431") )	(109165, uint256S("0xab9fa4b894617e938e62b687bc37ab13479adb5d1b59670c11decb7ed0f071da") )	(138420, uint256S("0x813d369baa79d269c54cbeb61a44cb0d9678d5d6824086fca64cc041416253fd") )	(214253, uint256S("0x499fde9984f29c92950998d8c7abb1cc78ae339aff86f29cfc8895d20c59548d") )
(18912, uint256S("0x5adf741153658212a2c87365a963d551b7b77c64ba7424a46769d648e4a6ad30") )	(51933, uint256S("0xf90b9ed5eb12ecb60ee08ccc5dab17ab30a033467c038121c7da74f99b2f67a8") )	(81603, uint256S("0x56227a55fdeaf1923ab6afd0f5fc416527dac74b03574c8b2df032f09cb3d060") )	(109182, uint256S("0x79a840bc477fbd42cd2e17c4b12464af4907f00d075aacb5e55316578baedbfe") )	(138883, uint256S("0x982d2d95973e293a2aee85caa46bd43444af147efb5b32ad1efb506fe0cc9689") )	(214329, uint256S("0xedeb5d0875c7f371c8ace97b86de1610257661a73b5eb20be2235511c8f82480") )
(18957, uint256S("0x166b4c6ec0932853812fb6c2483a33955af24deb5c0b45a4cdc39608232937a6") )	(51954, uint256S("0x965f616c09a5f2d8768bd4db2bfeeba258ae7013dd584007ec1f7f0314518900") )	(81662, uint256S("0x67f27a99a8ff4db96deca23b3b3ff369db0c2acbb35fbc73e4bc56a0ecfcfe83") )	(109265, uint256S("0x99caffcf06ad2214e880421159fcb1964d8f97bc1e2260013e03b4cfea97a7b8") )	(139055, uint256S("0x5803128717dd2f3ebe4261bc489f7e666d7f2728aa5850766873bac50675ea6c") )	(214349, uint256S("0xba3bc256b16ea22fd379395f1798d7514b39a8f3423966a958ed637522f7e0d4") )
(18975, uint256S("0x71732ab720b34f1df89642223608fa4d8a2e6a33181256036924a729d21d885d") )	(52015, uint256S("0xba67e4a7f3b33070ccc74fe7ea288f6a13e34f65d4b051c7547f396cbd4865b1") )	(81691, uint256S("0xe926a0327c4e01a05355d9a4f0f3bb5c291f1e7914d0c625e315724d94a54ef1") )	(109388, uint256S("0x429f84e898f9e584f735be2197f8ade0e94a1783c07716ee3b8f8aac2dae8c5a") )	(139114, uint256S("0x55cc007889fd95344313e0fe0fb7a540010b7524988cefaee339ecdc22c69e26") )	(214353, uint256S("0xdf972da18a6eee7043641b5f1dc5839a52eba12667fda6d68da1e204c99dec54") )
(18995, uint256S("0x670237dbe388076b3878a1f8f7f140ae447368d4fb20af191bd9ece2906d97e9") )	(52034, uint256S("0x85363a907dec6816c638df0cfc7943f4ab35b9ff6e069dcbf4e191aa9e3483d8") )	(81698, uint256S("0x7f5a821a4f29d2b3c56a00c0b91eaafec3e4a742c605d80aed3b2ee12790bda5") )	(109424, uint256S("0xc492092fd7f2930fdcf60345675a33e4dd65ec98a11d2a86dba5e7c840b5bfc3") )	(139131, uint256S("0x11bef0bf46ed33903cbe519406e155a22686684ba6e18f588123954351789727") )	(214456, uint256S("0xea109165ddddc6f51e449061dac98257c4b4614ff5891157677c9e4eab3479fb") )
(19218, uint256S("0x875a91b528e10c1f9613ed6f012e829cf666791e25f3fe96bb3d78b67057098f") )	(52052, uint256S("0x7b04c9a4626533aa6c6b88f127ba61febbba891f2ae635dc5b31ddbb6ac6f855") )	(81791, uint256S("0x61b9f61bcf7b4668fd8ae015b66fab505f23df52ced472e900373e4df3a18642") )	(109468, uint256S("0xde78eb5b994556cdf72382daf86d815daa2aff72cc3866f875d758e59ef24e0a") )	(139177, uint256S("0x6d6f92b5653a6b42f0363ba6a05387ffd9b7b5f342efd7aba1c8ec67861fddcd") )	(214604, uint256S("0x190955e2068ac3180791cebf26636352cc351567f73a9b9db1bcbe1724a7ae88") )
(19241, uint256S("0x1946c2013208ee657d020ff404ff39fa864d8f29d3ad953a7cde9e87b8794a72") )	(52303, uint256S("0x17a1da58a2e26d3189d59acd2bb3b9a61c8b53ae46affc8a5e0ff9248be52f92") )	(81852, uint256S("0xebacf72282e132a9e83df22c7347342ac25efb2f248220c1c485019a618b1e5f") )	(109594, uint256S("0x7018d110b04aa3f8335e4f2f464856dcfd5ff6b77faef6ae2aff0a289fdcb567") )	(139427, uint256S("0x06350bbd52aded1485d25bb2ed1332e1d5099f45e1c99d9063ddb34972609536") )	(214708, uint256S("0xe8c209027dd88a3d606a0057a0ac92b3ad016ea5574a677b377e48bf15cc4412") )
(19304, uint256S("0x0c362f15d17c7dcd99883655a5d87258d270cc2645cf31c3d60f6b33c750266a") )	(52355, uint256S("0xa397d1cbf8796be49a8029501bd1bf6b6d810433b7c8a97d14a0734e0fe6e2b9") )	(81974, uint256S("0x3671a75b4fca1a44ec61471168324f94a5c29f76c67f350fb79c4e140dc44cf1") )	(109639, uint256S("0xc717446657af3d6ddce600da986323a4edd59476092c5371cf89be8cd2895402") )	(139462, uint256S("0xa2bf3b84b9681ce60a512fe7ace4cfac04d000b78e364fab671e913e5c15010d") )	(214755, uint256S("0xb3a02c91eea1fe14fb1b639ec24074a3e756b59398cf18f5c53135ae3e733292") )
(19327, uint256S("0x3f53c100d8fcc302f3f5609d868d87af25da56cfe8b2b78508f7287261d16e32") )	(52372, uint256S("0x2376ca2e658d5cf4315b55f4f69fbc24a880e00247964e2eda5d683985390b56") )	(82004, uint256S("0x3823003b6466e931198eb2fc7ba9315bf97f2dd9540a357ce6c43ea6be067237") )	(109643, uint256S("0xe1a07cb8cf9cd5de54fb276af995a44b5cb959c2ed91f72cd782e8f9a726ce6c") )	(139573, uint256S("0x3f436083fa918dd2ef54df8aa4e4f7b29a9c6be2d9d95387818bfbcc0735f4bc") )	(214857, uint256S("0x147f3a489014408a75d9b808c816aa78181d6e1485acace609acbc4efbaee46e") )
(19382, uint256S("0xb737a9e7c291d51831023555048392657c1af94d8607797969902995871489c9") )	(52402, uint256S("0xe0ae80feed4a78248e28287c5c594b6994d5e33bfc73d9b0fded52e1d258118c") )	(82008, uint256S("0x34b252968a1729afed98e6fa846e2965c962300e0729b329fae1bfd826d39f4a") )	(109674, uint256S("0x23e59491ad7d0c560787fb888187e90804d5a3e0f7dbdf9878d0485a5aa3f1db") )	(139802, uint256S("0x3b4766d8358750b68d14025fba5018221e860bbba66c0db8352281c731486f4c") )	(215059, uint256S("0x7faeaeafa7053f5453f1bd3dc76bd92c3986cd90f1ebc465f7e3fe88df906c73") )
(19395, uint256S("0x51b9ae5537c1ee747c0ba7420b0c58902cc887274ab98b3db28a2126c8713822") )	(52599, uint256S("0x555205cc84615b6ebb2426d6a07529a0b142e5e9dbea6aae0c99cd928dca8cc1") )	(82071, uint256S("0x74fb94adb4cbc88a0f8d14c83bcec461070be262b012276fd6f52f9429ac3ede") )	(109830, uint256S("0xd5114ef8f23381a33a95a70ac7fab51019310896cf36370aa045ba8ae12f04f4") )	(139844, uint256S("0xf30a48838a1d496ea5ba98e3d27b2c9c6f6b619b1e41fa33b13dbe5851b56927") )	(215084, uint256S("0x65adc640abbb1b001feea2ffee804cdf9027973ebdd1e2c92c401d1455c0faad") )
(19579, uint256S("0xbf17badc4853a985911f783eab3b6b8cb064938ba6b7624dcb2e61ceaef9b89d") )	(52804, uint256S("0x8a672cc347cd687922b2635ef381d9306694cb43d229ec1eda0a19abaa1ec84c") )	(82197, uint256S("0xfa54d5d6253e4a5a54225a8da562abad41d945300a46f4d3e715e636c7fa18a2") )	(109858, uint256S("0x9e2fe97d36b9c24ba8a1195d8809bc60a64d4b03f82df43cb5ec93fd491fc58f") )	(139900, uint256S("0x275439c8781438609ba0e76e57d1afdfbedc8f8e558a42d3beb6161204c50d02") )	(215134, uint256S("0x8a00229b48bc404b9f47e80d76b103cbd46b1211e7d10db5414ae50b0d23bc36") )
(19620, uint256S("0xedfe550e285b68f962f2ee3c8b40e654255b1c14a3af0ddec474db1b61838b37") )	(52833, uint256S("0xfc40069a8e8bb84178ea023f982de916ca28b4ce06be7b67ee6d3f5ff8002f2a") )	(82205, uint256S("0x7f4532f17279f7091244404ae60045c407f0f4e429b4109cef3539204ab9731b") )	(109953, uint256S("0x113afcda2eae26643ab9cb8a40e5a9712a767c8625af9d22f1fbd06cb976758c") )	(139918, uint256S("0x525f74009f29631f08174f137ff2d9570ec77fe6e7669688bbd92b3f0a014503") )	(215191, uint256S("0xa628e44ca21b0c6489d1253ea38f6a117f6d5fdccbcd543cdd8fcc16bd1bbd34") )
(19639, uint256S("0x19fc139409eacf0dac9918a1bc2ecdca8f585b58b47c662721118a77befdd220") )	(52937, uint256S("0x6efa6a18742050ab906d2699ae430f09af0e9923dd8d753c62b71bc63f18bde5") )	(82225, uint256S("0x0175997673c594b479de56d192ffa84c83db1a877a8b854bc7d3446941922cc7") )	(110142, uint256S("0x5050e5ab3dce9068725318c29c34675c718306af1146322526219be57d6b621d") )	(140053, uint256S("0xe9e2c67b0d79be5a45721afbda7415fe15fb88bb0148b00d9925ac28a48cc715") )	(215240, uint256S("0xe7517217292e672feee10213a2081129cb7cd9a3b5a76a915a3a2a0c2784120e") )
(19719, uint256S("0xdbf1149296d98459ca562249df59f68cd4bff342040783ba0d9d412e9ffcd99a") )	(53022, uint256S("0x658a023be28e8bf617bee0427684e407361b6ad6a63193858c3199f26fd65328") )	(82400, uint256S("0x39952d9c5d98f2724ab31e07deef0b014c3b77e0ce4083c842e37756ce3dd1f6") )	(110235, uint256S("0xa1ecedfaa944229d4655da1de324eb2b448eacfed67d45913ec2a2737be026c0") )	(140100, uint256S("0x2450aaadff7bc658c88b96bb3ec0901b69699ff58d21a938988888572430c604") )	(215246, uint256S("0xf86063bbcac0835186311a27e6a830e148e9a7bb172aebf9ba05cd4179b4991a") )
(19739, uint256S("0x0353f843892ee955290b9ce7de2ada14ce22f24a00ecded5755b80350655af3f") )	(53048, uint256S("0x7b5d3705782c9c10d83a13632c8c80fe4544752c8aad5526b99f1f8ef1c74009") )	(82514, uint256S("0xef3295698378e4a5700d9fb2706e4cf522e09557a6c4de97746dd777116fd41e") )	(110241, uint256S("0xe81d7247206b29cb3a114d012941f9046bf07ae3e3a755cbc681e991f285302f") )	(140599, uint256S("0x37eff99408b7fcb8c97ce9ff3b76431f7889e5a4214951d4b29b3f4f42776b0c") )	(215510, uint256S("0x60147575551fb88958cd77791616b15ef96bde8dbfa14f9c23551f5727b18d7d") )
(19771, uint256S("0xd70e57c8fa22ed10e89e74f8a815103eec18d2b9debaaaf57de7aecfe87bf5da") )	(53143, uint256S("0x8c44b7af4f30fdb505037f144066c70fcc6585938c2c43d79bc9b162fed168e2") )	(82543, uint256S("0xb60cb8a910a8c533c66e418d2b514e60911ac06feb08816c5fdf77b4c0d41749") )	(110261, uint256S("0xa781678c85beb47aa64fa80d7059276194d60674302154367ad2152f88368688") )	(140829, uint256S("0x905691fc90ece8090c7855d3c8d2b53009d4706c42b99818e32ce0c2ee40e046") )	(215667, uint256S("0xfacd5762003ba934a75cf717218aed710a4bbae657c673c314d2deea00572cb4") )
(19915, uint256S("0x71416c373cafab2c5068a84be533c7226ae7ba4a60de04940d968a9ac33ccc4f") )	(53152, uint256S("0x8c4c3ebb115d9662e95e1f8e72033ade94f0d107ff21caaa6b55c2293d71ac85") )	(82548, uint256S("0xcd275a693c05bd6ffcd130a8511fb410cbf94f649f68f6087b079dcb660a9746") )	(110401, uint256S("0x9bb85e704e3a662eedc12e57ca53d16afa7630a4c13e42d44d6457ebd71658f0") )	(140836, uint256S("0x1d85d65c0f6d55778acf199e902043662002381e4e3d022b0c11a9868c8c336a") )	(215936, uint256S("0x10050ad3e91c4417da6178a06d1d81ed3eb30999096afe0b045d5de28e234882") )
(19939, uint256S("0x10b893334fc6abb3c72f37d72d049d71521ab34bee1245b021c63b8520f2a9ec") )	(53172, uint256S("0x13cab7411de04bb532224e4b5139a16547f42971ca72a6395f70fe1b063ea4be") )	(82561, uint256S("0x771dac8ae01eaa715f2d8513721f99ce819bff6f39dbb58e95d652a99963b190") )	(110426, uint256S("0x6958e42acab11b139666808970c370f642fd1c0ebbcdf1b2b35928e8c6f3ca26") )	(141059, uint256S("0xc6ca5216aaeae508cbb8eb7c96808426cfb495afe92d316201bdb8d37e0e16f0") )	(215944, uint256S("0x74ca223f3008b2b1d7bc1d7fb16b11b442916c29c69ebdbb3880cfd3f5f0e680") )
(19957, uint256S("0x4895f33a5f56025db959e5503f24ba3b6cf755384928762736cef0608cc428e2") )	(53188, uint256S("0x25391b9b547fbbad08f6d5b56849d2bee09bc83f8d405e277b5199233203f042") )	(82610, uint256S("0xff264c35d2f9746a5c905413eb7a9a75aaafaa13c4666b264f82713c065807bc") )	(110460, uint256S("0x03877fe679d562600f7388032331d2dd29ab02951efa07ad29b1bca1b51d2f7a") )	(141196, uint256S("0x3ca4a690ef5b11cb7690970af713d3c62954c9ffaa917d972457a5ef77a543c3") )	(215978, uint256S("0x041c029536fb777e98aecb32417fe924fa7c37b795edc18db3e918ef15df9d2f") )
(19976, uint256S("0xaf213776e9c316766cbe92946c4a39951c519060fb20a8d06fbfd6c9c12b712e") )	(53215, uint256S("0xf134b6901938b3278489b467b2b1a6d74ed8a074727aa0b9337dbe24399abb0b") )	(82783, uint256S("0x0d05d417ff03b8c4211cfafbe2590bf485853dd1904b50a16141d8b55a9206c6") )	(110463, uint256S("0x54f2e532a41a83ba322b4851a277ba55418c566c381a1a55d9e899c2a90d8f67") )	(141483, uint256S("0x9db5316ee710f8e106f9946ba65a5cb514df355cbc45ea91841881b2e81bef36") )	(216195, uint256S("0x618f3509072da46a5bbf22ae66d1952307eb795de3dfcfff928574b2847e58b7") )
(20025, uint256S("0x8e5f966dc4e7808ab584684e84354e65ea2c8bcb6a541a55fe601f5494693931") )	(53337, uint256S("0x40f7c3261f459af9a2d83a041a1105fa46b9cd93024c2813f198d2dffd1039b2") )	(82870, uint256S("0x3bff5fe4d6252dd0b5c5748173f615c7faf706519d72a1e56fdcb5d55b3f62d7") )	(110550, uint256S("0xaef154ab0c4c241909cc0be2ee21c4ab52dc7168ae6bf9045272bc0cb09d06da") )	(141634, uint256S("0x8e1b87336d68da7dfbba9ef6fcd65d73efdcc5846788d612b203229014c0d090") )	(216248, uint256S("0xe8989360bfc8106950dd8c934cf44c77d0abe993f99bf9226350a4551a4979b9") )
(20028, uint256S("0x9c66320d4e3279071b1ae4e67e504c4cc644b1d3d47b394fd7efb5f661556cfa") )	(53357, uint256S("0x7eb8d7d6054bf083d22ef9ba3f96bde0d687365f3523f7e9b68ee93cabf647cb") )	(82952, uint256S("0x689764dac32e30d078b5d02853362691063fa9070fc2a9e988cbd7207fd1b6c7") )	(110569, uint256S("0xc03cb81ac3627a6939e0b7a2c3947ab93448ce0db861efd618d121843d566282") )	(141837, uint256S("0xc8c6b0c8ce825579e2fb9fe412550d2dc110ca07d71a249920f31eac5f44dbb0") )	(216476, uint256S("0xc35f9d4be431e956c9bb8fba620fe031e5571815d572cd7dc551edff5be3630b") )
(20076, uint256S("0x12a5995ecfe1bd45feeb15571c5adc86af61a332d4fb2fc46184e98a40385385") )	(53402, uint256S("0x1c23e4643b93a7cd0ef7e8a2cbb7b8417fa221fda068f7b0232efbd0b7d01c7a") )	(82967, uint256S("0x8e6c1c87af090604a8d6087d8c55b2aa1c86a09a2afdbba46be504a4263e1e0f") )	(110612, uint256S("0x4d54fc6e0dabf97a34ef45f6c84d9f254ce101ced8bcad486763f8b429133fe4") )	(142308, uint256S("0x7339aa8ec0a60c0b612fb19ef6c24020b68bd11f9cb1fb04f52479b04da13df8") )	(216673, uint256S("0x827b319b3fb06069e8144b54225be8ba04fe9f5d47319ff92b2e87e321a35d78") )
(20085, uint256S("0x6766b1a95d489076827fa65c3ef2a3c15b49ef861184e1976d8ea342a942b3b6") )	(53449, uint256S("0x3edafbebc0d6f4342a26649003d9a050d3f7f6d8f3c6787bec14adfa67ad5656") )	(82976, uint256S("0xe1246ee0c5bb1826068432bb3e34f243a0d6bb899671b01256987d208970de36") )	(110659, uint256S("0xf9af49ec74b0d1d0b98e14022f72a1c900d4d4388112cf05d702d0afa9b33cfd") )	(142433, uint256S("0x8e60c3f384c710189b12e09749ed1c931f79de3681948b970ad5766d009c6749") )	(216733, uint256S("0x45dbf244561c247f642c69738241bdb331ea2c1891a7d84310c95c0214972c4a") )
(20159, uint256S("0x0358fb15454aa4350090df123bbfb523879309ac0e00594c2ba14bfe07e3dcfc") )	(53452, uint256S("0xaf864487d71a4cc1836c3b5b29611cb04f16589f6b78f8ac5f0f11a2864f0d59") )	(82990, uint256S("0x12cf76f64e969b815b3a3673e8de0bd06aa0ff3a8b19b564555acb7ae2f5698e") )	(110677, uint256S("0x7a43eb5b7ff4788e2019b9132133a6787b21fd09739c8a5234b0998c6614e898") )	(142497, uint256S("0x095a09af061f64c4a81b216033ece8c57fe5a6450295f44797360e7db97d93d0") )	(216991, uint256S("0xb9f8c355b7af75348d5c0d08a22b3a8338f3783efe2b6312aff0f7034356a376") )
(20332, uint256S("0xa1a6e41df95f363cf7e0122e794b45a56f0ff2529f89988490867dda2e694a90") )	(53502, uint256S("0x331cc546d9f1b69614660bd0c4581dfa32fcfe1d1e05557ad345f1ea4bbdd351") )	(83096, uint256S("0x7f66a7e13f747eb41de602cddc211b6128260814853d84729e0cce34bde245c1") )	(110709, uint256S("0x2cc32d5fc435173a9d2e94008e172e25a3f60a5578da643f1368055663e5da1d") )	(142621, uint256S("0x27d9ea902f7cb0c8d3e90a89c15444a194738c650352ee97a26791048b9b0011") )	(217185, uint256S("0xb46c4e299446a7a18574ce8d3cf6e78058f50c1c37689130e2b3d528ef765531") )
(20434, uint256S("0xe90bc9ae681e2cbfa09d4306fc0ff060e0b41873d9a45f20b9f1d7fad0a0859f") )	(53548, uint256S("0x0f136ad7295d4e54c75c7db133e826eb5d16244ba8e57f07c4e3a9db4be95970") )	(83114, uint256S("0xdb3028cf5ec094d69780eccce5a3008dfcfb623771dd617772d254f695df20b1") )	(110760, uint256S("0xf12baa08a11d2107005734158475fc053bd10d8854567cb3f21193e1e4bd95ec") )	(142753, uint256S("0x76ead052933009336b7a2e33369fab0dc475f1fc4296a80d337309bfb8f5f575") )	(217232, uint256S("0xa50fddd3ed5b9eb358f4e8075febc43f039823a008a3925baebc2105fb70e3da") )
(20471, uint256S("0xc6d0ec38fb727b3609be7279aca691def65b33c8d2edcbc59a03418eed9fb4e1") )	(53569, uint256S("0x7d1b00572d44d0006a5c6f186d3d850cdc4a2ef30ce63414ad3b4d5d2b916eab") )	(83120, uint256S("0xbbe99e83bb28cd4da4ad688249278ad6009c55a73dba638c7cfd3809fe5ca158") )	(110814, uint256S("0x15a9a0b16e00b15ee85e8c7b00b453c89e7600a988b3ff9db126f657e6c785dd") )	(142978, uint256S("0x7cec7656b436fd1589ee25120c761d2a0e0e7e60737e252d1d5f6b9ea943217d") )	(217364, uint256S("0x0196e93e2dfa0c49170b86a58ed61e0598eb4206b1f8b84fc1ebd6668b4b3adb") )
(20529, uint256S("0xb78f78506dae0cb651f7ceafb9adea01de4f3d1c97abf4683d06e8e22514c0a4") )	(53704, uint256S("0x444b19d296c8dea7ad89db4c6f68ae8140809014e76d1789735be4c3c68b89e6") )	(83134, uint256S("0xcb67519f1ffa2b82e3c2900165944831e74ded19ab6c99c54d41b14a1315cc4a") )	(110831, uint256S("0x699f5b7f6f1db4c9c620a90b31d48fe569cedfea064cddb1fa721a8beff5375a") )	(143065, uint256S("0x7f21f51aa58d85817e4cb76175261f3906741a9f25f9037d544a6f60376d87c4") )	(217424, uint256S("0xf608b7330ad58952c88388d6439d87fad101256fef22ce9ac4bf86899257bce1") )
(20597, uint256S("0x0b3c8a0448887ba83eee271f164b1896704d6962916f76e1e488c84d2473d3d0") )	(53731, uint256S("0xa3de0e0588630a0c65369537b49191b3da2ea7c3df2bd304eca80005a01d12ec") )	(83149, uint256S("0x97507661f40dea4c44fe7836a5a99af27a3988bc11c5d6e138b1a6cc7d71a4e9") )	(110894, uint256S("0x936d3025df5102c558f51d4b12b8cd39585417d02f714aa21d009d13630ee351") )	(143128, uint256S("0xb6c2acb83b0fe29c2fed0fb0f866776eb167fbc062847419e13c73413f60086d") )	(217449, uint256S("0xb6a1dac9cbaa9a1051cf99c57f34cf5d82c719de14231661763b10b2691f9450") )
(20599, uint256S("0xb13b5cabf74b27a5c41eb1b5fd2af06cbeb4f401b7e1697f42060b2cc7c70a91") )	(53820, uint256S("0x7768f86f8275c7627af3055123077e702bc9d9c86465c8bfd567c52617e93547") )	(83151, uint256S("0xd20102245ceca2a604a54234b3c5bec73cd93704a2cfd65d78db132ae4ce4198") )	(110900, uint256S("0x159f6c5eaf793aad4e575b8c00f0b744d1254e471e34b0b00dc42b81c5e0de7d") )	(143342, uint256S("0x19994fbb1456b1807c6d86c00534779e6bb1ef020aed807b8194b40a6a4d6b32") )	(217565, uint256S("0x336de37689ab483fa90f188fdca59f3c3c1a92b6804e6a6a9460965cdec89350") )
(20708, uint256S("0xe19000f01de90eaeefcff2e21565509b16b585b188f93b267961dbf6d5e6ef0f") )	(53874, uint256S("0x7d5eb2d11aff5e8a70999941387c2fbe4f78b45433f1ba59ea0b285d8dd5d702") )	(83222, uint256S("0x8086856d44490597c0caae9fa2224a8455fab54d191864e1a3be6baf3d780746") )	(111007, uint256S("0x4a469f8a954719df124a13fb5fdaf483de82a746db4ce10e79b78131591bb895") )	(143359, uint256S("0xaa1c06cb5f417f9ab24c10a88b7e4fb48b61dd5d5dd46f6536246f83afc747b4") )	(217967, uint256S("0x1f3a5fc1d203f1095dac4d6046296ea074e88ef5c6fbbbdf911e4f78e915a098") )
(20726, uint256S("0x8c5fee5b31657c018f849e7ad5281a039426d99fbe4dc09db09126a25b71571c") )	(53890, uint256S("0x196861e0b65bcdf4c2e57f654d9688042ba9418dc264010d6f09ca50a7f5e25c") )	(83322, uint256S("0xb71cd41ff35ffb69ebc5586ead940308373cc14a9ab941e4ae2a7ee795ddfd01") )	(111034, uint256S("0x51f14ad90c4c20f5b52ed262eddf13bbc6ce8adb07f00df295776e85ab260e87") )	(143454, uint256S("0xfb737dcb40d53d8eaef19cebf59e5352d62e55d033499f0c290574cc987c258c") )	(218000, uint256S("0x5fa4cb04079fb92de85a9dc6fe04e0752e7b62be7f1d81315b20c342c49768c0") )
(20770, uint256S("0x142ddc0eebe85440adb67d7223801f4595b2e1fb805bb3cfb441edb17863fe90") )	(53912, uint256S("0x010c6b72f5e29a5125cb99cc8ae9ecd3784f87ad1ae76ccd19aaa15c2800e1bb") )	(83367, uint256S("0x60e10de91ff841027f1aaf6d1c64918115d1060dd68820cce37e38faf293b6b5") )	(111046, uint256S("0x1acbc5dbcc79a565ff92d689c9c10c9d9c3591c5e0ed6d61ffdfb87fe4d65ece") )	(143559, uint256S("0x8a7f4564cd088bca302846a4b81f97daa5e28b380bd7f8c4027327e738601a5f") )	(218050, uint256S("0xfbfda928c9d7142f5e42b968c06f08b4eb22dc6c3b30dfc8c002676c4c382bf1") )
(21212, uint256S("0xaee13410ea32123f699aecde4ec9d24815bb56223a9a8516b068461dc7fc397a") )	(53933, uint256S("0xc7eeb0e07052b448487f0fc07cc2efad9bb4debc9fdec425ce7db904cce605f1") )	(83402, uint256S("0x03512ea41335a0105683c2777c9bba226a54b00c954a8f074b431d06c19e9cf8") )	(111052, uint256S("0xce63c2428a1c8dbc3629014fc12d38be6277a92d2e6d88bfa15124cdc7a01229") )	(143759, uint256S("0xf223f4fb12b258f948dbc3d931c0b016f4aa90cb6de6c85a03bbfa6b13f250b4") )	(218243, uint256S("0xe03769a0123ed468bfc4a6cabd43418a822ae72f0b2f2805f6f6b6ab2d20ac7d") )
(21220, uint256S("0x12ebd5d5c150e881c455d2ebc1fd899f53e6d465268fd07461c59e63ba050e81") )	(53962, uint256S("0x452c791a0d3f1b74af5dc4b97cc77cfbb2fe0fc176757b44af88fd8a336c8482") )	(83467, uint256S("0xd8cf8192ad26a0ac72e8bf8366993a72145e4e4291b9ffea839a0e35781e5651") )	(111065, uint256S("0xc2457c6b08a57c0cb54d627119ccd09337ca3e810058708b2a0d9a7d7f2b00c5") )	(143782, uint256S("0x097d2836e121c95a3c019d6cac67d9500fa07656236e54ae30791bad2acc401f") )	(218255, uint256S("0xcadd8cc9a162b04ec087e4f7aa86cd26899c8fca2d6162a7e50f94a4d9deb780") )
(21250, uint256S("0x4e66e042a74de4aed40869662fc17b12edd3d42c7a89a6c365796108e91b61b7") )	(53969, uint256S("0xaf85357508f3470e9512985c1409e0bab2e8d956fdad3df2a759a763d7ad5a1b") )	(83488, uint256S("0xd1397a05d0deed0259d47e4ffa6935a62aa0348ab0e72e97a1f11cc745deab66") )	(111079, uint256S("0x7ef15b49b6ee786272d94b3b6c0a61813f2fa79592bb1872467f5cf914f1ca88") )	(143806, uint256S("0x9dd0018c7ea6cb45658c1da0b8d9c02350f0787bf08b8d716dda66f75d013f80") )	(218281, uint256S("0x4ece32b2b80c40db5906e93ed56461fd391c65baa96b1e5439ce36b6802bf318") )
(21321, uint256S("0x68483e904174a3ec8bf7b8559a51a299eeffbd4f64f30606700c4049b532a4b3") )	(53972, uint256S("0xff0f76c24201550f554313d79c704698f87628641347e0bb563a7525a236b4dc") )	(83508, uint256S("0xcc657e0b58153b991da75fd61e09ce917b2b01108f8b5201ebf913d7a88b110d") )	(111081, uint256S("0xed084309d1011be24e27b51c352d64768fd5400e75b704e2b952d5e4a41b6db7") )	(144011, uint256S("0xed89930455f89f2ed6bfc2ea7fa5d8b829cb191183ad96431c59c9f09e97b479") )	(218642, uint256S("0x76273ec7aed6fa6a7a99ce8a56a3abed6d0326bd27a4f140583af931a1e875e2") )
(21360, uint256S("0xeca566d1652b58cae6a64bee52576dbbdc1296fb3497d2eb4d6ea3dbc81475be") )	(53991, uint256S("0xe9078b315d1d9e9f7880d609fa6778ab2ebddadcdab46231df90fcf3dc617597") )	(83587, uint256S("0x7277de199763b546eb2619b9bfba2dc0e70aa1775608fcb8835f6feb1502bb0f") )	(111126, uint256S("0x2d30da82330bf8137aa40e7bbd58439bc2ef2d3a864f44c267c90612bbf87ce7") )	(144019, uint256S("0xdcbd1a87c29e8b8861b0e4345950257de3325bb14930decb3871a897cac00518") )	(218778, uint256S("0x4252177b4dbdd0bffc5b4158ac03968e682c1c078ffc986c6e45103ddd58f6dd") )
(21457, uint256S("0xf658a5d94a99afec4522d7a4dcbee14968d3de2cf7a517aaecc15bca34667f85") )	(54008, uint256S("0xbf63ce73cf378e91f7a1c11c5dc5ee013f8127b4f2407f65d684eaac87888fc8") )	(83660, uint256S("0x6d958b99e118daab5f91902407a284e85632a56cf77aa7f116a9f68fe8eeae65") )	(111137, uint256S("0x53777938f7579a2dc473c0eacb283474f0d44e6db59b037528e83fd674a26800") )	(144090, uint256S("0x39f8052c117689604743d7e1fba982c5dfe038059976e732a5d48eaac718dd5d") )	(218792, uint256S("0xcc42c304b4757d235c5a74ee8b6ff87f2fc4e5b1a71f114a9e635ac33b441c1e") )
(21566, uint256S("0x016ff889d547e8e8d0e1dc48a2702f6c5602d9d297cd8228da7e58b063f026c3") )	(54060, uint256S("0x0e964e0e94480b229dc4ecf8e9179771a4a1799b7f8a2a99ce6f29869691d956") )	(83821, uint256S("0xedc4231dfbf45df4cbea25e2a4436c066a9c1d280ddaae3c58667a68ffc0df1c") )	(111193, uint256S("0x27fe027b7a4c96328dc534710b0031ecc99bafdd5e1b171938af6a543ea1835b") )	(144306, uint256S("0xf082ec2ecdd10af1b8450d002f026320033ca220ae1fa08b9b4ada713ecf6e90") )	(218878, uint256S("0x06075088a1ad93a38d4ebd7e624f6f44bc33b128e170e0ca41944cb66149e2a4") )
(21587, uint256S("0x5d08383b08b2143f0891b01ff95c4f259e6f93b7fa9b86c8c2bf4a6d2f374c10") )	(54093, uint256S("0x64a4e1d7e2098d25667f349c7638683ba186692b994aa44dd9971fe2e584aaf7") )	(83893, uint256S("0x3a7bfbf61de24ca4eb81f75a99fe5d564c6b858fa098dbbfd5701548a819d8b4") )	(111206, uint256S("0xdf999435866b88e750b3d8b19108f325a1f13df65a84b11fd822fe1fb1fe791c") )	(144465, uint256S("0xf3ec12946857521b0ae9e9e3142251a834131bd9036648a99d92052b0da41779") )	(218888, uint256S("0x4989685c550a9d6710fcf7c93a5a074a492810d0387ed3f993259d169782cb1c") )
(21591, uint256S("0x0c87e99ad2bc58361d3ea3332536819b461996c641d7e4346ce72712b984dad2") )	(54186, uint256S("0x2a59b1b49455214a0f19ac6e2ee8c41af0e1d1a542a6df886e80d2c38ab2339e") )	(83928, uint256S("0xa43a2629f049b3c0c9ab64f9af2e7b3bc18b53eb35e7d9c7bfe933cdb7d32dad") )	(111224, uint256S("0x25eb9c8d0b42a0e441bd41723e05e053a6051106834c50f7b33d3c2a9769c602") )	(144806, uint256S("0x9dec2147d6cfbffa4897621ffbe184886386366242533bc6904ea4b1754e6937") )	(219121, uint256S("0x8ac1a85dd200d83508f9162991f93091806c2349f89e1fa0d4d6c6cbb2b0dd80") )
(21612, uint256S("0xad952ed184f6f6fec6b2526ac349ccbb2b6e22d23a8a7ee4fba1bdf79c8f07aa") )	(54189, uint256S("0xd2f7d7d9b3fb684f6b64269f774e9c1f63dd74617cb56dbc153f86947bcdffeb") )	(83953, uint256S("0x0ea40e78e5bda82adcf23e0a024f643a1318f8ae6113e513166535d6040e57d5") )	(111252, uint256S("0x1200171c43bfce300dcb2f7156f36ea3464d3f6edf8526504780803b3199be92") )	(144821, uint256S("0xbadf44b225cdf8980cde34cbafeca86c4238a16ae81931e03d04861b4b69bdaf") )	(219172, uint256S("0x3a09242f5cecc47ac9a76854f30ed8b54c4e1fa94b99193b8b3ce205df850d51") )
(21629, uint256S("0x1ae4ca8d6a1a7fd406196f91c4b521dbc639cbb9b99ef5c8fccbda1bfc34d81c") )	(54246, uint256S("0x8c029a9e55f3eb2266772d0912023d85aae76a60b348679249a5229c0d08ae4c") )	(83963, uint256S("0x690b7e905d4956331583ae86f9979078f339e590d354543d5a0261399b03ff22") )	(111281, uint256S("0x0ee620660cb4440df28e08e2726fe9524e533035eea62b6e38de24eb179d2165") )	(145073, uint256S("0xff2667c1d2e322e5e064df1aec6f67a4823fbdb3ab5072f7671516338d84a8c4") )	(219452, uint256S("0x61849cec7a9e660cd92d86c6ec0625d10c90505ea989a840fa7021952e5f13a9") )
(21643, uint256S("0xb496de95ce6d8a16407534b8fe82aaac5c23261495894014f9b34cb8de525045") )	(54355, uint256S("0xfa1b115513169b8133b388de4db4c2caa46b5b0afe264a78fb59e3171d601ddf") )	(83988, uint256S("0x602600be742613a10f6d8c71e4d6fcb5bc6b0c228413702ad5d1b72a26f8c5ca") )	(111353, uint256S("0xd31974a39f605e6c9f0489563fdab89f6a6bf1a73d14930c4e3d9df3dd214431") )	(145092, uint256S("0xe49e1193dfa334e342f451624c51ace2c69a1a87fc64788e0b408ed64f9ec2f3") )	(219490, uint256S("0xbf929c2502f67c2e50755b2f81625008939f434811672745ca0f87d61d621b95") )
(21652, uint256S("0x2fd009a606616cfbc0b149f7e61557f86686c17ce832719f4327daf1aead1acc") )	(54366, uint256S("0x942da910120280036ae5633a75604b70112f3d6a1f0525729068da35deac1ac4") )	(84036, uint256S("0x048f4e5f168a0e8993bec9b96ceada1a2d6648ddfd4044403109fbbf61bb9419") )	(111362, uint256S("0x1f90903ee211ef54c89675894a029a8a4b6a88041c3651247807da1f23520ffa") )	(145320, uint256S("0xd77d16e352eedd5d12ad4a2c9ab2e86423ef1aeae1981e124ea5a6e2df897a3f") )	(219656, uint256S("0x9eb7d5134685633aa9b7664243615c48e080da84bbd3edcb5f7d7f6b54cc1bbe") )
(21688, uint256S("0x86ae2360bf66e5bf0f0c26ca1a5a494dfd8f393050e14cda3f89ba8ad9e83fa0") )	(54530, uint256S("0xfd088afb2007abbf5282b168affea13041a834eba5fcef72c6f07125b3f20016") )	(84038, uint256S("0xf05c015b5f78b780a2d4fb4e04e0935ffd1221d65be815d056c3d10c6ef6b9f1") )	(111476, uint256S("0x3c6123bd2896a37e781c7956fa2c74af142ab7660f0bc6bc8ec86edf25e42379") )	(145477, uint256S("0xb33bcec0139c9f4d323465d5c2c3df0c38f283e41a9a82c2bd8663de72559b97") )	(219727, uint256S("0xf412f79e93a8de92037fd1b87e2ded7950c0b2d55925b7bf29b86e2b6985bfe1") )
(21714, uint256S("0x4091fc0304cae6aba96a8120414acd76f26e2f727137dfc498bdebd1065bd3d9") )	(54558, uint256S("0xa5b0d89c05ec045e49fbb79577573011cdd813bde3bae4846c97efd6ace9b3f8") )	(84045, uint256S("0xcf64b25d7a95a981b99c31408f70507e83294927f0be8b188246882b798bdd6d") )	(111488, uint256S("0xcfd1805070bfaedec627ab35bec31e201a489fa2bf575a9ffc1a60cfd4c90a49") )	(145503, uint256S("0x4831192940f16be5f93d9238f52760b1aa998b589d61b0b7922606a09c08b5f3") )	(219817, uint256S("0x0e60d974553869f21dee66e1cba28c485472cb51443526f315a518b340ddb6b6") )
(21770, uint256S("0x023fdbebbc1c4e4b13808900ef5edf48170d0565ed66f6018e06f1776f24a8bf") )	(54613, uint256S("0x9357e5b7516477a9ab78d65517ef50477cbf6cd71ca73a196f0b651e7272a484") )	(84073, uint256S("0x3a994ee4b1fb7ddb075aa6fb1146d6d2318b1a5d8708ff737fa5d3b764b93f67") )	(111523, uint256S("0x33583287e54048fd4a15295ae1db8001cdf4a00b85a9aad5d563e998cbb7886e") )	(145671, uint256S("0x60e43832edf3c863b61954309e69fc614fc44c4936f12a891c62d2b41488dcd7") )	(219904, uint256S("0xcb4f1b1cccdc34a080cb924f0afdc52299848fdccd2f8857c17bd45a6be82ffc") )
(21838, uint256S("0x0faa317b4345b302a22640dfbd5620cdf3451c4a4b1d00362fe05a81a584dcbd") )	(54666, uint256S("0xc6a27d010a8a43e451304ddd386471dbde68b780bff8e83df5ffdec0a715a380") )	(84102, uint256S("0xfccb49486784ea59cfc1cca962bca26bce897f9c9ae9ec54dc56db70ccbf1e2f") )	(111564, uint256S("0xdd5ef41c7de5ae03832e849ca2c914c287bd4784b7835ec4976c7c245fb38a4d") )	(145897, uint256S("0xb5879fdb00198c176976dc06b8776d6f97482fceb35058383938da67654d02fb") )	(220080, uint256S("0x2aae5c2db5015d6baf110c4160283efd9e91e21e1420abbe40d676b193b8fc04") )
(21847, uint256S("0x2849e2ed73777dfc1c4eb0c1f399078a3189437e032e354eac34f46c69fe66ae") )	(54757, uint256S("0x2ae67f45af96290604fe99e5044bd7274bfdf7a64975fd7bc9bd9374cf07e8d9") )	(84150, uint256S("0xce6eb872ac7509159cc08faa9f58b7d33d0384886915dc3634fd127a9a955a4e") )	(111596, uint256S("0x07100e21aebed45d81e0a2ea8f841b3f3e2b01ae0a7c60d0f8e9c5bff702b3e2") )	(145983, uint256S("0xdc5806d2661839ce201adb51861465d98e86d71256910701980d3cac4fb6abdd") )	(220185, uint256S("0x84603202ba013fb9b5730a8bc63a7ebd13a9bd6d6ad0e011adc0115c7b6e29f8") )
(21938, uint256S("0x18bd95d0700ce3bf7c254ce3781ad1dee8506e545d0e2d53cd80a4f3abb46183") )	(54814, uint256S("0xb9713d81f3cc18df96cc7f068e83c1ad2f07e72ca767f8bbbcd70698c2889b93") )	(84216, uint256S("0x5dd206f26bf0b9a8eb9ab29c6413c903d6022ff28cd32e6f0a16f93e282f6167") )	(111605, uint256S("0xeca8caa4ebbff2892ad21bcb8a4b91362eb3416129710e7fb616a05b1834c590") )	(146037, uint256S("0xd8b0f35406b460ccbc1d34eaf6340dd919e8574a2a81f76ec1033735776fe8c3") )	(220191, uint256S("0x18e5892a79e5e0bb69e732c480449e1a0c77057cd85e81f760cfcddd161c7a89") )
(21942, uint256S("0xd12e56fc71f738a9a6d4d21f7d7f2183a5d77ef8a4dbbb40fa3227e2c7aaccad") )	(54824, uint256S("0x38e0764218bd5a8ea6b17193560415fe31632d15085953a48a560b27b5f35f6d") )	(84256, uint256S("0x9b8c46ceac0020988dd12a285dd9e3f5229bcc68f09280cc94c1f4a0d37ed723") )	(111611, uint256S("0x623b31b1b288bcc4c91bac371e9e2ecbfdd353e6ba892a00dccc752e9ee0c67a") )	(146079, uint256S("0xd64fc0c6fdd90151a3087ebcbf2de4112da75de563d2f96846da37b95cd3780b") )	(220215, uint256S("0x99c71edd54af33234bc40c4420b0c6442cf854572b2eab06ca39c85d47b91dbe") )
(22098, uint256S("0xbae7590ca5ddd5616cd0b7188dee39e6941d7aa3204ded1fdf0977dfb7e32c90") )	(54828, uint256S("0x0888e2844c83b87bee7714387082ebb4bff07aa9d2301550a543de06bba5df44") )	(84303, uint256S("0x0f9c982a95f46a9b5c54ab50bf7123361ee8151b980dd1ea15b73dab4f51aaf1") )	(111687, uint256S("0xa867cd25673ae06288feb3faf77139bf49584378b9b9d7d50713927cb27120d9") )	(146419, uint256S("0x9b6e59ab2b4956eed0d21c0aff4e6975c41be23365acde935e1e3322bedbf4d0") )	(220238, uint256S("0x78e66a519c6766f22d514c706958498b3b9d787e976f1458dae4f9b78f093cfa") )
(22108, uint256S("0xff71fd163b0ec80455b78f5e265176f1f75fb957efed2446be08230a291e0825") )	(54896, uint256S("0x159f6bca85480f5e660fb05fdb27c0e7b469151654340e39c8fc88c618969bc0") )	(84337, uint256S("0xe1651d0ebbe784a770fa2ddcfde12e8b950553de1b3a705cce50a4f7ed4ed5eb") )	(111691, uint256S("0x304f356cde7dfa2a30d040f066f9e9990e18e7c57e6af1222f7abd4cf6d5147f") )	(146518, uint256S("0x3d76ebf76840bc5523374f3c6f314409600128f2523baa2fc92c16047de18f1b") )	(220254, uint256S("0x3d430a0f5f7720fed38a3eaa84e5dd8c53fa042a3dc278f70c6fc6094567ccfc") )
(22269, uint256S("0xf192accedf9d5c2de88c8edb9b8a46352fbb183b6f5a6df959dfe5d3680643f3") )	(54960, uint256S("0x3bda8eb8e1bf741c6baaf21811881a441d327aae7968517dd36d2c85fc97d42a") )	(84362, uint256S("0x1a17eebef24d4bc9a1a77bddbe1c4119662860582627c0d4e55511a6ea3178f3") )	(111699, uint256S("0x9e8def3ed6eb7613aa8ccfee371dd41110675b7bf4d2bb21a65649cd3f690916") )	(146581, uint256S("0x0f981897eda50067583b74a2ff7487c242e050abca92184022ba28517a89baf5") )	(220259, uint256S("0x9ed324a39e5983b85e11f9eb7bee122eb67faef6439ee9862810b6e72ec96553") )
(22289, uint256S("0x845e6ff5a457fea7bd13f48a80ab87464a7616680dbad28ce8f0c85e27113f1f") )	(55022, uint256S("0xe1fd31dc1a84f70ed8ff390708f4cf1591685122954728171f01cf3bff928f1f") )	(84408, uint256S("0xe672d95409cde978da03256a63c17308b6d4240f328fdc6e359b0975d6319ee6") )	(111819, uint256S("0x797157070247d483731c6dd44379e2bb9855809e2e46666cfde43adb2784158c") )	(146742, uint256S("0x6d7390498bb8103c29314cdc26f581b59379b9653ab0c31a9bfc8d989c9220d2") )	(220272, uint256S("0x61f80ba9504a0ae753da909cdac82a2bd02a276215de79b18d86d5c0b74f195f") )
(22309, uint256S("0x9958a1606dad08b05b72215bc23ebd4296b851dd9963e1e211319c5c30861c36") )	(55054, uint256S("0xed5c9d40230c6c15c67659fcd96a8e1e4bc523a596592737fd1d4179c0dd947d") )	(84420, uint256S("0x5219e7f4ec7396ee9b22afb47505c3a2576e88384d934d55029830e09871b2b6") )	(111821, uint256S("0x00e6d56d2fd3fdda57ee657c42b3b132437aab7d36fb7b467d8be4ba800a1534") )	(146789, uint256S("0x3b522274f224d6b208b2aba5e3aa423e81074994dbaf5ceda2b75b77c64ab6b4") )	(220399, uint256S("0xdf0341e72568a9c9dd2ff18f750d05d8ea7bf2b38321b2d4609f9c9c964f478a") )
(22436, uint256S("0x3b5c91854bdc31a312456a1beb92580bb4b8caabe1eb94718e10629fad4c2804") )	(55092, uint256S("0xde48a05e8265a0f727135a78132e7e88b9c007f2ca61e68765538e3b5d941334") )	(84435, uint256S("0xec71ee917feb2c4add25597ed5255b871373139a9aee2717f574e116c23c05f2") )	(111913, uint256S("0x5bc5df4ea32d4a246971947c71bccbb8d72f00679269f9ee662ebf8f03757fce") )	(146911, uint256S("0x68ebe429707c7411ee2752a000c081105a83df4b1a6e2e88819cc7d1d0129113") )	(220500, uint256S("0xb57badc2fdfc8aa795d996aa04487b0406e6a31c3b0f2f1791df9e66770a8109") )
(22470, uint256S("0x3787d39071d0e8eb0d9ed3a120deb3cd8e8ab6d20b6945d8c5d4f855e994e72b") )	(55234, uint256S("0x3de3acfa1937a5b178d9ce16a679fc0c85d1374a728506ceae162d72e41ed303") )	(84629, uint256S("0xdb19c98789f4f5f321c189a72d57cc5687119230656623e2fb7917b101208a41") )	(111946, uint256S("0x686bf49e1dc1716888a8a3016b71b204e4cf2ef3b9afb4141fa47bf51f21a823") )	(147077, uint256S("0x908fe8a416e70bbf5892a7b0add88d5dc71e6c83df23d95b82a947d99936c926") )	(220632, uint256S("0x1f93a312b4ca42ffd8e040b434dde56ae34e3ef40f2e8ed56c347f1c9c705001") )
(22520, uint256S("0x62ccf8f1543c227410b455156121ceb6cf244d48ede152b56d89b784c9cdbaf8") )	(55239, uint256S("0x6ce6b04561ed3a91c04775fe19d4d85f933032bdad1928a07bde18753dc491c4") )	(84731, uint256S("0xc10cebd57365827ca4f6ab60178020ab999ac85393e895afe9bc6d2cdde0da45") )	(111961, uint256S("0x13ac065821a53a3cb3d67ca55b30d367127cbebe6465b00caf5b9b26f18039f2") )	(147107, uint256S("0x23df6625785306776407188216cb64c6156bef160d809882831eeb196481db8d") )	(220697, uint256S("0xda97d48f4475c04a303801b07953a729b10d46ab13c3362ca8d9fbd9cf183102") )
(22715, uint256S("0x19886237d544126a0c1d04be519355a9b5e90e37bde56664329383e285669eb1") )	(55307, uint256S("0x216c03c7f5fe11ba502e0993d5dd54d36b6e1cc8d049689b220a445d87069b6d") )	(84764, uint256S("0x3ef9dd7110cd313bb2bc270086809635a46718df9d4cf2a63da41b9605c7b32d") )	(111966, uint256S("0x162b52bccfd6c1446e143a9a6b05fe88cbd88c346da7d6c632a19c0b31b3e179") )	(147266, uint256S("0xe5b55dd93dab018980eb84dd5d5e55bc460e8b411e946e17346548fd6c7325e5") )	(220974, uint256S("0x2cd37e587107c21995b442830299f4a2eca5b9801b33ee08c01250813c4e57bc") )
(22733, uint256S("0xd07e4f4c8c5c9e7afd02539874c64428a89162e74d9deb8546aa366440c23ebc") )	(55309, uint256S("0xcb3a8b8347d513bada1260c48124c4bf947c858a918539b0ce3dc9bdfb2150b3") )	(84769, uint256S("0x9e9b9b8d1a10f4ebd0463aef25e3965b0b3eee95fdc3dcc7d987c1db38cda44d") )	(112133, uint256S("0x22ba25064a9059e450d4190e210ab2ebd15617b4a6d5a89db0f2abcacad633fe") )	(147343, uint256S("0x9ea258746c54ab5730e39751bb98165ea010eb907aef8a60bcc9521b9d2409f7") )	(221026, uint256S("0x73b504591a371c4cb79d03f88723558a48cc4bd144c401e34f2372028ced4d81") )
(22740, uint256S("0x0362a8111f90ba90c4aa524bd140205943eac049be28620e0e7871274eeb046f") )	(55381, uint256S("0xc3f789e3b07d390d4d15fa3ef5de910a01424ef7482f5a02904d8a9bbd2818b0") )	(84785, uint256S("0x1d3c5bdbdbc189740f753c37cc30ccfc92931019295f7a7884775ffa66e8905a") )	(112194, uint256S("0x5f3cf8fb6a56bda74b02e014e5f1296ccc8a1358c83c9aad82b180294cb4a7b7") )	(147506, uint256S("0x13b1c8a1109bb8cf82b09e5a0c81d6525adcb38f41a12a9dfba15a64d575e761") )	(221410, uint256S("0xfda20c98d9dd99afceb886a17117b4f77ac128b46f3dab015530513dc129633c") )
(22763, uint256S("0x0369c7b5750b95ce5084e1496b09274373e382a2e603627612ff0b41858e885c") )	(55434, uint256S("0x652dbd30d52a1781cfdcd07c3779ccbc188a153feeb1ded861156156d11b7a98") )	(84811, uint256S("0x9dfa938fd0dc4242cb0925d390657409b6f094a03cc34750d840b3d3e420e065") )	(112219, uint256S("0xde65298d6ca13cc81418ad63e81cf0b0d21bfa38b42baddc6bf1eefe48bcf44a") )	(147534, uint256S("0x1aee9975647842c993d20e434d1b2580dc20df22fa0a5f8898ef0a9dd20323f2") )	(221444, uint256S("0xadafa30d1a36581865ac2cf49e5c761547e1928a0f494ed2072db7212e6f5474") )
(22820, uint256S("0x369d5ed80e27e760484cde7ead9c8429d009515478f01ef027790d6460c39128") )	(55534, uint256S("0x9e6cc88e8b08760df74052ddfea797669fcceeedb8f4ed4645de053108a172f7") )	(84858, uint256S("0xfcbe9794b94f1d0378fbb206888dc4c5d6c46282e8b90f95a110c7c1ba1c66b6") )	(112235, uint256S("0x9e06c5f550fa6d444bf5e4b98d59e8bd4b8c35b2c2fcc20d7033d8f1edaaf1d9") )	(147619, uint256S("0xf65498603cc83e6567b7e998dd1dd7d08839102e2229eae750f18050154f2ece") )	(221469, uint256S("0xbbb8ca1dc8e4a9542053dc8b72ff9ab8bd2071f1a953710daa9d2da3d5cf3b0f") )
(22874, uint256S("0x9e75b0eab9cd857eaee294bec8586dd05fe357d434cbeec83010e47373b34640") )	(55542, uint256S("0x976643adc0353efc3cc65f4c037831ff61fdbe74bed5b2da18cae03062ecb398") )	(84873, uint256S("0x17eb7c11083aadae4379fccfc3ff0d390e4f9d871bb8134e64f0f9cde269d6f0") )	(112265, uint256S("0x410f742e12b6fcf8bf07c010f1f0673a8545af31acfc806bdd59c4d20c2611b4") )	(147710, uint256S("0x1621cbe896a587d0e247e494baf004f3c86934567fa41a39a4472d25580988c4") )	(221541, uint256S("0x4c9b52cb06f2989120391adf228d81e3a709815e2ab0aa8ca85e7965933cd298") )
(22891, uint256S("0xcbcba4628cb56d99da76d086533b1000788dec302d6623a34a20351a65982450") )	(55613, uint256S("0x0bb4f12ede9fbc1a159e20d3e6484e12e6cb6d9f0a6df794f143c807a056f269") )	(84934, uint256S("0x6ab65c5cd4147d3d5673fcc968f381fc323e992a32c2e6921701da318544be67") )	(112297, uint256S("0x9451768c1b4c5936f664c39fca870180fddaa928483dedb38c3007371089234b") )	(147732, uint256S("0x7bdfc1defac72b1a55c082ff7ca1d1e4f47ca7a3ccf6712a0d7ccabe9d7b50a8") )	(221673, uint256S("0x09555ff11d804b3c1b2c39f45b1fef73436553d72406d4a6e0717a85cd7f025a") )
(22915, uint256S("0x0e3bf41854df8a6d49ca76329bcb68edf36df03896e8ce3a8b566bda413caf7a") )	(55637, uint256S("0xf5e9a388efd126a0bc4eeb0d9851332b3287873cc476657d47de134109686c2d") )	(84951, uint256S("0x4e4d562d550ac59b2be70f01f313a4d99fee195840fc84b3a1178dad58731f3d") )	(112354, uint256S("0xd7cc45e5e29392b3e4f8d70f322aeaca9dcbd3f1cc59806c832f81da6caecaf9") )	(147771, uint256S("0x9c6388c685cde6745540838ec7959e790b296df461856bba9f83ade57456cad2") )	(221699, uint256S("0x2116e0c24db6c22d79e23ee2db6bafceff9d0f122a4ddee152477f960c0b01d1") )
(22972, uint256S("0x2e57456a5fd350cddb1bc6402d27f6a9fb03ee8c660cf4923f8d84bc3b5e67cc") )	(55767, uint256S("0x79113e458784e609f5ba2867473915cfeaebfe9f72b59ff304a36ee7f41063b7") )	(85011, uint256S("0x8a37fa77d9adac62613bde40b84b74f0d750563b0ab6edfebb5c4956a20122b8") )	(112437, uint256S("0x2ffb4ffd8c13dcd2b328c0f4186da305c6c7218007e0d117ee2a4cfa04a2454b") )	(147948, uint256S("0xe23cbafb4b146d0e8b673c5f644bc0cde6ea70cbfe9130b34b85819ecd86f6f8") )	(221715, uint256S("0xf783512972ddf430184156de041a4aa2f38b8ea10302c214242cdb6ec2e936ec") )
(23025, uint256S("0x789ac95423d076a365825550cca0242628cb906499f1ded106fd2cfcf1c5a31c") )	(55777, uint256S("0x57003d2e00483dc1914007a734e465a1004c260de4c5193947f30d35514f6a83") )	(85046, uint256S("0x93e094305b056061b139da10d06d68b24e251ccd56bfa801cd389bc903fd7972") )	(112448, uint256S("0xa4785204d4df459a84cf73cf0b5b421fa0773bb7cdc23511ba378c80b4978e6b") )	(147983, uint256S("0xbbe292a415b00993f2840e551e7966a4f5b03709f9c630968074472886c2ba99") )	(221909, uint256S("0xfdfd75372f7712d424d5dbd59e43d7f46287f6a04799ae35a83498016b49d2f3") )
(23040, uint256S("0x77255d0cf91b9e304c65634bd4864408d1eeca1aa8ac2ee708d52689a13ec6ef") )	(55842, uint256S("0x0562bc39bc05165dd9bc7a92762d2b7ab580085aa45310b6f5474941bc0e1241") )	(85063, uint256S("0x81413b2b261e398a02b9d8e9658dd01a0004a324203fe149109064938a96afc7") )	(112576, uint256S("0xcd9bdfd2ffadb762e63a49f015c481461701e32a2095db9ac79a8f47beeee450") )	(148024, uint256S("0x964ceb825a24908ed386af0ac7c8568a8a152ee1cbca9ffe4dbe935f28b3de52") )	(222008, uint256S("0x75af2738dd37074127ff19562467343f80d9b15cb6a2f9de4f16d8b51ee25bbf") )
(23109, uint256S("0x08167c9e6f986b2594a93c2c27cadd070c553dfa12ab6a45ef84bf645446d552") )	(55844, uint256S("0x99e70a0eaaf4840efc5b1d795438aaf12250e1998f17bd223fec054dc2c23488") )	(85168, uint256S("0x95d6d21b355b6001f92cfd4a0682a0a5fff0610fcece65b51c640f15c8c60613") )	(112598, uint256S("0xc9e58b60d1c351dc09d9d41a35aa35a721ad5396559c166c94c62801b92cdb82") )	(148199, uint256S("0x518780b7acf74baf7eec310662a0515714000de4128b2b5e5d493afb0bfa7019") )	(222019, uint256S("0x6444e52a23d2dc6f8335e47ccb572c5240b5dd148d0ec722c3028a2dc5899b22") )
(23130, uint256S("0xa5aa53fe864ef6af6f76da2daa2fbb7c7477fcdbbf42b93e068753fe99e6069b") )	(55880, uint256S("0xb6bb1ae691f41541a298e23a16f04f5d7789d5d6aa9e1c68e58a56718824b878") )	(85234, uint256S("0xc9e0f83d3b5ae3471b612c4d9d75b244a0bf9170ac1137e3cf0a240fef348642") )	(112615, uint256S("0xd414a8f6eb8d061fd0663d6b3257704de9de6fb8d67e14c050a2dfa67bfffab6") )	(148479, uint256S("0xe7900541959a11c2d52053f51ceaa309aee4341a4a902c6e80e8f7a8caed2236") )	(222045, uint256S("0x094fd409d8a4ea3f70ca9e7fa323def46b6c21c1353a0b68c397d2e6cbd0f21a") )
(23275, uint256S("0x8131a34b8ac2823961e8405c247b2400240e7a92c096aa0f371363ff790222cd") )	(55886, uint256S("0x23c255b0155cd5a771e5c5a092520bf4ddd2083d668dbfe2346d52728eba006d") )	(85331, uint256S("0x5b78771efd5e32f99e109b9edaf8166b96a3d732f1d4575a6789c1c9dbd0e6cc") )	(112683, uint256S("0x4f78247fb3b22ae97d570dd72bbbf737bdd3ab59a54d8eedef33be9fa2c74c46") )	(148737, uint256S("0x076efe77452d9038085915fa1d15e910f79a54d32c5328d7393e1a2670da8a36") )	(222052, uint256S("0xe189d8e31db6655100a80f8c7acb70f4603060cfec7c05cc70348825199ab6a2") )
(23322, uint256S("0x09d72e0059e93a7524645879a47a372e9176cdcbf16b2844eb68faf8dfd56d08") )	(55950, uint256S("0x256532427a8b05200309e01fb9b2baa4631d2bcae84f079589abced590f18cee") )	(85333, uint256S("0x8fdeec0f2e051b6998fd1ecce8e955778d1f8ab3cd4bf327e99e3c836d1e2632") )	(112700, uint256S("0x98e7394ba0d92760defd63b8dd9d059a7fc8618f9f2c304e819d2bd8e2de9805") )	(149068, uint256S("0xf3985228f55597f041d91950cc9c5c6bdb3cdf9c90b19ac2048c00f55ce6b441") )	(222283, uint256S("0x81eb15bd263f3b2a573a129e3789d9c284d651b0bb0fb67a2cd8f1fac8cff1c7") )
(23367, uint256S("0xb003bd5d42f0fb3036cafa8b6ff067c916963c1f87828fc6050f7c8a04abbfa4") )	(55960, uint256S("0x17aa68b7a059a5ace2b1eb53bbeb345ca63e5f074dd2b59a9863b4d6e23fa8ca") )	(85344, uint256S("0xa0dd5c643581fa41f02d70c950ddba842662e0ee15f56ba3f2f4aee09cc41c63") )	(112720, uint256S("0xa7dd692428f8bba1b2ed45ec129cd1a5d3c1214dcdb648e587b9878ac998f136") )	(149119, uint256S("0xc625480771c4a3f25f65dae958da635ea33506bcf66dbe1417aa847d79de742e") )	(222582, uint256S("0xa60dc6258a505734d50e1bd70ef4c1e1b78514e996caa0a4dfac774d51f319f3") )
(23385, uint256S("0x3ff97b736ab203d56be4e5df5e35286117dabc5cf7eb9abd047294617bb792f6") )	(55973, uint256S("0xc96d3009420a11f5034203613a0d1f070b1d554fb90d189b5d125d0fd62f231f") )	(85351, uint256S("0x3b9d14fa406842eab202b36949e3517724f7822d978d038f57b4647c2593f0f9") )	(112742, uint256S("0x6f596f500f6179b80d91b09223d7d91faa762561bfa20873fbdbdbb3a29098d1") )	(149254, uint256S("0x729f3a0f387412af39ebe34bf8d529cebbc1310fc910cbf7a1699ff2f547d593") )	(222666, uint256S("0x67e66d374654b1b59b7301319324590182c16d5ba3c17399300a585a42392a85") )
(23435, uint256S("0xa1ed042c068169dbe830ba6977cb7a76270d5bf2a2f86204cf573052f33e88fd") )	(56034, uint256S("0x198bcb6b2a424a4dfd317620cc3554647f4910441e7434835a19dabc5cc5195c") )	(85395, uint256S("0x164c1f6bfb045416352cb55590c120159af125c1c822b9f7f7606e687b044c9f") )	(112852, uint256S("0x14d1025e026b9735769c372e210b85fb8946ba4408c9f7a78b8af05dd909bca3") )	(149353, uint256S("0x817b2b0d4021568f7d88e4e2fada49af0a158dffdf111231df5b77804cbcb72e") )	(222739, uint256S("0x83eb906f6f2f19d806c42d1412488ea1c06aa2b9d445da82e150ee17d7084cd8") )
(23467, uint256S("0xf26c1248a238d486db98cc8c54f099bbb468bae21bd126fe42c22bd1576bdc54") )	(56091, uint256S("0x28d6f23229cfd919767cfb3377f0219e14762cf67991be4de2f2aa9a5f704a96") )	(85463, uint256S("0x8427da1ca7afeac9a4169515b1f6b0f81cf7568180e65d8fd95ded1689009faa") )	(112907, uint256S("0x3226c3ea9d9bc0ab6e1d7aee8fe6792197ec3fd229f82976f41b36cedf8a944e") )	(149360, uint256S("0xa2fcea4958d16dbd2bdd9ae6aa389fbef6a8faaa4a9bc2566fdc1b6cf9b0e6c7") )	(222897, uint256S("0xd08d8102f0236a5c315d0ef17fcecee0b1ed16578d6f3d1d2f872f45fda813e3") )
(23494, uint256S("0x70cc40791b2267c4da4500ff8f792502af8474643a635d02e3e12c9ece0822ef") )	(56175, uint256S("0xfd9a0644f32408d61419235153ed9b496aa44b5e86ef98e21d44f1f6e39090c8") )	(85474, uint256S("0x095b1681d00ce13a47bba74f93a254dd89984e34a57f6500c94410bc12af43e0") )	(112924, uint256S("0xdbe89e6cb601f3cbd52746a59823598b732a93d4c96bc58b391d68bc8b355f38") )	(149473, uint256S("0xadfee848f031d3cee5b23e62208255f999f834b8e75225ee58be81c3f9b88d72") )	(222900, uint256S("0xc8c773dd0c0e7d48cc9baae4b201afcc3e7e9b853b5f0b4f278c0d5af5817dd1") )
(23512, uint256S("0xb21d51252d1f2be8c25883552ad2b03ea506137ef4180096de3780d2195c671f") )	(56212, uint256S("0x2ee4a373790678555e0befc05350cf2d365159ffcd2a8db466809d5a2c7cf86f") )	(85477, uint256S("0x0d9ece1d11efe9a0e509b47447ef6c0e8190bbc38c67a224f1d4de97ec3c7057") )	(112940, uint256S("0x37b92bcadee499f5f393a47da3ee7f481173bbf3647f63b4ba0144ee601bd448") )	(149618, uint256S("0x33f1702e6d999240dd1cbecb5f5d4e9038e7657064377782f689324955e1b6da") )	(223073, uint256S("0x5847ba600123061b2b77b69c7b3ae7e13cc0c8147629e967409ca92e0f815cd3") )
(23520, uint256S("0xc6b881d1d550ba60059ae5ca1f25d9759e721908297c62ada34ee000267acb29") )	(56231, uint256S("0xd010bb99d53a71fc665def6739eaeb327262d5471a6de290fb9434b38f21a8d7") )	(85494, uint256S("0xbbe67f203806a31be82ab73a2adcbaa53fc088493a38bb981dc00a66914ed127") )	(113021, uint256S("0x072af5b6fb0f0211381861e5be1b1d9343d4862f3e829eabec51149830edd97f") )	(149651, uint256S("0xe5118656c8b6838cf2008eaf79990ae31e385fc9ad91673d087e6ff36aef8fb8") )	(223238, uint256S("0x7d538154b8440fb8813a2b39774cb22c44d4c790037544a191b3cc5846018752") )
(23540, uint256S("0xf8a4be146cd1a55da88c938219bd0ac340956e7aba88947ed158baa24a380a93") )	(56247, uint256S("0xac4517d3b1af85bf8788b163d623f3a3aaeab6df91d78834a7d51d22e3b0ca45") )	(85522, uint256S("0xcd4f5896ceacbafd1298b3a43eefcbd2846889d56904e94c69f5cdd9001dd773") )	(113048, uint256S("0x940243d9fdd3abc9f82f16812b7402d0150cd572235a9b7786be2829cc6b9c6d") )	(150041, uint256S("0x9b09bdbb16d0f6c5e9edda12fd5ce40bd0c8bc47e70b0d038760945504dc08a5") )	(223273, uint256S("0xc11397c395a142b05a7a4db7492b18a3969a309757f12d5b20ec3fb060222bb5") )
(23569, uint256S("0xfadc319f1267e61a5ad121665af81147df802058e394efd5e2bdd71543001add") )	(56299, uint256S("0x5483cd54507e272cc00e3e6291c92b9539a434a0dae50384b2f6d97702672335") )	(85568, uint256S("0xef941d05c487e06ebb4385281274d1854ccb322ee566f2dac3fe62600bb79536") )	(113102, uint256S("0x6e8276685505f467ed7e24b4df4aaf39a5f53ff51315aa4c97c45fa846e94663") )	(150047, uint256S("0xef6e61b9366607ea3d44e1dd5ea288a163d28e08b06ebf49a62b449331c6020f") )	(223637, uint256S("0x7eb9cd77c705855e58080e2718a74e98f5ce894862e6b5e5eb6588c2be9e81e6") )
(23623, uint256S("0xaacc1e52a3cb47cf18a37b26bd2722932c3c9c397d67716732200ff9c99b7816") )	(56373, uint256S("0xdb908d046ebc32e71c72ec7ab1a762d231953c0b8c96bf1cbb6a6d16123b21ea") )	(85599, uint256S("0x797bdb930754ce0d4c033f227343e668b6a18f1a4c7ff992a2506d43654aa997") )	(113120, uint256S("0x10d9d01b91ee7e28ea36febca23b85b619b167c0f30475f777c1899cb5f3590c") )	(150112, uint256S("0x1328400c38fb601c39a51d3838b20d83b004b9c47d71f5e34f4a70bef464e56e") )	(223682, uint256S("0x1f6ba235de548c09056be74a6148f071304697a30b7ea9c8fd13cae422fd47d7") )
(23645, uint256S("0x0c5b90c99ea105e985bfe0fae864447c2f70168fd0139941311bb887959bcfdd") )	(56386, uint256S("0xa1e1b50ae299925f19fe57ac6f9786e32bbf1eee8bb6035ac784770006b93725") )	(85801, uint256S("0x8a14888061b6ca62ead488b2061da88d081570fd66c31983e76af15f15e1c41d") )	(113137, uint256S("0xfd7fb493b7c702ddbab3a25e37b7405ff216034465de932e21ab43e464223a06") )	(150310, uint256S("0x1fbb9e92669489c10a5a47c68b69c272df10b285a085ae96602871002e161fac") )	(223881, uint256S("0x25f0a3a028e3e22322f99c9dd712a9eba5464334d56a456e55d5ba5b6368c2c5") )
(23669, uint256S("0x98cda6e8ddd5f18296e2f21aa55f63bed084feb34a2b4fd40c0b61b3eeaf969a") )	(56475, uint256S("0xb96eeb5c0661692975e4c5daac8d4bac3f80553086096269f7eabebcfa9150b7") )	(85847, uint256S("0xb3c778651610f701f136a384eaddaaa918434d03a580a59986c35e5efe7f3634") )	(113168, uint256S("0xa1c356235f7b398fb3a9a0dcfd26eb8fef14b8f2bb33ee1da5b23f40ae5360a5") )	(150361, uint256S("0xf8cc85e066852e43a0d5de9ffc8027ef94af63473c3737996550a8f5ea1b718f") )	(224134, uint256S("0x893af258357ec72eac6aa01b75df4aabf1eb6d01eab70817b79da5590e204434") )
(23676, uint256S("0x80d36270fe6a0d057396be2714f530754d6ba5d141e069fa499a57ead0a3cfae") )	(56481, uint256S("0xd8f7060d369660e3ea92c4c958c1d97c3018af20a1de2616789af4faa397e09a") )	(85849, uint256S("0x35c00c7db0848070241d9bbfd293edcbbf88ccea89e87f9622b28c219396823f") )	(113193, uint256S("0xabed9901c3daa39273322abc036ada1b7d492cfc089e57ff558f83fa05361cb2") )	(150444, uint256S("0xa26d3670dc1f96bedf0e3b4369c4408bcd1c14e369dab7bc3928e546074ab03c") )	(224300, uint256S("0xa3e794c0cb20eaf181c255f4bec050edb32309ead6f178ee6cb0eb9f563f9eb9") )
(23756, uint256S("0xb2b06eac69cf791935750692b7727a1b68c84b430d90933838eda96f7c9b9d46") )	(56516, uint256S("0x490f167707a333859121fa805e188ac521f57c2a25550ae131ca5e5034265225") )	(85870, uint256S("0xac1d3275aa7e5461e42df10eeae2d28c6f754439bd08a4711b1a6a829e0a3857") )	(113203, uint256S("0x3e062c8255e02811b590f492383bf15dfa77d8d72ce19f101726f0b4c6ac6465") )	(150452, uint256S("0xfe5c5de0ca86bb16e5c03c48bdc8051771c4e37a7091e3a8563d104c8e23c4de") )	(224371, uint256S("0x72ad0e2824e0c9b26415755824e9f4550995c6b9f113be7f30bf966fff992910") )
(23780, uint256S("0x91262e80c139663d74b858632efa3e432c04324cbabf80197d7bf038383742ad") )	(56562, uint256S("0x7510436a2d005e56bc9cd2b670af616c8b3d47d46716701ed125f742bc64633a") )	(85884, uint256S("0x56ef198e49a9ce1f526e0431d6527a30dfc9dd449351203595aae630ab00b49b") )	(113270, uint256S("0x9675e7534f92f8625e19fba354696e00ddc51550b20c1343f6ca4fcdfbf69d16") )	(150584, uint256S("0xd31611b8113ed6dae7ef494f4baefef2e8861e598c788d3d85cd4cedfe41751a") )	(224568, uint256S("0x04c559e60587eb10234f6b26a15dcde8d7e5160ea88144e56852df773da14fc3") )
(24050, uint256S("0x90a1edef4175d32f9061466819e29a5b798fb093e521db5bd25ce6454cdd68a0") )	(56636, uint256S("0x89805bf5effd543882bf53e7b3db3fba271d233073227bb637b430570bced612") )	(85905, uint256S("0xd2e0fad202fc4ba7a27ddc2ce678bb809e39119501f75f7856efc8faf03cf2f9") )	(113291, uint256S("0x4b55388842d81f78510415adf7ded34cef317ba190f4e04f0d0fc0889a027d29") )	(150669, uint256S("0x5eb69278d6718dbf5418b2c2a2aeba641947d69de1a9aace77aa46968d6edd98") )	(224625, uint256S("0xcd209ac0380404569b02d78ab44f658693053cf805e30f21d76b279887e7a095") )
(24073, uint256S("0xde9b01855fafce511616e7da4231251f7f914e911d04cdf82fca96ec81a548be") )	(56646, uint256S("0x8fc26fa5f1f31afdc800cb4c64241e638e9bf86dc6ad4883bb49fff6fe80da87") )	(85953, uint256S("0xdb5f0e9c8668215e63d37f5277a70d01ec5d40477381228d0bf7c3031db78de0") )	(113331, uint256S("0xd99643ce6a62569191552b8be2b23171d31df959ca31c760ebb4cfb858cc85e3") )	(150674, uint256S("0xe99dd24ca73be072667e00e9b7f19d3bbfdfab083e40bf82c32de4c4ebc2e310") )	(224692, uint256S("0x0444cfb93e1cd1c033c43a684a6400601a01473a07dc162f1b0abee4c204efaa") )
(24088, uint256S("0x8ee59161c8af9804b371a38be9684a99f97068bc17a49fb43bb4f465daf464c6") )	(56763, uint256S("0x01fc5156999163b5cd527c11c2d61a662a3ed4fb57d1f2b41dadd080f86ab23f") )	(85974, uint256S("0xf4f65e5c73db3173c08c113973c0e9f72313345c4799d100b5190dfa3ce23cfa") )	(113343, uint256S("0x10696b019232728b46d4f8bac31169d9be6b1b61cf22de1c363101990169bb09") )	(150796, uint256S("0x0877b9c22e04a7f2e218751161d2eacc4f88ebfe79bcadab2580d700d63c3dbd") )	(224804, uint256S("0x23fc0a4cad49eed8c539c35749e6c2c1b685e5845f041a2e743e7be7d118dde1") )
(24107, uint256S("0xc95511b83d145ff074197c3e2391a6736c1844c69d19fc9549eca44381ae2518") )	(56801, uint256S("0xfd039eace6ed127a5413860057365312b452eba2ef0c6076b14f9304ff23399d") )	(85979, uint256S("0xfd24dd48b1fa5601553e05d3435b20e196cb95d73b89660f391ae34a55367a04") )	(113360, uint256S("0x29608ddafa9db9ead80ceac70c6b8522888d9bad8e704cd56b7d52dd8452b560") )	(150845, uint256S("0x85c135c4b5507cc32eae89f7e0b0a545b506e891ac28bfac2b3344246b708755") )	(224829, uint256S("0x5f1b7b0f8b008721aceccdcf2d5cc9070de2257296e7b16996d0146c2106cdd1") )
(24114, uint256S("0x40a22b3361c948df4c85040470fe59ade373e195160e7256cd9f11ff0cb5f642") )	(56951, uint256S("0x2c0217e18cd7ad1f9d356a25aa158cc40855f3ef0a0ba23c39ccfaf43e1cfaab") )	(86015, uint256S("0xed114425579af9089967be5c4e11ed9eb463909af336eb69a40edd5f99828cd4") )	(113362, uint256S("0x8ed4b5a32cc080f888019f235600ab486f03c9de7e0737a1c96f2beb45c715a0") )	(150954, uint256S("0x6dd69759c12b9f5d1ff95254635849cc3e3cfc6bc43a42d110b4993eaa70bf96") )	(224966, uint256S("0x7d7ec72a15d7c2b8f0a5c9268fcea6d312e08877a0b20b5ead6d7be07f803881") )
(24188, uint256S("0x26a772e6fbc41163dcb61d3f1e932658efcf5fa2f4d489c128accb0f6e7c3cdd") )	(56975, uint256S("0x065e1ed83d9476e78a9506c211b15c98a1d73c30d1ff1d3bbf3ecc73b73641f6") )	(86019, uint256S("0x601a3a4d104423f9f14dd00cbf08c2c36cdb5105185942bff0c56bb2a25a7e60") )	(113448, uint256S("0x8ab9fac4e72ecf7558c4fb275e0ccef4b3a0551f0b335030060af8d5f7cc7b63") )	(151246, uint256S("0xff3a768964d85fd5cff8ff1dd6818923df406a1fce1a6f1252409f126984ae50") )	(225084, uint256S("0xee856db6396356ad6f29fe06d4cbef14c0c2813df9b215d293a17f57ea8bc1ae") )
(24403, uint256S("0x2c8f252b0386c0e80e062bc34e1c5d51df1670cf4fd4c011d30e381bf4630d81") )	(57015, uint256S("0x4e533ceea8acb1ad938db074a89d1f835c306ec2d13a1696b475c8136fffa097") )	(86085, uint256S("0xa8a941301f290baa5cf450850c7734639ea632b7a2a9e761efa7424e06a4b2bc") )	(113585, uint256S("0x9d48d0926e4115c7917b93e369322124b90c8d127342ad98b2c620878fd208ac") )	(151384, uint256S("0x398bb4213333f949093eb9fb3a87a7daa5317f7caaad7f9830d3f8d39995f204") )	(225115, uint256S("0xfb712aab3158e7aebcab5b90c1e36c6cec7cb0d92a742e51e8a875e33fb7f789") )
(24505, uint256S("0xf0061c819c47865124360876196cb20b17b9f045c2420412394f435c6c05cc7a") )	(57141, uint256S("0xa85fc2d7ea0150c5d784f766ef27a4914e86cfaf7e1a739e2dcb062acf3f31d7") )	(86135, uint256S("0x1ff1075564161f680a01e640e19a8b81407da57a000eb950d1875a455eb2be4d") )	(113661, uint256S("0x842f569ca6a9016d789ca0b45420cb1c0e9b101ede3ef4f04c1fe44f45f40686") )	(151440, uint256S("0x75e81ca48b956b28b6afcf260c615a884a6e5a5534909f8a1b0f4fe9d008ef7a") )	(225330, uint256S("0x5a93182f52e1200cfcd3ecc0d3e42aaf1eb5f7a2c0aeb6147417ed8a2d7a723a") )
(24563, uint256S("0x528bcf84eff9e8b064ed032e1ad4f842e953870636a39f8183fb38a79916b950") )	(57257, uint256S("0xae90316e04e3b6d8aa27c6de1b2f6cf4e919c3aca225fa201611f5c2659ef2c4") )	(86197, uint256S("0x50a2cbceb0f201f587cefeb821d35292533d02278ab854db5bbb4c024e1ebb6c") )	(113739, uint256S("0xfd379bc6c4e5866193c38ac7e2185de65cf89c1486ba1c3d4a782e55caa6053e") )	(151542, uint256S("0xf41e2e374404ce83386fdd9374dcd309314adeb7b71560b6b7d8cd0088197f76") )	(225458, uint256S("0x70a382607115092d35a8b3d2e153925c341678bd295fbd89901773309e18f0ac") )
(24565, uint256S("0xcfad403fbb52175e84726bc013b8404efba26df66a42586a93a4048589b97893") )	(57259, uint256S("0x566dfe2b23646cda649b6eeaf61cbcba0c1ea4658b56be0bad2d90aafff1846b") )	(86221, uint256S("0xe02f0ce0ca9d5e8052c8f5eaf7479ab31520f4f7b10b3dd990599fd4951a6c52") )	(113765, uint256S("0x4e006c6da1fef1ff83b28adf8e9b2509baaeaec4eaac7a9540d71ab4e1fb32bc") )	(151608, uint256S("0x7679721d154ed6c2f31a578cf9305c11ea4ac594974c2e92e07744698a09363e") )	(225532, uint256S("0xb6178197395f177e28d436abdb616a090af5bc00f546a0ad45356f14323dad3a") )
(24630, uint256S("0xbc2f3848cbcd2986d6377409ada975fbef6338daff77630044a211664040b369") )	(57264, uint256S("0xb1b3af34ac2bc39e217495f67bfa66046b74952a9fec0796691f61a7101084bf") )	(86289, uint256S("0x76d61565e097b0cd112763407ffce79e7a30848bca30c2a2ca22c4dfe3d2ea7a") )	(113891, uint256S("0xb01a34ed382ef04cfbe98d8f6c44c32d1bc5670d9cd513bc2d48265f2b3b65eb") )	(151745, uint256S("0xbad7f3f5984f0cfdc8a4120179286a0b910f6140c931827c3feecbf78f318943") )	(225565, uint256S("0x8b40fb03b3c4593974860c40e2f9e1d383495c4c83e63269d9b646498cd067df") )
(24645, uint256S("0x8261f803c64cdb83cabad8fa926a0da34f69e59f522ace8e9c1557ae4cede497") )	(57271, uint256S("0x50e1bdc7f6f5e37a3795818da1d331bbeae51e89fc66730c24fc6b6f12dd30bd") )	(86309, uint256S("0xae796c02320ff4203e625f24107d2b150c76014d05f41c86e1e78d4b1d563811") )	(113921, uint256S("0x83ee1eba7e0ca4426271c9d2406c28da776c2220c0be18ab5c306280fe052092") )	(151895, uint256S("0x931f5a13ee34fd1857a90bfcff33676d98ec0c0c5f8e4da57243f39984d78351") )	(225586, uint256S("0xb98cb03b12687751aaf215d3e7feec409e5dadeefc433f8301ce73ed96b74f1e") )
(24696, uint256S("0x558ce67848614d813d987404332c4f1927c3b8a5418addc6c20d58d1c5561257") )	(57295, uint256S("0xef605fc14cd2c258a064955ea4a6c3c80159ec4fccf8f77f551d248463faf1c1") )	(86490, uint256S("0x7dfe5b6a843620e223870befac222a872a4e465ee3f3b5cd6362059e578e1fb9") )	(113964, uint256S("0x069c021ac159ef54a00f34ae3df97f32bf2f9993c0209433909454d4af253193") )	(152294, uint256S("0x848feae5a5d2d380ef51ac6bd5d94400ef040227735f2b271e723ffff16cfd04") )	(225700, uint256S("0x6f3e3a9db82b9a7220b13deaa3709b032d6b8864748c3766681a9f9543a022d0") )
(24722, uint256S("0x4664e871c4030c8e5495eb21c9eddfa45705915f5ce43b7791f33ceaf74e96b1") )	(57321, uint256S("0xedcc23bb03e9c3bf9489951d1990d8ebfec157b2cf8d302bb4c42d5161d3d4bb") )	(86498, uint256S("0xe25feec7d679e9b92d7323c1315c49c74b07e5da4a6036a14e58261f02f7e8a6") )	(113977, uint256S("0x3084c2e8b7a1189b432d74e920fc61a436dfae7186a25da659a4ae48216a637e") )	(152388, uint256S("0xa6b234d31ce14943b2040a7c0d3ebc2a87581a07bac8b9a460346db31764e5f8") )	(225797, uint256S("0xe89b1d35c6b564eefb0e5964bdb9e9c050850e6693badd59e1e2808c8fac7513") )
(24750, uint256S("0x0ca41d369e314584670fb5d56a1c5a3edf44a68b2a2bba53db61437f20c40135") )	(57323, uint256S("0xfdb23910d6d93f58e1de7a53cce59ea97fdd60a1cd18bd1f3cc805d861983edf") )	(86528, uint256S("0x366e6d464606e3cded5420ec155e348d1097fa1c1f0a3cbabfd929ca52fc2733") )	(114036, uint256S("0x6ac9d61b1e2d3ae414f111f1777b6ca24dff7b491ede82134325f6089105847c") )	(152597, uint256S("0x5e7dc1dd6cfdf42bab4e71e27206f0429fe2126577f8e151b18b4dfd161cc4d5") )	(225896, uint256S("0xbe16372d9b5a923fbb2691bd95951345d8fb688f137e0f1cc053fa382377edef") )
(24764, uint256S("0x148f3f1821e5ca52993ce59aa03e3994b7c7cd4abfc6b05feb24f036e9278ed7") )	(57373, uint256S("0x14a2a6d2a47eeb6deddc3cebe4fa0c2ddae89da1b03311e9878917023e77ead1") )	(86534, uint256S("0x933d55e66dfe359a627c40ad72bb22b4a134ef3dc8125a81217bbbb10db323fc") )	(114049, uint256S("0xb0087a9618e23561838678a6c6dbf18d0363723b92a1efef60f30d6c80887c0a") )	(152687, uint256S("0x05461f9493aaf4188712047a38caa52181c04d1edd5b66bfb048d7eda27d9f55") )	(225978, uint256S("0xf71d5820f232960bdb3e6e7dfd39190b954413b3dd1460ee41cf870b92730264") )
(24832, uint256S("0xcbe892e854f22ff2c7e35f406dc7f8067f753d254f1442f53405736994108666") )	(57396, uint256S("0x8581aa098a21c26ea940e0b3d0cac7d24a18af32f9d7eda1685a9700a35cd321") )	(86545, uint256S("0x7d535eb21453d464a995ccb9fc8a87053ef69fef207ac5b65cb8861dfc3d4e94") )	(114078, uint256S("0x58e9b4d0cbda6ce5e877025f2777af82e808dcd808dcc37b8180f7b33b1715f4") )	(152703, uint256S("0x218f56a40c878c58eb01543c54cf47389c50d9e1e61646c602e19c40b44eec55") )	(225987, uint256S("0x42520204373cf88696168df3189bc1b4b9146d07a7e94f7e935f4d4707676f40") )
(24843, uint256S("0xd6145656a32d3722bac4ac5f564a435d2c8d6f776867c14ad729644aab41dfd8") )	(57406, uint256S("0x497cc7e30dec05cfccf6e2e52e247852a975de746b254c0b0b718df3ec73d461") )	(86568, uint256S("0xa4ef049bd247e53cdb4eaf2c4e4ce8e3b61fc4dbca24fba55db26c02f4ab0cd1") )	(114108, uint256S("0x56205c3779e4698db2d2e97d7ae3519db915c48c3b1a8dd348c15400ae74ffe6") )	(152766, uint256S("0x2831d99a64d79cb664d5ba1e25390a804fc99d1e1bab4e8fcaad3c703fefe217") )	(225999, uint256S("0xb7421bed3b3c2fdea16f3fb4d12a61e53e331bbeffc7a1517f19dac4c9ece0e1") )
(24868, uint256S("0xcc190042d8ae60f9527b1909ed5ebceeff2ab6caf11252f3e9dc5368a9d4af73") )	(57479, uint256S("0xfd69a841107ccea83508ba49a7f938c4d3e4e5257bb6951888a217a42257934b") )	(86646, uint256S("0xbc9a0c4a2788d2884eb08310575ba060ca252338f221fb46fb880c2636c23013") )	(114162, uint256S("0x8303c2f639ad30b86bfc7095153e391f7734603d1f74474aebce08f30a5430cb") )	(152828, uint256S("0xae4911ead774685b6dd3f41ae3f047088c606fdd2e8631f330d0f424a77ca1f3") )	(226125, uint256S("0x053827b0fcc01d4e620796eadc88502409e2a9c75fe9ebfebabf0fa0a3b40348") )
(25068, uint256S("0xfe7973ebfe8451c55b01b3d3294d8e8363ecff14fc79edca20d5baccc99cee44") )	(57620, uint256S("0xb78590579ec1912678039977d2cfdc6dfc6abecad27bd9a116d93f9173d44138") )	(86650, uint256S("0x48d6fa8b9d34c67bad989f6201d3900132df08d82394e19d490e3dce33c78b3c") )	(114166, uint256S("0x619a4b9a180012b08e5a4723b94acade243f77424be4fbbe17d987d1d47f9e2e") )	(152888, uint256S("0xc6717b36bba2322e37d56b56253e81ee6b33aad802b67d854402bcf579093a31") )	(226217, uint256S("0x6aac0d05d0ef83f233c674ffb40fc2e6014323eaee0cfb2c0f9c9c0bf62abc39") )
(25147, uint256S("0x563ca6d5011eff0e02476ca157e4e4a1d6bd67c19994dcb5ffe43da0d4baf0c1") )	(57649, uint256S("0x54f36010da1241a33fbe773db83b03e7b56b548a23415cff6b0717ae7fa59b6d") )	(86653, uint256S("0x79460f25f40fb38da400faa752673d8486d2ddb56f53572f3da1b184e425dfc8") )	(114175, uint256S("0xe1adc28a1e6ef278a35ba4360d36ae161253d762b89faf3226d25eb5479c6b6b") )	(152951, uint256S("0xba003c5394410fc1b5cc3d124a618bc3f752434424b1823fc73f03f4da49d095") )	(226307, uint256S("0x5dc7167610bc0fecba8b1a96cb95aa4b5316c77640985ad7c5909c62a538d8d6") )
(25164, uint256S("0x1aa1368c9c0f0f92d60636d7a9960fb3e35e45c353527be527268f21f3c0a10f") )	(57812, uint256S("0x1a20dfccf86d43c81838d8c115486cc33495394d386699d9ccde7463cf55e880") )	(86669, uint256S("0xcf51059d807438d5d5f702f5df7deed513fc930348bf6a38727140a035570ea1") )	(114184, uint256S("0x563330d24de28902e940cd2f99121ea1ff77574e4f2f4d3e61beb60c760fe43b") )	(153003, uint256S("0xe36a37c04ad920ce90ded06d98beb25a975d5a7bd66c72405f8b91d22430fb86") )	(226314, uint256S("0x0eb6b1c57f2b17e064b98837fad42689dec88f173a4fa4fe1b59ad6a16d3247b") )
(25280, uint256S("0x7d2bcfcbfe15f95b1db913eaf7830b6d84de6255d26994e5642f869876898e02") )	(57862, uint256S("0x19cb60655a763d5b593677c0cdfe3fc0183629168b5b9b1d3fee335b41f79d13") )	(86706, uint256S("0x23dfd5c79fa3dde03e3d16a5e921fecf1409f3f7b0ab8b1bfc7fb95056b65f91") )	(114268, uint256S("0xb164686b566b9a70c290ab6124012ae770cd801cdc4748034bb94b9a9ef508ad") )	(153182, uint256S("0x1965071c10e4f16580ba188d47b17594ec25f4bc3a798e3c19a45226ece538c9") )	(226592, uint256S("0x39496066625165336f27272c75bf07ffcac7bd9f77cbf9bf963134cd274213cb") )
(25595, uint256S("0xe2152a6d7f64f9eb211b5909e108f81ce0a4c723ad3529bbc6ff9cf2f9437be9") )	(57882, uint256S("0x6cafa7b6e516351aebc0bab91c8aea81a0ab3ccf75480d9827e0687e8c811ebf") )	(86707, uint256S("0x0ec494bdbd4b69e2b82354fcc9f250d7b8f9a5ad2a6dd303a9911c69b44d6641") )	(114271, uint256S("0x728f1e290b9396a9ffb0aef0000d4f766a3149524aca9e058c42ac1a37a537a4") )	(153319, uint256S("0x12612c776115ce7d0c66fd7a037db1b6531b9742e89247608ac8ce7e3893817b") )	(226715, uint256S("0x38dccbc4a187d45fcb6d0262510c787970b010b4551c4564ce82a6043d0d58f8") )
(25736, uint256S("0x0e8b828fdfd6b1352eb6bf1ec56ed0952394ffca19cb27794d2af11cf0163780") )	(57964, uint256S("0x290fd9c2bf35f7b929e2bf01218a7abcda68de39ebe3d375409ec80750391eef") )	(86793, uint256S("0xa980961af6a6f3ea40255f91f34a28da1a88887c608f187d4d468f170190d04a") )	(114296, uint256S("0x2b2c53f355d58c68d15b81748969ac1f90599b01bdae2093d560d062099ddd6f") )	(153329, uint256S("0x6c88ef75b1f3dd5686b4232435478c088e962ad7846ffeacb2cdd44e11b62333") )	(226862, uint256S("0x3d3f8b594c96cd9dd9cd0b82168b86a6ce2548abe32576738fdee0f948e03e36") )
(25822, uint256S("0x702da3181796c8044555c58b75a6349c1759b90a73c46efc0f0b4435221dbc28") )	(57984, uint256S("0x5293a82c6ec2f3e7a98c4131fd188f54d3e40dd14013395e5dc8d28830187d95") )	(86806, uint256S("0x0966d570e92a33e65bd8b42b62b12aaab1919d14a117ada81bdf8facc303a045") )	(114325, uint256S("0xebaec91a7bd3a2976c1e2baca2516b46fee0de3a31209fc939b74cc77d29c118") )	(153432, uint256S("0xaa49174bd610556589646a38c1f8cc28887db12c7bd69279a4c7a7969cc7df18") )	(227000, uint256S("0xb9bcfa12fb497039d321cb97867c8c047ae3514a8bf9dca9b4b0deb643c6876b") )
(25846, uint256S("0x07c68e360702962ab090e80cecaf34989138dd58df13f4e3d609ce87a6b75f0a") )	(58029, uint256S("0xff34918bb7867a846b2a3342d6376f3ee2d657584896ea35094d22c54b51760e") )	(86829, uint256S("0xaa5f746efe64b4d49566472a8082f1d2293715abdff62d33297d5938d76a9018") )	(114408, uint256S("0xce3c514498af9d67bbf406e64d7cd1c09d85a4e6b9e1fe1b8b10cb1458f8a68f") )	(153459, uint256S("0x295142144fbb29aafad3464105e961a6d2973132e3344b98011d35a15a04c907") )	(227037, uint256S("0x623f49181de25a19ad338a700ed59e73e7ee449759e088979108251ce22c8959") )
(25860, uint256S("0xe491b4179f880229fa153dddbae2174ec7399dd5bf4786c52095b476ead89022") )	(58057, uint256S("0xee5c093943d1c4b669a3851ead41a142fbea064a3e40d3715598c263c0634613") )	(86832, uint256S("0xdc05c356ff3415af87fe388e333c14c268f532da53322288e34ea213bed3a8ef") )	(114411, uint256S("0x8131871f1ae55cfc7ea451a897c8509aebc058ebffa8d2ff0717dee685671860") )	(153471, uint256S("0xce4ced1d0f5adf3efa12a5ff01ddf69dd38a442042e62467289615871dde00b5") )	(227065, uint256S("0x64b72a30eedb7517e7598d1ab3713a3288fded6ed2991bc431194bb531676551") )
(25907, uint256S("0xeed4723234d2632c59bc327279c8a4a67be3613f0965a04478a937c02097f8ae") )	(58070, uint256S("0x382e6f6290d8096b384dff82b4191741c9b5af960bb986dc909364790a8187f1") )	(86873, uint256S("0xdf94951a87181f22d951341775e4b0f8ce515de783b4283fd7933f186ad45e5d") )	(114440, uint256S("0xa6db0f49b95098edddd5716425bf888a8eb3858ca5bbdc4d2579115fb3908f42") )	(153547, uint256S("0x649bc055b76817e3ecf10d566d9e5152145a8b666e0e6b1d0e26dd09480b394c") )	(227117, uint256S("0xa8d2ea8bfe4b1d42164832f540a659bb5ad16fbfeed073aae6c7c1f5a59c64cb") )
(25952, uint256S("0x597e5e0efa142d0c48ef4b4fb00393b80463afbec869abfd77e0cc63a412e497") )	(58154, uint256S("0xf4af8444bdd30eb576cb5a0830532331b528758f5a5deadf6f00fe4762ce48ba") )	(86893, uint256S("0x919fea8e584b7ed47100764d957e7df8e9c72866b3035e6afe3dfc639e26b722") )	(114451, uint256S("0xe7ffb9098f3a54b5b2f6ada6cc559ab7b3adcbdccb300666738f694cc71fc24a") )	(153573, uint256S("0xc90159a88529b74f440cbd1a027e0ba12322d9dafbe4f1857c0985a7d21e19be") )	(227185, uint256S("0x921cf55c35347c13d98a79f31cc173d29b08ab54e759ffa25c9dd4b8df9d5d77") )
(26013, uint256S("0xe239de249b5461c7f571f4a1a1f7a5613a823900518f790a96e72ebabb0375af") )	(58156, uint256S("0x437260fd81b88cf864b715f0e31a0f19295676a18202f57e41fe316e7fdc225b") )	(86895, uint256S("0xebab1753f651c87061a0989d91c228f5cd917e5cdbf10e74ca139d8e3ad8085a") )	(114455, uint256S("0x4bbafbe9a8bf384b21650de9671db31fdedbc4d68b967bc04ef69da470fd88eb") )	(153693, uint256S("0xd608e2be982c9015e546f556a841506e633df9d1f6d66103fc719f95e27e54b0") )	(227232, uint256S("0x639b89aef25055e8a325c467e40cea150b16ba08560b6be4f6c08e6ce2bbb389") )
(26023, uint256S("0xf1c1566c57e10b37f1f8cef1a3d40abfe03c6d771930110db8f8b7231a5d24ed") )	(58170, uint256S("0x059dda366164f53c4e849f78fe60ecd9659d3db1792b1dcf4e965ab0ad82cd5c") )	(86912, uint256S("0xd88989a0c29af8c2985e514bdec997a932a0284986ff211acba1c756ca9276c3") )	(114464, uint256S("0x8ca77d459d51e1bbeddc86f67f0e4b483da47c5c0e94399a0f514e72e082c6d2") )	(153756, uint256S("0xb9268e06fd0d5b8f63c5c2f1b7558cb644f32284ac6cb2072d44d65c503a871a") )	(227264, uint256S("0x9bd5c270de080fa63b25bbbde68c4c20138aa93caf10089708a187b9233a142b") )
(26033, uint256S("0x68ab4f4feed107cb6ab14fbdaf6f4369756f53e4bf81722339b023bdf06afe03") )	(58281, uint256S("0xfb0a7ba1a29676c78049850b34c05e2cdacb80c4818087b34f1253ecdeb33082") )	(86972, uint256S("0x7b004982a9d592289d23c1271ac5741a54579c4dbc8edde43bc4b744b87862e8") )	(114548, uint256S("0xbc2faf68ae4c6bb41af070b2dbb1c437c6ce2256e1b6773ac613288690abcb2d") )	(153865, uint256S("0x7edd0c070587d4a15f373cca6ff09268c828b9fae9355e6a070dbc6475ea6710") )	(227327, uint256S("0xd9d8d1af1383fbc2d45c7769ed960c186c823031128e0d51ab22021980031f5c") )
(26077, uint256S("0x38cff4ee6911de3d2c47096e23aa33851b3b32fd4883a53f1b7c7861fc6b0862") )	(58333, uint256S("0x38662ac40be803b78273ac1d4a2d328926e0d4cb8fec92e4593778a62a08d4ef") )	(87055, uint256S("0x368a03c79e5efd492359a695c62842b2708f6e4b921490cbda801a1a6619cff0") )	(114555, uint256S("0x1e40a8122ea8224bfae68713f727c3a93334d78328efb062c6617f550600400c") )	(153911, uint256S("0xba9a84e98c3baf5d446b1a3518783cef3c2b9689a746a440102c5cc9d48bb2dc") )	(227399, uint256S("0x15a4ed656f8c77cb78b27037810320456b76429e80c712be45e97414495ddd3f") )
(26113, uint256S("0xb1d52e2075d8981930dbe327114b5ab3f2bca975564408be0cfaabf68ea48637") )	(58370, uint256S("0xf5bce3e184086dca7eff0ecf36a3efb55a776e8957fcf2f2dd03e477469cba63") )	(87110, uint256S("0xbdcf476ab4471323c73d4e0c8607239995cdf89a96877413a07d0e8672d15b6e") )	(114628, uint256S("0xcf73b09bcd63ad311e86bc591067e832ddc8d9f6c6aaeb1ad8383ddd9ad4ec92") )	(154154, uint256S("0x87acceeb29a8c41417022a6e89b5b007cf72e8c13e85aa0025dc6b3c1246a251") )	(227446, uint256S("0x7999563b2e81280fff14055a5427c01726b7dee5fe2dd9a89c3f5cb026eb1a2e") )
(26333, uint256S("0x17c38396388131956e20d2463f177037284eaa81d359942f00625e4518bdb2a4") )	(58459, uint256S("0x09f91ad675a49abe1f08b32835b34310fa168b773137092076d54e7ee936c2ab") )	(87147, uint256S("0x25034bf0b13149f2e8d72911057ac1ff4210d871ea9ab5428a7510f1a71c93ed") )	(114638, uint256S("0xa3388f6671bd7c079f399817283bf3fb8be517799bfb9e927baba05db4c42f68") )	(154205, uint256S("0xc32f546dcf9c3cca1cc70f6b9b36a1300eb9137e15d5e813fea7ed5798bb45e7") )	(227601, uint256S("0xf46e2bb6030fca8cbfeaea5c505b15a24acb354ef71caa70dca36baf5862fb5b") )
(26625, uint256S("0xc7856f06c83c52db8ee40fee953c61518ced1c24e19ace3dbe1aac0683133bb6") )	(58633, uint256S("0x79a84f36274143a816c0df71cc7b27977aefec1713f3bffd365b9d1aa290dfd4") )	(87167, uint256S("0xc2ce478b91ea9a49c8dda8bcb3845386ce79a6ae89c75f410a0601307da5c3ea") )	(114665, uint256S("0x2d37679301278de6a72297a5a5c27e727075600cc0431ee6acb52d0338d4c95c") )	(154443, uint256S("0xe7c87add4972f2a2ac65da463c584c17518ea27814f60d6e4eeeab78b5ec4f8a") )	(227621, uint256S("0xdccac9190fa17bcaaa515a9896e844d94733edee4366b52d46f89b651548f95d") )
(26644, uint256S("0x9452e325f56db8b0e3b005848aa632198367683a6fa247b44b8d07df9965b9fe") )	(58664, uint256S("0x30b122c9ef06ec9917dbebe951d2d8c8c428f820cb7b1faaa8b5d5207af39f23") )	(87170, uint256S("0x2e0a8808e9abdee0517c7bb648146b0c65f57d4909287d81872487333d1f5ee8") )	(114696, uint256S("0x1dd6253ff5248eb4c2eb8fa346608929fdee520218c470fbf3521bab29e96533") )	(154542, uint256S("0xb86c3f6fbd5271463ff7c6bfb1de8ecdcf1bb8b61ba74f18c48a532fae7b0982") )	(228413, uint256S("0x34dc2d5ddc8e8616bcba9dfdd66f259ff842f5f464c4ee7a664eba3626092803") )
(26653, uint256S("0x6d1e43410364cad4d17b98e69ec69d091bbfe9522c7b16e836c6f09e357063dc") )	(58724, uint256S("0x80d5936bf82100241a4f0a18a51d61502df5f2d5f5f298efa521166d98f967e6") )	(87314, uint256S("0x72a292ba9fbdf1a8b25f8e7c26166859278f95c462c0ca561412a0629a29fced") )	(114700, uint256S("0xdceb6e08ac4332a00ddfba82da152c4a100dda3e8f26f3b6c33d5b72bdbd9deb") )	(154582, uint256S("0x948578f4e6e5704bcd34c859fae2f1137296ff832d7fb80471b3b8c81bba2111") )	(228472, uint256S("0xab9c233466fc0df523328b507dab271b0ffa8f8733a41e3d0daa13e4f6a60ce1") )
(26707, uint256S("0x0c8a910bd8fd468ea855580933da4eeab34c9d2dc830e345f419a0dbba52e9eb") )	(58808, uint256S("0x073b9296d4b35566e5bcd944756477ecfcc8f07d5a5a1bb09c3b572320a71310") )	(87326, uint256S("0x2b49e3c40faefa12841506dea480e01d2daeef32891c714920dbdcdf8d6e5d55") )	(114718, uint256S("0x70ddd7ae581f7dfd9e4ec47a4f030b94dad8c9c2a91d2cb435e41f8387cf2245") )	(154753, uint256S("0x97ba872f1329fe2112ba57097d0f93cbb8538b3edfd64e4604ab5f548752459b") )	(228599, uint256S("0x9bca0a0f114dfeda07e58435aff85d96ed5dfe5ee16e09e0e227a3f71e8b0c5b") )
(26747, uint256S("0xd1014f1efc7feb7070fc361732ed7040c4542e7194468c3cdc03cc15d9396d94") )	(58940, uint256S("0x2d3c496d5413316244ec8d94dd2915b34264db4e588e5e564fda11fa501900a3") )	(87360, uint256S("0x65ae7bd4fa31efb4303ba271056ab970334442135e9026da6874cecc54acb4f0") )	(114721, uint256S("0xbc77d3f8a786d24496a6e70f7fe9ba2863e54bd4c06dc88c71a0b3b552ac4cfe") )	(155001, uint256S("0x7b62633226aa9d430c63defc714c521eeac3314469c0ca189b2b3ea1c3098221") )	(228762, uint256S("0xc1a336e1570ebe8c178b23af878ac3d358396a29d4517cc79a09ecb8350b009b") )
(26777, uint256S("0x648cb7d0d8985a3a46b535c132e5a8dcd6faab492d8e016719888d05d1885770") )	(58975, uint256S("0x6f1901b28559dd12a5ac8f1217b8e539c418ade9274b4b399cdd431e2daea986") )	(87382, uint256S("0xbccc52600a255dcb84f9f283269442467b21485471b8faa8c408fbc3988bb811") )	(114740, uint256S("0xaffbcf15ab74e6c0c0468fa6c3f641d39a4f7e6e9bf32b97d931c612b4ab6774") )	(155094, uint256S("0x30c133857d96b59a802c7258009b471c26da68de40fe71061aa296260a09e6f8") )	(228773, uint256S("0x59f3ec58b15c33f0f74f6db1602c1ce7ababd743c3a4eb87eeab98de6b102874") )
(27004, uint256S("0x6d7883b6bdd235a23d29103caf47ac4f0248e805b482dcbcabac4e92f23fb0f4") )	(59002, uint256S("0x29f8e4de5cda48e6e62c4874438f1972dcaffc6ba0edaa60da66f7c9b67989f3") )	(87387, uint256S("0x9850e1d1cf712b7d831f37d50f49ca1b5a575eddf9667a407ba67596878a671b") )	(114825, uint256S("0xcdcf13dd53584d63783d4ec93784f33db9d7216b41b92aeab28e5b53657a0495") )	(155397, uint256S("0xacdb983c647cae7968d470e58c935dedfaae86ed8f38935896dc73d9f9dd4c42") )	(228868, uint256S("0x1edd5fb11498b55b08cb37539865e94e8a515294d17bff8635f81aced953d2d1") )
(27135, uint256S("0x118b54ac711e71968e76a7b5e0a6484e9e80e43b43706d448bc572558e3c0fc3") )	(59008, uint256S("0x69ce1a7b03ae806c26106927de77f4541dd9d531efbb2077c2d7dac5cd73adea") )	(87390, uint256S("0xe0416f67846b0d9d78802baab90b2804eb7547a42f4ea4c84ac97606a3fd4e36") )	(114829, uint256S("0xcc9d75443ac16079622b7d5f5af08c7920f3bd1fe1b388b71f5711ce06c2b565") )	(155402, uint256S("0x0069cb6f10aa5dbfa0dd5d3388f3740ee4d4f0d2d6f73cd2f9c8dfb7849c1902") )	(229006, uint256S("0x5e520c83fcc9bd15890931652f61f9259add25a8265408ff9fa3f2eed0d99e94") )
(27201, uint256S("0xe9abaef944c769847ee1b4fe4b7b9d8853340164a65306f81f4f425ecb8d31f1") )	(59012, uint256S("0x5617c34c7c89dc08ab23223ffd8d33a6e00ef0405f90037ddc1bccf1bee5f84a") )	(87415, uint256S("0xc95f17eb17594d394570c3c6568d181c5977bd991cc476c075d0ad955aed18e7") )	(114894, uint256S("0xafe3fced51a96d7cd0c53114f999bc52963a030b74ba1c11304bca3b7d94e91a") )	(155423, uint256S("0x5e82344f570c7e58b842d0a713a54da2ffb4bc621e82372652de1f9bdccbdc02") )	(229028, uint256S("0xdb683740484c3fb70a0dfdfacf960cac71e2f9e9a2ee93ec093d7545f2b28f1c") )
(27258, uint256S("0x08bcd96ea0e834e3242439fae10b017bdfd5331fa80e75a1ec9c797db1b5f112") )	(59112, uint256S("0x73f46a0d5e60790c0d0d1b8fd17991f929d5425c7f37acb4b904df276f008cad") )	(87431, uint256S("0xf907f3214729f1a28e25c6ad90492cea5af0508531b27ddbd263eefe70ebc6e4") )	(114923, uint256S("0xfda9b453089304aeaf86cdb0ba9ef6b428d89e29425be88540fe3b178b0b4ad0") )	(155451, uint256S("0x3c83cc94fdc1ec6442194834e164ca226a04cf933ccce5cab1869efcf9021a23") )	(229035, uint256S("0xe9030a49fa19f71fce798cf721d97740e582c59efa311cf48fb93d362cec7f91") )
(27276, uint256S("0xd6eeaee0e92334fc59d3b98b045ec39967108938a4a363c100224f227a933acf") )	(59124, uint256S("0x866db79113e2db8c89d645d684a71fac0860a2d4d4adbdf6337bdd71eaabd60a") )	(87469, uint256S("0xa43fa16578980da7d55e0df0a29c02673d08f955e6c3a803665a2b6634e2def5") )	(114936, uint256S("0x98b85eca92b5d1a8f1256e2b8c2c348a684bf50d4ea38adc9d0d1e43b6603f43") )	(155518, uint256S("0xfad2b97487a420178d2d59916d00d94d598ca4365902e6cd7acdcd6080a06f10") )	(229153, uint256S("0x46bc25458d898aabd51eb2c90824170761708936e18ed7066584bca0f0deafe7") )
(27296, uint256S("0xc1482d7b74705d88028000600842820870a2078d7f00ea8d7c296dd0e876b8c5") )	(59197, uint256S("0x44d38072f487e7aa20d429b2cc8999871538a42ad9caa1bdc02c1c8bae00f056") )	(87526, uint256S("0x93e094899fd31c615a0858d5adff36f0b81f30e8c9fbaa567609e7882a7da6b6") )	(115002, uint256S("0xd1321fbea083e4f41c8aaaa0d943dbf61c7f0884119894a3ab92f02109717ccd") )	(155783, uint256S("0x45ca968efdf64023a14de31e0842c695b97fd9438bdda180f68f66fee6addaf2") )	(229226, uint256S("0xc2117b797b785b50ce3898e5d7c3221545eab34442b97234a970a24477c177ae") )
(27447, uint256S("0xcee6a1b1a87b84d5b9636aed7b7f6e879f29fd2d6a3739500484b9639fcec234") )	(59223, uint256S("0x9e8cb7a8e1d762c2043752a8e9eed75dc7d70d6d1fcbda72331b4594419fc1b9") )	(87537, uint256S("0x04e31a2497faa0b0681c2f0fc8eafed7e6e7f273c58725a377eb08392ddc97f5") )	(115083, uint256S("0x104b4154a7b1329fce3dd6443b8f401708e49876bc564384feef86be57b2ec12") )	(155873, uint256S("0xdd3e6959f77523d2873a22036ddee782e6f3cd8e8bc926e25a646ebb5a8af474") )	(229350, uint256S("0x0cecf05b964a303e1f211ded77ed7c2a33ad44e0504e623a3f13afab0ff45f28") )
(27551, uint256S("0xdcd16e1e6611acaa68a302446817c72c7ee0b951307d8eb5c709be69036bce45") )	(59289, uint256S("0xa673b48b01ab10563f28bef994e5585ad4ae5b9d50137f5b8bfa6392457a9325") )	(87559, uint256S("0x57c5b39d45ff12ff0559a2764a489c838e806b7f9696e9b6871ab4fb62ec6ab7") )	(115271, uint256S("0xdaa3bf238abc2d7069ae7af457b1c2ca6b12c03f98b128d6e69dc608a0b9ee8d") )	(156150, uint256S("0x1a85702243332e76e99844c482fbc50bcb5d331d5b345584dbef418d03ce3337") )	(229462, uint256S("0x4874f19159cdb8e84a13399d741a6974409e27136ddaf48fbcd3c8c966944887") )
(27569, uint256S("0x3f65dbb1b463a243f75168b10904bfefa6af82d637678e18ef1530b3a5873aa2") )	(59373, uint256S("0x1b1468297c22da8483f2c20fddd85aa141b7de188bf008fe46333d13137d470b") )	(87624, uint256S("0x20eebb3f3231278209895baa13bd1e69e818cd87f43787611694b20d7b7acba2") )	(115297, uint256S("0x36ef74633fa3f69cbbe66269aade2fba5e95ae30953b89a8beb6d8d18855c8d4") )	(156157, uint256S("0x3392d048842ec7b41ffdd147b017c31bada011cf2c5fd7d33a4f118662eb39e7") )	(229570, uint256S("0x0853a72172286ce7bad57d490aacfde8824bd836b6ae33145af59845b860ea97") )
(27601, uint256S("0x4b1add2c683a7f3befc001a09d9ce40661afdb3766da448aa43f0df3555c5fa9") )	(59487, uint256S("0x76d6e63b1e2cd2eb88480748bc2676d8ab15287234826388e47826639f4b7134") )	(87791, uint256S("0x59a9f33e344d435bd9fbcb52f19f7575466c2ec46ca7b5427a6a8a03a410a074") )	(115509, uint256S("0x02db0db950ca37e74e50f62422ebddb24cf91d4a3749a537d1f48abaf3a16b81") )	(156211, uint256S("0xb5f3f914f3c86effc3299ae23cd6ae28c4eabe29ffb54bc9d64c7a2db96c3512") )	(229585, uint256S("0xd92d7ec5820bed72a26a4d835922e7a84e0d7f7fbdee0e813e807f42e5770d82") )
(27624, uint256S("0x5144205c0132e5edde413579e30cbbfbe5437fd33ceaa4b1632f33cd5d8094bc") )	(59517, uint256S("0x0c8c4fa194ce47eb3c94e6f932b8b80abea8841e99db79ba000551bc488d38e4") )	(87827, uint256S("0x0fe970a7b1747a3e8d71a93ee70295876fd7e293b27e7257dd0e6d23824963da") )	(115560, uint256S("0xc089c834cf0bcd2fa3792f331d4fc9704e370dbb0e67cef6cbbc7941d2806eb1") )	(156307, uint256S("0x920ecc0144fa55abb6c221d12125d330a03ef57fa25917cc53ea42789d304cde") )	(229636, uint256S("0xed1359bc3b11c11131cbe60a4e43ac50f7520da05d676f3ffb3ba1e49a1f4987") )
(27684, uint256S("0xc34bd3076c424ae5f118d70befb73ee3f8915406115a5c1fd8db102ea223827b") )	(59527, uint256S("0x010c81b5b5a2a9d958ba5e25eda8658b7c5290a76907fd920a35ec79b97482a5") )	(87960, uint256S("0xfa40a53dad240538c9afb7e48bdca30d5ef2c1fcc8fff1d20da83f282361d965") )	(115583, uint256S("0x4c897330dba15f6ced1661bff4cc99a564102e709649acae933aec4fcae5e432") )	(156326, uint256S("0xde5f745f7ec9540f79ee3ca400642b30e065e5453cffcb6f9f2565a19cdd0242") )	(229653, uint256S("0x88379d64cb28ebdfb0d1c5a542e51cf4322f87b0078fa4a9962369c99d6166fb") )
(27698, uint256S("0xf986c5bd46a691a0bd6f871082a85bedc65048b7dcddedefbb70a419c7a36d09") )	(59629, uint256S("0x25ae45f13cd80344550f758e4fd204620886140e6ab4b822ce18ef168104f0a8") )	(87981, uint256S("0x39231562d13c1bdc33a88fac4df145b820d523704b8b033b0acb0ed3d4b8d333") )	(115600, uint256S("0xe018ab10b9986c22531c89250688754db14a93bed8d1f11506fcb4d92c4adba6") )	(156416, uint256S("0x5623526c8055b4ece69db0ae1081954763c760a5e5e226039cee074521a01a25") )	(229893, uint256S("0x58c0e00dc5b3ccf152ef8d0559957ab67889426b84193a456d4a6b9cfc61851d") )
(27783, uint256S("0xacfa75d9b84f9f6a97cdb378acc5326583135e0ed26c70edda51baa5eafea565") )	(59645, uint256S("0x7f642d5aa0646702e6571591fe0cd8f6e847da26efc149b846144b67f1cb1b70") )	(88019, uint256S("0x03600a76491be0ce04a65f0b2fa9ca36362777ec5ab770b1d053cb0ac04c1f1a") )	(115603, uint256S("0x1ef298d6f27ab8c04444a5775f48f9850bf653cf3e994161b5d9313d6a0c7e76") )	(156449, uint256S("0xe5535a0c9864d62d34819f2b181db7c5920db8be60cc90b48c0545df3966db8a") )	(230105, uint256S("0xe187c3666bcda3f4ba883f663bb7555f64b278aa26e8baf56dc34f032aa20346") )
(27809, uint256S("0x7a69bff110e342751bda878b48937dbe99b457ead210e5c0013a7f9cdec303fe") )	(59709, uint256S("0x40db16aba1c39f6b3d8138c6fc3afc2f64827d9f61de73dbf6f0dfad2a205f2a") )	(88148, uint256S("0xc0963869c3829f57bc6dceeb291458b2e4a3f8879dbcc7a27bad85694b526a17") )	(115716, uint256S("0xfcaffa552f08c3478595110500e79022dafdd4472208030fa58121357081c855") )	(156678, uint256S("0x9669fb8e2d18be45ff265d964c3020212a24f0207912fede15dd7edf9a320456") )	(230142, uint256S("0xb784822fe108c6570dc4f2884609f108e523dca400cc3dba1190f01d89c2554a") )
(27844, uint256S("0xea53cf9ea9c1f4187fcff62125a4d5f2a6d03d6fb972fe1808953e722126b2d8") )	(59739, uint256S("0x18523a710e6a8bf07ea0ef33067d4d16e16b3402b757a3298c89c26aadd9722a") )	(88259, uint256S("0xdd8376bd473f23ea3b39f74a2c320a3d285bffe933473c24d699e29e0df11b97") )	(115741, uint256S("0x476663509b7b7ebd703f597cc92e9dd99ad5e69fd7bc40a5c02c5cf0263949de") )	(156764, uint256S("0x502880995bdc438d99299078a079dcb02f721b5f3c0187bc50da8d309b83a382") )	(230145, uint256S("0xf8a562f7d34da958a9e40d0d20a5eec2008b135774cee674103f96ae6e270e40") )
(27932, uint256S("0x77d8d240d834368858decd17f15ef08dcafa97c0a4eb9fe675a637af15019580") )	(59756, uint256S("0xc7c7061f04bef6b0b22f6395287583a759bca45a8e99e630d2bbc8f1a6b7bf87") )	(88261, uint256S("0x7a6c23e2be3fbb28a5de2103535912d37ba66144f8e4130bb35c932350e99cd6") )	(115811, uint256S("0xb2c40a12d17d7d49d7f111c4156aab501e39938a8466fbf4e736f55aeb4ad506") )	(156802, uint256S("0x4bd2981377d2ef305a26f3cd0d4dc1eab8d5a2b7ced6d72924f9ba6cd81f683e") )	(230364, uint256S("0xb6238b99a4a85830cbd88b7b8292a5241c720df0b563554dd9f762b2623fd847") )
(27994, uint256S("0x7e3dfdceaf93b1898c4af565067e40e2aa1e90e41310a4ba38c4958cfbca5549") )	(59781, uint256S("0x5493e7076e83a5dc828f9df694956a12b7efc615624023ef13b04b9118611d5c") )	(88292, uint256S("0x5028e59c1726b9a8cc96907a93ee32709566672b4356d5589996f4af8a68de61") )	(115873, uint256S("0x2986f9e5dd940a4ad2962d5a9ee00a4e2f5c7fb7d5683d36ba6aa96cdf07abf9") )	(156827, uint256S("0xc77ba780505a3c8847992b10bcfaff329e6cf07ed3f2b05cd865a28d8ad08f22") )	(230521, uint256S("0x2ed507728953762243f9fc8a503c5ecf3e63e24f556099b48e20970cf528effb") )
(28021, uint256S("0x4826f2f8cfc8a6af365b4c3b8e18c1d05ef77aafd3a87e3933341ef4b6815744") )	(59800, uint256S("0xe3549291ee11532973d1ba02b40553da67706b65667c936877ddbe5b6b9a627a") )	(88343, uint256S("0xbbc68adddde26fd4f2c3c447a7b23ef367f9c474b231621a62438ac00714186a") )	(115888, uint256S("0x0ac3724751299d381eaddaabde8e389bad437f606be8aae2f80c24e38a59820a") )	(157006, uint256S("0xc529a49e7fbec3a900e9e3c85a98080b14f78b965e7a2a032511b8343a802e04") )	(230524, uint256S("0x2eb7078ac45b1e1a7c1c9a98f86dd16d5acc0d3099892636832d2d6da770b4c3") )
(28062, uint256S("0x82bd573077fa25a2e5f71c9d466ef49889825efec58419f68ef88aec101a46d1") )	(59894, uint256S("0x6f94120e2108b3808d9edecd353f73174e311b65c2eda0bc52377ff12a1b71ce") )	(88391, uint256S("0x049e8cebd6e6c6c558eb905907b9876ff079eef83035288caa47446e934ce721") )	(115899, uint256S("0xdf52629d0b8115cdb0b677c3139ef091a48c432a899d69b5ce7c4247842849ee") )	(157166, uint256S("0x2c4c7c9a6813710c91a238f743d4aca348b4c5c4890b5ca0bf700aeb5c6416ef") )	(230604, uint256S("0xa6a580e7eabbe060584b64dffddd1d7377dd00ce7023cdc85d0b7c166d439046") )
(28076, uint256S("0xa4b21d7a3873ba5bf62d8b2e54fcea3f9ed4123a9f22b5cd88d963e91cec5469") )	(59996, uint256S("0x6e8025395f82e02c4cebabcc178efa19d7b847eb819321bd2f2c2bd1cd48f708") )	(88456, uint256S("0x22092632e6931e3843b4f026603ff394b0fafcc97c2435e60c3c00f8a9b60c24") )	(115930, uint256S("0xac8c94e276789ecd560453c75dfc2aed505473fb604b9a65d620502d6da41b39") )	(157188, uint256S("0x6074f09742f9297b57aeb6cf447b4fdd3972052aaecfb5029d38599b80ece691") )	(230620, uint256S("0x80997dcede02c7c9372ef2b2e3d7e6f3e5aa3d6a6e34ef17e47a2776179c44b1") )
(28091, uint256S("0x465dfcfd7f5d837edd459db310fbe6a38a79bb543cbbbc2a848af9e4c23ddcd0") )	(60001, uint256S("0x87b8720ae74610c77cb338a8a3704d15759de35e0638519d0ebad267ef1772e9") )	(88505, uint256S("0xe1299d9c82412375e8bd5092c6c4ef3e9f788ac9a0d9061ffb19e87043d59c0d") )	(115945, uint256S("0xb8814c3190a87ed420beec0daf694f906f5e6e6ee520a8ede364ad2bf3082814") )	(157242, uint256S("0x173fb37fb2d3898b46c93279ce583c11d310744e1e0882656dfe3768a3b0ba95") )	(230810, uint256S("0xfc30a30adc26de7d698745b6d3dd2063bb8ebb536c600c47168c95c37070e76a") )
(28165, uint256S("0x2449b58e7f74c2ef52173b74bde63deafa5fd78e60cc673683c8d817987cc577") )	(60090, uint256S("0xf2bc0eddc05d32d797566774b13517ac2454a5e6955b57cb8a4a1b1efabf3293") )	(88605, uint256S("0xb6305afd63b1bd7dbee89ca525d1be1db4dce694a842340fc3132b5d82b3ae76") )	(115952, uint256S("0x653ad2b8786670c1c4c96ed7129cf26f0a6e68b74f69d749977a681f6c2f8305") )	(157366, uint256S("0xa76e4147ea46422414ff62d29b81d73d8798a26e6c0cb9730ccd96dc97966e80") )	(231039, uint256S("0xec425fa3abe92d75b1d0ddf9edd1a5bd7bc10aabc1fa62199e35d013bd285c45") )
(28256, uint256S("0x84b137b6508a1e524b8fb4329d9fe18a9eeca34cce4fb57e67d9c47753c9f4f4") )	(60110, uint256S("0xc7475aa47516266a5e24c4175c818ce0dea35ecf58d2c0a423afc05a2f11b436") )	(88759, uint256S("0xc8fcff52fbb9a11397bb769e5cb74b0b053e9d6350147af1ff3d08b7d9a335a4") )	(115998, uint256S("0x683d5e8f9b4589412c894eb19994c940e80ae661df1657beb1a337acbd30c324") )	(157390, uint256S("0x97442252570022128665c96f68e75cfb42e173f8bd98d20760ee6b8334c3c9d7") )	(231168, uint256S("0x5553ec7ede8215f56e77b8ad2f7fda48bc3ec0d6d1f9559a6a942a643bfb5bc8") )
(28258, uint256S("0x3fe30a2ad22722d54226db8cd1ff253bdcac30a6c79f9b83c8502fe355e6f761") )	(60121, uint256S("0x00768c1fca4b697767879b90c06fd8ee0a9e1e53189fc8a642139d7ccc97ac9f") )	(88826, uint256S("0x912442a5099d77c6551ab8cbc18f54861d32dc0166881ae20d3bc8ece9ef6c75") )	(116062, uint256S("0x7369d75910c4ed518136b4750bc7b6041500e2ec6b7b96bea0a96646858fde42") )	(157425, uint256S("0xbba33cb47bc25356056e107eb8cdb10350609a71d4feb74876dd78affeb853e7") )	(231383, uint256S("0x7fd9c44c495be84e7b06f92ee09c7f4fff6f7a25e8e89661ba3bd01abc224605") )
(28312, uint256S("0x258842d122f0a7fff9e6d7cb968b1adf9d2390f53451aa3386d7efe5eac860df") )	(60220, uint256S("0xfd8c84207f9dbdcf8b5ac395ad7cd0ebbf62468c6c728b2e77998ce45b20f7ab") )	(88933, uint256S("0x486e6a21ed5d35c5c0ee48ea37ebb328be826faa4b7ffe11f9ae63a1f2b712c5") )	(116076, uint256S("0xa32e845983a97bcb82ae22f424436789d4750afee79c87fbb377d20eb64d2b57") )	(157538, uint256S("0xbe999ed107fab75576eff68194a1055aaf9fc39a35c44ecfb0ac3190e0d15ae2") )	(231462, uint256S("0x39b30ca52b673a66fec0369e81e97f2e9654c79be4c57d291b4d12b24406709c") )
(28342, uint256S("0xe1cb71811f1c7347e8d57896167b44575666ed27c7d122718e22b42165405add") )	(60230, uint256S("0x0b33aae1e173f3a934d4b76de7856b53da39efcde5248e295f72b32eaa4e74d0") )	(88947, uint256S("0xbaee17dca1d7ddbe371db6c27ac9cab5dbe307368868ed7f7157a154bf782058") )	(116166, uint256S("0x8b6639adfc795ac67797e6b1ae7dadcecc828d656da9ca0b59c1a279103c47e9") )	(157562, uint256S("0x7c06e07c37c0e7db41f6c56a6226a089f44bad6d3d12e113a2c15ac45f84ac92") )	(231619, uint256S("0x1a19052454229e51c29a4cf0b589b58ac286173ea8a9365926b2c0515c46434e") )
(28396, uint256S("0xc6603153ec00ec36db0f4a9f2d320fc113d4488c711f4eb2589d4b5db715ac37") )	(60360, uint256S("0x530a30f3100f39e403d9b21506e4064c85d97e2a4c6cae074e23ebcfc910f369") )	(88963, uint256S("0xca6567081b1b0f21bb9e82b2f8b4b4e5b252fd1d1143311cc9b79cda3847dd88") )	(116171, uint256S("0x9d59bf95b17c5579d853efa555e19d4d260977640be8b6a3d76071a0001ce09d") )	(157581, uint256S("0x081a84e74b838805616d454e49cd15b64ce3a2bed675879588c3421f81363b56") )	(231648, uint256S("0x0ec2082809410af155f60c12291d3fcbedb75ec3189f3a6d7fb62295a39d3a77") )
(28422, uint256S("0x65a8634c90ff5ceaec3c4af38a7df479aca01d12503c44328faf193d44a2b789") )	(60386, uint256S("0xe5e9be42c89c02ff5652003467e479b66c4c63a4afacb58e188dd10df9f1f86c") )	(88978, uint256S("0x97a5873b49dec8bf17db1b4598171623ddc4a15cd25e754c4156d130824bc22a") )	(116182, uint256S("0x27cb4386cdd16f681103e29c18a4a16b091e549701d00ba211613c96a2cae889") )	(157761, uint256S("0x105c577c13eba84d7a0446b6d95b917e1ad86e84634977b29a58e9482f74b59a") )	(231678, uint256S("0xd2ed486444f8391ecf5296f70855a995d3dd272b7e81565c3a9e51ff22e319c9") )
(28525, uint256S("0xb66e17b5c3e0a0198805854b2a842755d54c6f45589e63deef3a8ad51c1fc57e") )	(60424, uint256S("0x9a0151f12e06c2059a6e00cf89ef09324ed006518bd97eac68460b6ae141a29a") )	(89009, uint256S("0xf5eb67e3e0ca26e5a6714815520330f19cde193a863ec970bccef8a4bcb19aea") )	(116203, uint256S("0x824b003444cea72c61d9d842a56c7b129a4f0059883df33334d90205bf435430") )	(157770, uint256S("0x915359ba6da5d3718118437e850c7b6d3163d4ba750603302aded9644b9ceb25") )	(231797, uint256S("0x6dfaf8ba628e2c9aac98c06f43423f514327ee25fb18dde6d629a812d13df9a0") )
(28573, uint256S("0xf58a36c1e1925ff47f73d0fbce61d47b59e6c3b89980758ed0109d9855aa7d87") )	(60678, uint256S("0x47148f248e4030d6a2196b76fac3d54272e9c74f9cb7710e1d650bd38984bec6") )	(89033, uint256S("0x23c96475388b5a6ffea23e088c544109c9ff2efc3a535be5e8ee9d9f0c5c0feb") )	(116221, uint256S("0x5a783418a78f366d1796ad02368a970586d32f583483809fbeca53233649265e") )	(157777, uint256S("0x0e47afa52debc67e61051ed855d6bebde3ad1cd582e35dc8cd789eb35c9bdfd1") )	(231808, uint256S("0xc2669943875c118b738229714c6a2f25990baa8e1653ca3619739fe2a01803e0") )
(28580, uint256S("0xf00cade65e643ef828b16179e129bbe51a8295f80edd135c5887e9b86267569d") )	(60866, uint256S("0xf0d69742ae1c92a568e02cba5a472de9bdcf0f6784f8db1cf57dd7a090fa6a7f") )	(89131, uint256S("0x70329f9a6d68afec9d36caf91761d7b79bc85f74540c0bd8e4ca746c4de0c022") )	(116246, uint256S("0xcfde041e4fb3b9bee6ee2a84b9d4cb54912874e389d6919ef4b949c845ab211e") )	(157807, uint256S("0x230d773cc6679ab5cb74d73b205ec5f6ef1157ef76b8a9af059fbe1023f9d2fb") )	(231891, uint256S("0x8812c302977b688c1a9021824834c35fb4a7c44c163c0cbec7429e657b3b5357") )
(28670, uint256S("0x9edf5c3fc405389eec077ed14de26c697d521d6abefd713cd2e4ec78fab3e985") )	(60917, uint256S("0xcf0b802fe78e12108c38cae074327b43c134e1b95cfb31322f39a22633c723f4") )	(89178, uint256S("0x076ab87c3f292e509c550dba542b9aba6446b6644777d393817b1783f375c1d0") )	(116299, uint256S("0xf8c65678e78cdc4d169507b136f40f0163997690696f1b1615f91553b01c1cc1") )	(158058, uint256S("0x52607ef00acdda3df3c9936d9f38515226a79713bc97474033dd1c28f9f1fc74") )	(231900, uint256S("0x5ae8834ac6e06b689668cd8e6f278b0738da4237977707c508e599580efc392a") )
(28891, uint256S("0xaa461dbb9246431a75109b94764eb2cb2e903b6daf92b7e17db84a01ef87b718") )	(60940, uint256S("0xcb8a237380d6eaef7a3bd06ad9c0d0116ce4f28d4e6534f15ef2b7bed7faec06") )	(89226, uint256S("0x895c2ed4ad127b75a402dd341cfad747b316583de253a25e3e4a68a6ecb94a75") )	(116312, uint256S("0x4a8d00364c8052f55c438a9cec3cb2e478d13ea3979219c4173efc28ba5e3a01") )	(158063, uint256S("0x4231f0edb1cb7a78c67b928f096ad7b596d46aa9af61d6ebd311dad558f91224") )	(231903, uint256S("0xf87655960b2aa4b7f48399c2f346b4c0c6bbc58593a46c244f49600c681d74fa") )
(29013, uint256S("0x9553f656f0cb968831721763ae31200ad86d427c2386815372c897a4a9534390") )	(60972, uint256S("0xd18a6cd68ed162216a8b8a79fdee3a0a4d4fa237e1eb99eb6c4c33a001a4b777") )	(89292, uint256S("0x8fcd945306793fbd2a2e2bfa528746cf3189055534de94d950416734230537ba") )	(116345, uint256S("0x349451dcd04f0f6696286b16a29587543786d26eb2637c191b69a641a27f4b99") )	(158098, uint256S("0x5a889475b53232c60100f2c21d0564dce56bcc9e0564cd96512b2a69670f03c0") )	(232164, uint256S("0x0985d64307e25af69026b5ad6990c21461f74bce48003c021d5bc7c6e569b965") )
(29036, uint256S("0x70ce4cbdbe54c44367512e2c6fe665b495e576b0562222256e4bac9e86863076") )	(60999, uint256S("0x292f826ece1030488956ea3889768efc87fa3443d378d5929458a9d35985c3ed") )	(89296, uint256S("0xb3a40b35b9c527d03b5860d74bbf9c8f4fe3dbdc2a45b2f3e6871bf65dc7d692") )	(116348, uint256S("0x71e6808ef76497922d0440124318b3f6c738921fd6a47139c1c02f140aa623e3") )	(158522, uint256S("0x7f21998ef78936602b41618a509c5ec23a06c41a8822e96126e4d8d30f559e19") )	(232165, uint256S("0xc4ff80c6dd6a4d714cdab27a5b303a4061ba73e7946fcd53c5e365a6881c78fc") )
(29249, uint256S("0x99c2a942f68de1161ec772a4817303e27a286992805f46bc9e66ab60b960c182") )	(61021, uint256S("0x342e48f9406e0b1cd38fa3025087773e59314c3cfaf2a07b4380e31b32ca66db") )	(89323, uint256S("0x0b1883b4f79f464ab795ca89f5e5e76d05e4ae8780b6695bddcb37dda0487cb2") )	(116545, uint256S("0x222f712472ca17cd3585f2b04c0e2b722797c32f3bd378750647a681e346f1c6") )	(158644, uint256S("0x874e50cfff443b91bbe9860560ab5ba683def6d23be1258995050c747efe7394") )	(232339, uint256S("0xfb420b1fcc394342f0cdc77f619058403f14b013d2c103bcc24e7cecf54c545c") )
(29280, uint256S("0x70b3c6d095c2cda47230a3fa8cb60fd463118a53cfa0263285ea8713a67e787c") )	(61084, uint256S("0xc9d656950ad954427dc74f6cb84d79b6beb2a71a96a4539f514b0cb4366c59c5") )	(89464, uint256S("0x71eb7104f2c0dab75446c1f7f2a55f7e5a452f725f851b591cb71942d9e0f5dc") )	(116549, uint256S("0xaf411de5473f1ddaca1e232785631165bd6c9d10c8477037bed7d91d337a65e8") )	(158970, uint256S("0x4317ea2d95dd433ba0e43e2b1c529fd2fb3e146ddf3987eafaf08a8f9ab56e61") )	(232395, uint256S("0x9594d55b6a7ba5343f020c91455253149438702a0c54f083d1bf858abdffc6f8") )
(29297, uint256S("0x97a9836348fe086ce1ebaa9e320dbae19c5a98d88b467344ac95a0c4c6d554e5") )	(61125, uint256S("0x253d77889f977d168b10fa109d1e98776ebadf94135b2c48cf878c6ca4f107b7") )	(89518, uint256S("0x7523cbdbad292eb5522c470c8643bd2bc2e939ca1679c74f52b7bbc0ebd386bf") )	(116607, uint256S("0x9c17631b2a49ee2975391ad1652e741948cc4337ce68708479d935178ebfafc6") )	(159132, uint256S("0xa975095a0074080b8a318e52f49517adb4707ae769df62c3b4c1fbeb863b3891") )	(232540, uint256S("0xffc728b38f4646a592d6d42406c428b5dab8e3cf269d9b4ca0d2219a90cc6e38") )
(29319, uint256S("0x6de236bffbcb5da3479206869c207a121e248d709fafc01fe159f6591ba6a7ad") )	(61136, uint256S("0xa1fadfa0744cccd60cff8221df45c227ea07d1f88d46b7b3ac5f3a78e20ed11f") )	(89519, uint256S("0x17d2ac458df05b258ad15a5a1b95f26e351131ad9da5b5108a58435571943230") )	(116628, uint256S("0xb2903034f6618f0b9edb1ea2dbb3303e2a5eac7c473af5b450c1e39f929e1a5b") )	(159264, uint256S("0xf4217b217f5a7f8a3f9420c7b9f77bf2d9bd09b059d9940b730869680bb0c562") )	(232595, uint256S("0xf02e95fa84a10c883aefc792f3652044df51ce396871c2965d3544a6b7c168d4") )
(29378, uint256S("0x1db52f6f0089193276fef19c3c145735baf6ec99bf4e643e470cfff3c3660a1e") )	(61166, uint256S("0x6071619c1ce64421cebf65b86df2180ad8674ab5c16d013c42bf004de428ab47") )	(89548, uint256S("0x5f2c275724a8dc4b64dd21ab0ebf74eff2f053a866a93ba4ea0742f5e5c63323") )	(116669, uint256S("0xbc42b5f2a61cf686156ece6a992e61400a9d32736a9a161454e3c4fba8dc219a") )	(159282, uint256S("0xdc1cf336ecf67a743b47e689e2ed3c50bbbc80d87aaac45c59328bd6ea01f339") )	(232830, uint256S("0x430a0b7795c2b44d9966d7df242fdae3353144210d7ddf62ce880460918317b0") )
(29430, uint256S("0x8b058a4a8e8d34336110ad14365c662c44938563d26c9c1896edeed50ca7285d") )	(61310, uint256S("0xa2821c6b1927014ea010bc5c0cd1813729dc336f2d261ff6a829f103322a283f") )	(89555, uint256S("0x3ef0d2138963445e99cca8bdf03c1b62222091d92ef2ec5e25adc0a7c6d0faf4") )	(116718, uint256S("0xe254405b8180bb594b8a3a7163570a75f14968d432ddd2626516c3fdf0d134ef") )	(159376, uint256S("0x6a0bbdfb22b39c5ac05adc7b6d2f739ccc1941baa45939a406f37947f852510b") )	(232862, uint256S("0xdebc0ffc73e2c656b00727f8d7bdc8e4088d3b54a97e20df5919ac717df94eb0") )
(29537, uint256S("0xe63e38b5b250b9852fc1939383922940e1aa4526f91fa276b6bf14c2cd882aa2") )	(61355, uint256S("0xa56a36391c3a5ab9157124d998c4c2ac09844ad346d96d334f4b79c321d7f5ab") )	(89598, uint256S("0xf8d5c886bcb5f9d464db3d0bfe4cf2910aaf0d3621675b0149c3a3dbccef60c1") )	(116760, uint256S("0x062bc2436a676bbf86436073a765ef76046a3a6fa41b798f194ef9779511a35c") )	(159659, uint256S("0xff4f9295cb9752538530627cebea54885f3d9ab201ce72e241dc89c1cc2bd6cd") )	(232872, uint256S("0x654777178f8e0245100cc10ab426d3d66435e8428c604667a8b544b34abe41ad") )
(29583, uint256S("0x12dd2471f1c4cb21c47f2a03b13623e7f0f1186c1460f347e6e4f7b661c5fbd8") )	(61377, uint256S("0x713c802cec8bffca2012161e608656cd66b995fab861a5a217249911a7819b7b") )	(89657, uint256S("0xb36a91a6768cb20ccdb984d42965b2aebf8a29c65c7f85f8b904751a5b288480") )	(116819, uint256S("0x2dd5ac9dddd3ad2d4f9e17a7da9844dd8506563e8943ea352c6cda1083eaa92b") )	(159673, uint256S("0x544448bff83a07c49ae43f694adc454d13d384d9e4b0a3fd46d3b16df5a7d03d") )	(232934, uint256S("0x7867e949a5765cfe5229e5ef14cc0c1341a909387e9974c22be4dda57a31c844") )
(29675, uint256S("0xdbfb12767fafb8851512823583461a94733e19ca09af9ddda13fc8f47ff4152c") )	(61456, uint256S("0xbb9d4d63032106f62a6043ff1f33f9e7634922a68177b288c380bd8625fb61fb") )	(89681, uint256S("0xaa886611cdf185253cd35bee6a2f607c81dacef99c67d4cc086f02cf56695583") )	(116855, uint256S("0xcd0de6c4aa4893948ca1b8ee21a2602d27ae37aa53d9001bebdd40ebeae10658") )	(159780, uint256S("0xb0c60dc54e92f132b4372f345ee7030b9b0972d39777a0059049c608cd6b7183") )	(233116, uint256S("0x5ad57830af5ef781581f3aaff2f8277bdd8d804ee2e78cfd3ea60e7c6c39b207") )
(29690, uint256S("0x1cababb84fb5527d6d920c30b5313270be2e1e6d9e12f9d977568df0ed87894f") )	(61668, uint256S("0x2d506da0993701f5376639a2436eff52d59f3c907b30d593bac974b89da56b73") )	(89701, uint256S("0xc592d3c0b1a5cdf61786f3727f6fd048d02011c0063348ea327aa4b646a31088") )	(116870, uint256S("0x3ed3a2db47baaec5dc71410ad89e0eb5468b9a0028cdc517fb93937d96c7f0f4") )	(159788, uint256S("0x3d0f39600d8d655621ceaf141c063f2bdd163756c2b607d0868cb55c64287dc1") )	(233308, uint256S("0x1dbd685678ed7dddd3f79dcdba499ded0a088d277dcd480309225a36f24afa06") )
(29723, uint256S("0x1e62e9c4f6a85f55d92713bce712aa8466b7661f6afa0fd4c89d180bc1c5267a") )	(61671, uint256S("0x2d212dcb11160078b29b553002af58a01af18f604d114d314268acbad773c483") )	(89758, uint256S("0x6413405e9934b5728491f01dc946ddde5b0a379e3ad5a96161cf467803daba7c") )	(116886, uint256S("0x59d3e40807556c6650d6640abc5e9cd8f1188ff83817cd76d440cf539c676411") )	(159873, uint256S("0x9389c705226a1c80d5d0e86622f1a4f6ee619eaaad08d0b173ece7fd300bfbfb") )	(233353, uint256S("0x16abefd95310aea67c65bc22568b1132759c11ca05d2ff5ae56111bff969d60e") )
(29765, uint256S("0x905246d10f0365630a52681d8ad8f33b151e4e28ea69abd7e87165a6a29a20a8") )	(61695, uint256S("0xebdbdb5be21a1b736a0c1735c430b5d57d440a7f30fadd1377c6b9a27c7dbd68") )	(89767, uint256S("0xd3f13cc270d1c0d029f78cd6d6967e10f950dd9763be81c4b5dd3f1b66195c57") )	(116902, uint256S("0xfeed5b00cd25174c4cca277c47c0444f9b2a93eddaf5746c951c55e1d2c821ee") )	(160011, uint256S("0x62cdd78362bcc2c9a97e5c2643019c56e946649c4086550dd596f8a6ac0b479c") )	(233355, uint256S("0x98ec107f9241814aca6b56a6202986ceebb8ffde581adbedd1b4f03f70e4666e") )
(29829, uint256S("0x5d1f4ce32a606caeec635caaccf8b18fc64a8ade93b2c0f1cb66ce01a8822103") )	(61824, uint256S("0x4bb85440d7cd562311459f7f50494eabe16c3ef3163c71cbf758080abb4d9523") )	(89790, uint256S("0x7add060f3b93c4f25ae26907d364f1a35564f0899b54e4039b33efa3ff3b6423") )	(116964, uint256S("0x3a0d6eab09a43fe5ca56df6d8a020554105b025f3635ec9b9b168c95420b75c2") )	(160121, uint256S("0xc73ffebe08008ea000996428d624fd7f1237c02e78fa030f0e0d9d1e61cc37db") )	(233565, uint256S("0x6b13414bd526673f832deb272e75d7e12b13df38c72119fb40b74db3b48208ad") )
(29841, uint256S("0xa1d71d9e059b1d9be45d03e472bca826c552ecfcc87533bc73ada5d638ed5631") )	(61828, uint256S("0x518da45df1df3c1a2ba48ce5ac060b6d0027182638f990422a5de518f34c82a2") )	(89855, uint256S("0x9de2ae89d8e56ffa04f0b2f07956360ebfb91b0e41d9fe73ebfc1815fb43c6ff") )	(117024, uint256S("0xeaa0f6084d908244492129b893bc0bb8a837d468ccec2b8bcde03054e54b77b0") )	(160217, uint256S("0xd924641b90b1db7282208ebd2f6ceb08446e917374ed1c2f0b5431be6d414d44") )	(233870, uint256S("0xabb20f97fce3d373ea4ecdcb4f77c408a4efe69e010afb51b22226dd6a6423eb") )
(29860, uint256S("0x22c2dbf4838e0110f405b7b4aa63587675ccc0122f8bc32a45b898533aeff349") )	(61890, uint256S("0x6e83aba29dc2d8ff5b12f90c606d7012b68683a0b73ad9eff94f19a42d2b30fd") )	(89879, uint256S("0xfa7d58d0d073b176f653e87e787358800da99f39ec35500e8b6d0bb83591c03f") )	(117026, uint256S("0x64a9a58f7466be76a81379ecdbf1337a7af5181b0423121229ae914faf605585") )	(160477, uint256S("0x0f2b853cf9452bab5ebe88b03459768f21c5ac3c40a5e20db2d610d548ad8088") )	(233917, uint256S("0x592c6b11ba0accd1eea482e54cc6d3a078d0cd391b93ceddb50e70709f0f629f") )
(29917, uint256S("0x7da7ae26c0f83ab24c2d200213b2b8dad4ab837ca525112c2a89b041577affa5") )	(61958, uint256S("0xd8a18ea0999887104aa8c73ac50d475b020fc5b8f13e12be650dbc9636aadc2a") )	(89986, uint256S("0x69df58727606599d68c18ec58e9b0cf8c5a368c1d4596ba1da3759dc7f2f58c2") )	(117075, uint256S("0x9c3ab09935bf18f4fab52a9c9720ec925381935a894f64739bebb79814eb3571") )	(160578, uint256S("0x5d228f32697fdbffe0cd2da94be27f97213e9ee613b4915c7f39c567c557cabe") )	(234263, uint256S("0x9e3599c8826c1536a99a1520bc1f4cd6a6a9539b33b4d6aaf1469ae7e9b2932c") )
(29924, uint256S("0x26e0db987ae04fa765d37d6a38980f4fae84319f0301523c06d266c4012e3877") )	(62020, uint256S("0x16090cb2dfec7d840967bf51b022af9d28107481103650de48c65fda147a3563") )	(90092, uint256S("0x5c6e8fc9a36247218dce619a1b1569ff0a117c913c7003b86d8b3c19b092ce45") )	(117106, uint256S("0x1e49e5e76dc5db91eb174e3b57cd505db83546036a222fb3d414dfed69300ade") )	(160709, uint256S("0x4c78a9d44add09592bc98d19026cc45db461ba565f3a0bdc0f8d64013ccead7f") )	(234508, uint256S("0x6631d085e7740022dcc8f295a9fd6f5f733eae872d0aa249e1c24b0f2fc2b565") )
(29946, uint256S("0xbcd33b73bb0a2d12c0899eb34a31486564a57ec9424beca16ec6cfb4e017f1d6") )	(62112, uint256S("0xc8c0a6ea7d8825ef71f1126c6778082614f93d1b831f11cb89d73422572c5e72") )	(90096, uint256S("0x959a36214cc6f42b212a119c2dae5f4defc99e0deb2db5f69ed8c94c0c86d5de") )	(117138, uint256S("0xd200b8f648c834dc3cfafa99a5286b57f02c375d2dc38c7beff5db0af32ace1a") )	(160776, uint256S("0xef8b9cb9be03028fc537c48af98560311b20680081e94a4c2259741ad93e5d11") )	(234552, uint256S("0xcff54491f8987fa89099826439e4076edf7f6eddf5417e894a9becaebf13d306") )
(29968, uint256S("0x2e086b62c4b53c4c5d0cbfe75a1dbd14dd40da1561c3d2d6792f925a02f4cc91") )	(62118, uint256S("0x78c15f4bb308754b65b77db8766e3833d3bbb82a664f09b24794c7a1f19de990") )	(90110, uint256S("0xb25e8e8ef2d6f9f48d089c16d5b9d0f108372a02ade2e217806f5fb920318f5d") )	(117188, uint256S("0x5ceaa88564211f47e347b49f4be5f74f9c382def27adae1636f488571416e951") )	(160779, uint256S("0xaf1d1111e735ac4212127c356c9972d61fac30b6d5bbd7b0e1eb41df276fdbf9") )	(234611, uint256S("0x193d4e85328210847e2825929dcb6485b96d1a6c23f2ca867a40f4cdd22ca682") )
(30013, uint256S("0xb83c5556848576d457ee84894b75ebdfa03d366db0b7eb503eb4ceb265794e7d") )	(62135, uint256S("0x3fbadd553e6bb861fc6d9d93baf99984f658d46bcfe39538814c07603622f287") )	(90237, uint256S("0x4eea4667b87ab97563ca313e8e57ddbf53a9642364ca3f8bae9c43034718df37") )	(117222, uint256S("0x8adc6bae6841f8a31b66fd4a6e7913756df0ff0fa3637c3084d05ef77577712e") )	(160800, uint256S("0x2761815b74e240c198549b6e3aed58b5171e8d05db206c4e75104f3f28559fae") )	(234615, uint256S("0xf4ffa5daa182b944072429c46e445d7b75a2828149e28e9133e25e5e15bbd7a2") )
(30034, uint256S("0xc058bfa037503097084c47c64e0863ebd3726bcad89819a39c11a0b829d1814b") )	(62140, uint256S("0xae147671a3628158b291e974b9ff11bec53215eaeda807230e32299d1d0d2ebc") )	(90322, uint256S("0xe9d605eb92bd8fd723d561ca5f5063924529a7b42f7f626ef26a9f30e68b9b0b") )	(117375, uint256S("0xab46e8c642cfe6d3ce161b01020b3c9651226b9a1510b21f08da93be80169161") )	(160875, uint256S("0x7f1540b7d1fa817cd6b0d1dd9a6c9982ece99774e316cf435fb5cb7058d3c167") )	(234623, uint256S("0x2bb5c601b906a27edfb5f650a25492124eed47b496f2276a2de2a81c082f5bd5") )
(30038, uint256S("0x1d77a8a79e1cc382f0924440d48cee74ddd5efc68eee3da0f1b184bb97bc35d3") )	(62246, uint256S("0x21ab8ad2dfdcfd57a4f1c62337a83603904d13cb93ee0835050efbff783e159f") )	(90349, uint256S("0x75051667ed586d2d2506d0b3923b1001a1cc53831b08abd6489980b621d2a12f") )	(117392, uint256S("0x00fdf8c1abb53cbb76bc5b4a14d135207dc567783f4df2fea93a7effdceb2d11") )	(160887, uint256S("0x3abcf8017dd67cae8f4e0361c2e211518604baa89e262389c3f85c85135b252b") )	(234720, uint256S("0x132f00ab57450da4c74458cbd3634be8802f3f8176c675751b231de5f38d9b04") )
(30064, uint256S("0x91280ddcc4b4dff92e30090a734231170d4964ba16ed584adb8f558d15ddefc1") )	(62256, uint256S("0xd375cc95f1a6f82982c6270e72df8b9247a0f4a147d5aabfbd907258184a47f0") )	(90365, uint256S("0x27729166ccc0b8988ea8aeaad894f7a72f404733a29b40ca0943eb43931e5e0f") )	(117421, uint256S("0xf7caca84eec7524a2264465c2064d0833e5810553b00f757f828342f1459e299") )	(161217, uint256S("0x6455d990487083d5c50036001376b09ff3e7ba0b99d4f1d6da9892a3723c3393") )	(234832, uint256S("0xb29bed5b67773f537083851a3671485465a59fe39141d61510f5bb6fd73dac3b") )
(30086, uint256S("0xf3a18df9da8c2717aea216c59e4247a80ba8dc8ec1726ffdacb8953b264b58a0") )	(62292, uint256S("0x9e44c3ff35c83f8fc711829ae78e95c5e3d9d74f473ac7ad42b194dec7bb888c") )	(90402, uint256S("0xd222677dd3c5364205968dc1dd2a1555764bf14adf33863b18f00925984e34e5") )	(117472, uint256S("0x32de11d74e4c7e34bb64ceff69ac921f5358efed1223b0d6c2503821974a5dc7") )	(161243, uint256S("0x8f8e04deafab00e217c90836f493285e2eae21bdb439c648d954c245731cb4ae") )	(234894, uint256S("0x186d2a6feb60b5e6d5855725ef3f1b5288ce3e0d6c67a076cf789be85161ba0b") )
(30102, uint256S("0x6320977bc45e596a14e9fbc75168bf89d25da82015f4b16ef4d059c4ff9de3fb") )	(62336, uint256S("0x9b5ec197560a94b32d59dd4a826d1bef8775f099fdd0a8aaea05c7707d2aec1c") )	(90444, uint256S("0x293067ec4813591e1d1f40c8b199b41154e4873f89eea5d0c2e26b38826a84ae") )	(117476, uint256S("0xddcd70588ef01cc3bb10f465e06feffe5f6bdf38bca97c4648bd5bdbc3e56443") )	(161317, uint256S("0xe499394516c4e64727a1f293ebb62ec06644b31a2ee926ad74c0df05bd78851e") )	(234982, uint256S("0xdc40e6707956d178a53540006ca95d7c3246a73f7a1b14c1cf8a2bbb10636232") )
(30162, uint256S("0x463d2262943bdd78690eb4dcc201e2f04c1a41759e86bf99ad6adff50cd9a886") )	(62342, uint256S("0x0159851a67f1ddc2a20e27ded84d193eff9e6446c26ec66adcdd0c0dd2bccfbd") )	(90469, uint256S("0x8def33cc0fe09c12784f487936dd02935bbe131dd62a6fcca842e85a5023c507") )	(117500, uint256S("0x11be6d462f8a4e89512b532df50b657da3374b9888d14c41478d86b22a62d752") )	(161448, uint256S("0x7ed4349a6e6b4f784103c495fd24e534599735d8e2671af23abd24e07cef5030") )	(235091, uint256S("0x015464312637b39e27d139412ff5728db6a082917d87a4a523cefb05da29171f") )
(30174, uint256S("0x1d4abb1e2c5b01d2ea921604fa867b6ecc1a9b194bee1501a3a5980324aa616f") )	(62461, uint256S("0x44101efadf9ae1a2cd970c2b8c4c56bf3cafa6b0696408b04826746c967a60ea") )	(90474, uint256S("0x8f1af4cb4cd9b9638c848c7b276841e488fb6689a1651031d2a89377bc6fe9e7") )	(117503, uint256S("0xa0ed3c822afa583cd98b9225b7db1b7c60cf56918a1226a5f1fcebc9a6807be6") )	(161624, uint256S("0x12899a64b48df2cfb31fc51338c36fcf4366ac15280ad33a43ac278b0f6a1e17") )	(235187, uint256S("0xf9c2512168e2f7606f1031c189528639448c5982e877709409ab03c666e1a708") )
(30199, uint256S("0x5abadede1378999869e9b8508292ef34988a831383f474c8277a1742281f4430") )	(62522, uint256S("0x021889abfc7eb1f3a4bca5af56394aa9afb421a22546de8cadc1ae2caa76342d") )	(90498, uint256S("0x04866f618eec660fe139afb22877a015b2fb041d7cb10eb093160373baf001b9") )	(117562, uint256S("0x9ed95c156a349ed550be2a86ef76e9bfcb94587726e0a2cf95b0284335711d04") )	(161814, uint256S("0xeba130d8ddd220a80049b6a00f1890aa33f083d2db67231a97c23615aaeec565") )	(235212, uint256S("0x4363d7931d61bbb9a4b43a1ed9f303979da231a2cc42dace1a0032e4109ea083") )
(30280, uint256S("0x85038eead7b8e33bd2f677e283e17693d0b8cae86083fbc6464ada4be5a36be5") )	(62546, uint256S("0xd13dcb7bcfef3f97a47295d505afe0d196830d4ce6ba0bfa6c6e8b92ad0a4cf4") )	(90512, uint256S("0xfe8b4e8fadd5eca8bd728dcac78677060cbdb822a885f5fd98f8cf0de158b77f") )	(117576, uint256S("0x8d2c84c5b4aa538bb08421e9e3c4baf7e6e8e026e2c7272c5c4f87e23078f53f") )	(162206, uint256S("0xc9717ad08ff24578fb6c460d33b9d2042329dca29d8df2a207797954e7ec3b9a") )	(235272, uint256S("0x1f303f6c2e0dce208786619bb1e58df20a75959a2578129b417020f5855bd613") )
(30337, uint256S("0x9f2222ec9a24267a302d5a0232625392e721669233b0aed8918c1df93bfd911e") )	(62564, uint256S("0xc0460e1416fdf6ce704fc26dcd7eac60b263b3df8ee7d47f11f00a72753db48f") )	(90516, uint256S("0xceb9685c875e122e9516f3f6c1411c473d4a67ac79c510e617b1c0b391406ecf") )	(117636, uint256S("0x225da116eb3ee3c8a1dbc53275a66f44cbfa082decaff1cf4dd564f6ad71fecb") )	(162355, uint256S("0x656f3b04fd0530e723219952a817c6b9ad2423c9ecfa0dcb3444e7699ac83c5b") )	(235279, uint256S("0x918cfb3ada871e77119d2cd7570b6e52b677e8cc202a806b460c16eed42e2376") )
(30375, uint256S("0x03259804c4282034608c4a9c302be2830f9aab235e5427ee3e8d9d6de0931276") )	(62624, uint256S("0x831423e33ef87147776673d89e415cfd172a7008c3abc4cf812b1abe089fa498") )	(90518, uint256S("0x1441585d86fa374c161b2e8127b490267dc4ddb03adbcd78d186d4f51562c79d") )	(117712, uint256S("0x5dd62329e972e3777b93eb1bbe92ce0012d4e2dcd9d408f229ac5f6254bc45ee") )	(162453, uint256S("0x57bc9b14ac741133a9149dc5f577043b408829c8dcc2d0e44e9ee61ce45fade3") )	(235334, uint256S("0x646f0c10f81f59a7b00b40fbce0cc825abd659c54a75003b5393bbc153e0158a") )
(30415, uint256S("0xa54bff079485906767e992c84ccec338d0fe62d7e5048c57467f35731e468142") )	(62644, uint256S("0x0ff40dbe7f2e6ef7112d099a2186e7ec5653a28a3b9554c1d7d13e11a9a31cbb") )	(90564, uint256S("0xe1af99af669a87e26de6cf0cee630d5019914910e1f603621633046b554f6f0d") )	(117741, uint256S("0x5e39bd98075c6bcb3e680bf9047c45b274c54913509cdd2afc6470dfd41d106c") )	(162897, uint256S("0x12e46e1945869baa6f53ae3afc284590b138a1b71f57623f395ac56871f14691") )	(235832, uint256S("0x9f022b37832b61f5d53c737e5f9e41639e2eae1b87815746cc42cc6cecd6228f") )
(30417, uint256S("0x4d086bedd07da11588f42268bbf8db95fa76ec1c0b4f59c22c4770dd0b18c94e") )	(62648, uint256S("0x7241b626ae902d406bb47ce4bcefd418cb7cf2aebafdff311ea6be7a15151e74") )	(90773, uint256S("0x345f06033b0307e8864f8d2c1d99cfb3d421c4f666fafe77eeabb9d0ada77136") )	(117898, uint256S("0x2a4c98f8b1720888eeaab7f4fd871b264505f3ab3c5fe0bdadd484ffe2470cd8") )	(163070, uint256S("0x69ddcc5431b7e486f9a92e0ddeabf5ed7a05f5c2a4de09c3f7f8781736c307e8") )	(236218, uint256S("0xd306b4c086923ffa3be52d855b18c39116e256273a27c39eea9a3dd9bfdcf708") )
(30529, uint256S("0xd96a66089332337c0395168061db4746d6cee6c290cb894802e5f0466f2aac43") )	(62688, uint256S("0x0f387ee99e454cac173b8df2bee0c34e1c4e723c5c7d1f95022878e4253d8892") )	(90791, uint256S("0x417ad06289f7bb7c07851b5bf04e8a9637728c6d7d40cdd660d751934c9835ef") )	(117914, uint256S("0xb4cfb0817e0b3996c681f846e2b6b473a6623dcdba2f9aef60d5e34fcd27b556") )	(163426, uint256S("0x5161bc254ee8de1c01e5721916d5177327fbafa944b567ff18219948b1e19e44") )	(236269, uint256S("0x6907186989655f84677ca20d1d5b02d16ab7c08a0dca13fefdd8e4642eca670b") )
(30625, uint256S("0xae5c215a094e7e00bd5b8c2ffd78db2c884087846f131e5efac010e7fb2d80e8") )	(62747, uint256S("0x3dd56acfe218d5363617ed20b0f86b898a47c8720c65a8d8510c471649cd2405") )	(90798, uint256S("0x5fa301550e26c0371f384c78237ce97aa3d3266ce61dabedc81c62efbb5d0bb0") )	(117940, uint256S("0x4a06615dcddfb98a07a730df85fdf926476011434860870dedd768fd66453ff8") )	(163473, uint256S("0xe0d52c73bb0c7cd9f07b2a343b9a491ce78b195d9cb0081a0faacdae2dce6150") )	(236333, uint256S("0xd163bd8f3ea1612a27e181a71bbb026034217a673b04e3fd20a55d79d0fa32cb") )
(30642, uint256S("0x5d7412e16eedb2af8c29d14f93ef0f035e0b2f08dd68ab50b59acb5786573c54") )	(62766, uint256S("0x324af25637604713dc3382e90420a9249585702b04b4ae9c64954918bd6676d0") )	(90849, uint256S("0xc38bbfcc4f423f73b819907a305cedd1ef6231e8f0cae7e1841d9e04f17a23a1") )	(117941, uint256S("0x467ed7083dc5ef0dcd63a53c35d3cd82ea454fd1d1d53ecb5d7cb4569f252c0c") )	(163577, uint256S("0xfd3fe0a7229c5902e36baf54416cf7b6f882ad1eeb0ef1d273622065fe14153b") )	(236472, uint256S("0x72436be352078ce7e693bf8eaddf9997a54e0aa0901a8d37d0da8776401a1387") )
(30661, uint256S("0xeeaa71053e0ace380ccbe78cb041f5c4a8a22fdd10bb3aff157285113a3a23d2") )	(62825, uint256S("0x440c27f2a36da06344ebc6e1df8d9cd6bef623b71dce38757cdd79fac22c3731") )	(90893, uint256S("0x0a971c437a9a0a2db173dcb95a024db8a4c73f5d8dbb2bd78f0a0812f162ee64") )	(117959, uint256S("0xb3034ed64392809014cfbc14301021fb34f7bd6eef4374202caa1adadefdb1da") )	(163615, uint256S("0x6c7df6a8e457399ed9becd0bb5632cdf838bbc65574ee8333cc5f02df3b4221c") )	(236540, uint256S("0xc45ada3bb91e1ab611bcbeca1c75ab3329f72ed194ef3f623459983c0454cd6e") )
(30729, uint256S("0xc99794ad107027fbcd07ba0e328f3c06257474e0308fce1e90ca2f3f4fa886b1") )	(62868, uint256S("0x257d33827c1d46d017e5fe24e226e00692671564fc553158fb35110e828b8fa5") )	(90899, uint256S("0x581c8877e5ba3b0c38f55cbb35a3e617b15c587f51fc7e75b30ce3659c6512e7") )	(117979, uint256S("0xb861fe23afa64094f1dfbfa1e0e1f1ef7287d0eb255870750d1b36a7d04348e2") )	(163762, uint256S("0x9bdf5f622fa686522e719e24d5067c390de43e89943a3d6993a2459fafd0a228") )	(236850, uint256S("0x50ffd5f4152002aad0ea49c3d43b8ee6670c8650fc31ae04a6726d6286b756c0") )
(30738, uint256S("0x354c6801822174292bfa64141a22aab0b6293259732830fa5c7df76201093c37") )	(62892, uint256S("0x3f2f5047e2c6f0b3f426d64f12e2e9c8a7a4ec09e01b3540d66e4e18ed3bef7b") )	(90983, uint256S("0x8e12b537fc0324c2d5d064f3354908bb871427c21e88dedc2cb12687a23a1c1d") )	(118001, uint256S("0x84954aba4051e22da674752906d2027c4b588d3a6c1d9cd7ae7727502a84fb24") )	(163936, uint256S("0x4353ad498f4252e5c72681e5f94dfda07a58a46d49368795e62abba96394a8fa") )	(236947, uint256S("0xbc58674ff453263d23341ccc85b985c2855258d74b563d42a5d989d48bdf182e") )
(30818, uint256S("0x3b4ce8f6904b4c086b6f74485f7c2504ae806a863efa83210e6bed6b9c36c529") )	(62914, uint256S("0x189159b6a0dc7807c3260eed27665db46f3c2c12f64a1ca40f9ade8ddd52f4ab") )	(91006, uint256S("0xd984e38554ac9687539c898db9ce0938d03eb5d6c61824a9f2ff51ace159e6bd") )	(118026, uint256S("0xffdab071a1474a568661a188f5e08ac2e65bd17a4b73f426da9a6f4ef585c4fc") )	(163969, uint256S("0x80ab802c34b39e50a3a7efd582a8d529eec3c3d983170cc61bbca66a2dc52383") )	(236968, uint256S("0xec0727493ab9c78afc7a8d892b99d24a9cd33b8cc4bc3547eabff9b170284fa9") )
(30903, uint256S("0x0a2b014fa7450a2f7c80bbdb21dfc673923b9e488b118f80ae63dd060d6e592c") )	(62934, uint256S("0xce500e4cfdeb24dc4880013441fc44e4b2814c4b27037d499140d6528555b3c3") )	(91051, uint256S("0x841bbe1e2297aee3798307bfa14b3a6a53bf24678ab7b43b939f8e0ba44388b5") )	(118037, uint256S("0xd672c764731883d412ca0a39f213eaa1908572d596c4cd266a4f29cda503e78f") )	(164085, uint256S("0x7e8b6abc41a40bd5bbc3d34eee4adf2a1e9bf2a569a7910a8575ff496d9dd9b8") )	(237058, uint256S("0x4f2f5bdc248a04654a7d2fff89976e07ced2462e9de00185ae8b8dde4595cbcd") )
(30979, uint256S("0x6782b6510a70811acbd3c98a0619c96d7675f09f7dcc0040eaf0e4a7c2fabdc4") )	(62941, uint256S("0xce3c2449b4b411eda1814313f6c175736ccc1a85e98b0b89a3bbffe9fefb3ec9") )	(91110, uint256S("0xb2031cf8fc008c60ac63c053bba5751c3b4e83f9bdb5006586bbe68b53803061") )	(118042, uint256S("0x655970642550cc92d498e632470fe937e416542e9ddfb6b2620f0d6ba4481093") )	(164320, uint256S("0x5d03dec4e9a5adc7dafb0d6b0d3dfa795f6e0da3c397524ae32fc43a38ee328d") )	(237117, uint256S("0x5ffaddd2088fb6091391375eb00cb365401c3c1f54a4b7a76123d8654fd37281") )
(30984, uint256S("0x7618c802afed84d59ba45071fc90491515724491487bfba90926c9e6990a1292") )	(63033, uint256S("0x44589e1f075763c4103c592c87d3d67a8eee5cae75a4fe2071e99426264fac22") )	(91156, uint256S("0xe838baa9d5b8b528166f7f59ed597a526c7e67a792c9433506786720ff2d2a57") )	(118097, uint256S("0xab3e0a8758c3c723e00fbfca7b235743579e3dde1be3e3db8de00c936ed7989d") )	(164493, uint256S("0x55d76c2329106392618d80a2b20962067925cdb56bb58c1dc4dcb86dd4bd47f5") )	(237374, uint256S("0x73b173940e88aeacde8cd44c83c3422e9bd34f7cb1e6984b00d53db9721323ec") )
(31050, uint256S("0x3c10c81831f7b1467984eeed0fb4837f68019e153e00e91894cca48d75b28520") )	(63131, uint256S("0xa4efde7809e9fbf686b16a54210bfc59ccf6b5895c3c1f00b282ec294998def4") )	(91201, uint256S("0x109aa01809fad4cffdb56b5f2b8f954a8211588a35291f12224a105abdc20637") )	(118156, uint256S("0xc6aad94d01229b1c599b3c93082e0917f7f8cbde2ffd6a3bf570fc80f4e763cf") )	(164582, uint256S("0x212e045831fd78f942e1c92817a083ca0b8d3eaaad92c1071e4f257940271a02") )	(237698, uint256S("0x1807adac2c04f3bd4387939f0a22c31349adadbb640550f076f243feae7018e8") )
(31072, uint256S("0xd605c35fb300108658c137d8eb57ab07d9e7eee2a317e7b6b2e2955a535cd1ab") )	(63182, uint256S("0xcd92ddab2eccd1260dd91cc90e47908523cc89ff5a91de08113d36207a011c37") )	(91258, uint256S("0xf2ec79a0b10e6a04c00ac1d3aa3c06357b359abcc57229b59c69497970f0a5aa") )	(118356, uint256S("0x67fb3d87cd7d34ee192b313a2e25d7bdb679c5ca22c27d26d78c54e2cd4ac4cc") )	(164602, uint256S("0x38465271956d3f0766f9d1040999170b405d617eefd72bc47f724b32b98b2eec") )	(237952, uint256S("0x3c44f7b99b4989757e4d4fa79641ecfdd283c7f602e2dfcd490d917be3217d96") )
(31082, uint256S("0xfdc1af1b938d225551b2c0a86f091b6595ee2b3a32f1cc47a2442aa4c4282764") )	(63219, uint256S("0x205d5538a1bd4078f2422bddcd46a76b04b53a754e12012179ec29c3a2f4b2d1") )	(91355, uint256S("0x1c0b81bce57a261b1a0da65fd01fa3257d8d8ec66e4c585194f17765ee9a9e16") )	(118358, uint256S("0xc05cd4016cc847ad187ad83b768a8b700e957be0525be757835d4db896d3232b") )	(164819, uint256S("0x056ff2b53bf2b34d457cbc711609239509015f4f559a83686977810273416107") )	(237966, uint256S("0x96dfb65c3cef6b2b4ef63edd094eb0f5bac4c75321707b89ad5cdda45622d036") )
(31100, uint256S("0x1f87316809e0834619a33e0bd37fbcf29d0fe6a5b5717055fa977b454adbd020") )	(63345, uint256S("0x70fe36da7bc9c94958923e90d2278a51f11ffb24b839290775c7360e9c3a4a64") )	(91441, uint256S("0xec882be836ad4372a39753f359f84964d057517bf78a9e54de7581873afa0268") )	(118405, uint256S("0x9dcc57665b96450e5ddb1c7b14951205aaa84f399a8e471585571afbc1333004") )	(164971, uint256S("0x345b577f1e51c9778cdd721bb8c27f2a1bbd1c3483b6aee3c7303cb00012a630") )	(238007, uint256S("0x1248df9f675defe5fd14c33325947d992e6088e575c90d0b30335817907f6c43") )
(31126, uint256S("0x6c68e8c5dd698cbd5349c7041f45cc938baae370535ac7871ef11282e639030d") )	(63387, uint256S("0x7f30cf3ca65a7aec33ee40bf6ae876356e60535e78e565c5e47624e5e4525175") )	(91474, uint256S("0xe143dfae92ff0be43305e2b5c393afbd85340b81e12d0aa4e89acacec941f7d1") )	(118515, uint256S("0x8856d2af9b9b813c26393ea02df42cebe6372664ec508c0fbda52953f447d74b") )	(164988, uint256S("0xc514ceb88bdfe90835fa592d7b578df3e2f67a8d4b94188660fb3bfef5927f56") )	(238292, uint256S("0xa86d77574d3cb2651da5a9f5f6195142acc3de0f8a01508b1f34b4c702c4f6bb") )
(31198, uint256S("0x54cf19c3be9a8ac443eafe8fa43d19aae046f5081ad95455fed92fe9eccf06b8") )	(63395, uint256S("0x9b6a3b48d6afb68b82d23ebd058f88709f165fd30f453577ca6c6d828c60bbc1") )	(91506, uint256S("0x7beeca1f6b99f7565261672756937331858c47174c541b3e4d5a9ae9ccbed901") )	(118524, uint256S("0xebddea0f1f40f80abc8cf9e437334aeca33f4c7552e2d2edef30a09c7db6f50e") )	(165138, uint256S("0xe0d2c8384bb23fa00120a4318ab75da0f90280f4e193984762c419f466fa9122") )	(238356, uint256S("0x1426f0a234eaac2f1e59c9e45aa0297a6e76b90e9cc123ea8d4240952583fbd1") )
(31210, uint256S("0x9fb3493e0c8e6aa35bf0462ec9465f98a80d87e671832d95255b19ac3b439c86") )	(63473, uint256S("0x6f01966587eb2ca0445c5e9d3acc11e4e081943a86708b307f536f226b341d14") )	(91539, uint256S("0xfbd53ef909807e81d5f50eba0e89da37c2b6244b73de932278376e548c6459da") )	(118532, uint256S("0xf1cd7823818221220ae34375bd240bb7a14ac0e6920c4b38faa5119ada0ddf6d") )	(165325, uint256S("0x675be125443388ee5d0aadadc1b1064bf15f3ed4127b11e68da97f340aa621b1") )	(238380, uint256S("0x62a2454e7abab1d2bc4344d806406fc55b6fe08d090eac88b04878eb49523acb") )
(31245, uint256S("0x7c9104ec647693c3f1fe75be11c61502038c6b92a37fc036bb5945f8f5da2428") )	(63525, uint256S("0xc301c6d9c15df7b08d65811e596e6b4c06e5ea3af6bc138ce38b398edbf86c54") )	(91576, uint256S("0x55527f1900e91d0d49187babf09e2680f53f8d994a8fea779483fe0c86a42193") )	(118662, uint256S("0x6d62acf1b4afe7aa8a97e6b1c7d6c7f541b58d2a87fbe78cd8fc62fae642e05d") )	(165401, uint256S("0x04d9fe0616d1aabc5f32106b058e580e9339220ff128421061a643dfef04ea49") )	(238403, uint256S("0x608489311b5fd0757abf8dd3c3fb6964d7f580f3ac6bee0a11f945ec897df7c5") )
(31282, uint256S("0xa6d05b0f9ebd30b995b0c1d39bb6b55bcd19dac8bf7fc110a167c5ff7c24d80f") )	(63580, uint256S("0x898e8bf4672244dc9e78f37a1dbb7b5e4397ceea7a1567470e94d8ad85253edd") )	(91600, uint256S("0xb2f850bb9210f1379d5e3ee1750f8cfb4c23d567ec7f147d9cc935f041725828") )	(118724, uint256S("0xf9bbeb6f68f74bfa2514e02717512071ef6d2239bd2570eabd9751f195ec7960") )	(165724, uint256S("0x90f6f2e563bbadf93a9e2210f92af8ea9bd518a96ae5518f0ea80ec0447deb89") )	(238440, uint256S("0xafd8bf6726784b5fa5ea810e360624386d3bc66350e14e1a284ebe977506c2fa") )
(31311, uint256S("0x61d2ef9bc084c8f2646ab8c32bb56589a52bb990c1bf43c1b5ca529a689fa4f1") )	(63613, uint256S("0xa81d6b8017e63e54a1f31e0844794b235b5050cf9a9ed37b62bb2de3c0aa9206") )	(91720, uint256S("0x232356e63b19113cb9b2e85385effe2acdbf56dbd48003b5b3fd868e575634a8") )	(118748, uint256S("0xcac1a6a7ecd5893b7909769fd9704958f126509a3955c3ae85adb48e19613646") )	(166142, uint256S("0x6d559ce44f4c9415406d8b7de264205f0dd70cc830f1394908bbd17f77cfdd86") )	(238521, uint256S("0x7c6a2f950efade88d21b7762e055e7e5134b0510bf769f404ec6f122aee40674") )
(31441, uint256S("0x995a907c4fa451fc294b0900a0a07d94e03fb39904f4771d6129f283a128e713") )	(63689, uint256S("0xf8c696842422bc62a5f6c5a96f0591e3d2ceb85c88a83c3dc6054636af8ac845") )	(91747, uint256S("0xf4fa4ea00519e8d67080d49540eb0dfb31838ae3595324362bf073e19b6d2220") )	(118750, uint256S("0x0cb738dbad445758ab0fe46132c16d66a25e8b84ede3f75874199bdcad607be2") )	(166253, uint256S("0x880ad14f5bfba5953e1c3ef9a077ffbd3527bb097c31e09712e0568c87ebc27a") )	(238635, uint256S("0x77ae260cf1e1b614a8ccddc08a53b4018a9496d705ba34e8f576a4a1906e6f64") )
(31500, uint256S("0xe5ce650129dbc15877e5103a545c27c23a3c064c822dc9135622b2dd5cf4f5b7") )	(63721, uint256S("0xcf5f66ed123058f065aae7c0da53c818117a9d90b93812f2cd72926d15b11238") )	(91783, uint256S("0x416d497a2c1b68d8c1dff2ffc4a19315cb71e461b3797541aa4282c4104d5adc") )	(118797, uint256S("0xbb51970a800016674b4eaca7db4ce6afadfa3c26a0a928c95095a371a980af57") )	(166324, uint256S("0xae1cea68e9423594c6a9c23d1144d7122eb2e8a01f60eafdd74a34800bc4e1a9") )	(239051, uint256S("0x4aae0b7c0d64268bffe5547a7795723bbd543ff74922e1099884e53fbf8fefea") )
(31540, uint256S("0x7fba0a9a4e8b715568287014b91736ea108abceafd341921343788821b9c1100") )	(63727, uint256S("0xce8505ade2cede2ee6e7e3384091c57eb95748d245b2dac3e6d6b009db9947e2") )	(91793, uint256S("0x37f97e00c575921a72c7c011e71eab92e6712ee64696380d1f1ae9fa86746db6") )	(118804, uint256S("0x83e1bfea02f0c2de492f1897c22f4bd232402495febddd17f1cd2a8097481bcc") )	(166421, uint256S("0x5ad4963883d631b48de30d128d9b9591e6c5b1e184822639ee41c65e7e14f834") )	(239207, uint256S("0x5686b289a9a0ac52d1c29cd490defca0cce60d6f27e6a3cfd0a6de92494ff25f") )
(31640, uint256S("0x749faeb241e82e350629876ea4c9303f0658f9895bc8eefca1768c8cf822883c") )	(63906, uint256S("0x334484afe052364981d894deb5b521a491b70cb4768bf5768d12a30fc69b13d9") )	(91860, uint256S("0xc7643b5f183dc41a16503fa689ef58fd76e8e52cf07e90bf8c87aea35a914efd") )	(118834, uint256S("0xfdb73ce7dc2722fdca6dc3aba6872d8f479e3947dced38b89c5c0a807c586507") )	(166423, uint256S("0x3521fde290ebe11c0d1d03db23c4ef3c8ed617b5a3f24021253fbb1b5ecd67b6") )	(239387, uint256S("0x4863880a91aba2a26a4f584e7b1916de1aa93edaa807eca9cac3b1e64aca0990") )
(31659, uint256S("0xf3c1ee2cc3027d8657af67b48f85fa518bf215eb69593558fd67d8c30b34095f") )	(63914, uint256S("0x494c99dabcf2488a71180111b4b07332100b73c22ad0ceed697b86bf3f3a544a") )	(91891, uint256S("0xe24d78635a6153c8f0933d14aedf5b0dd2b284c15c716afb057713bd5535b3c9") )	(118894, uint256S("0xe325858380c1a427a0949d34d9a9150a3256c17472000d17891f57141d138553") )	(166468, uint256S("0xd278fa56d89083e65f49e898b7f39562ac0f6a82e51bb73c871ebcfb08a89b12") )	(239536, uint256S("0xfbeab39f2e5b5b0e5d40742952d92d8bf807e33efc0006746ebdd85d8986a6f8") )
(31680, uint256S("0x3d9cf2f454a974dded796082eb14dac2fe21e24516b5fdd697af361fd877a4e3") )	(63918, uint256S("0xe3299869deeb93950a98133bf7f958ba477b579cc747981e125ab842a60f9d2b") )	(91955, uint256S("0x5da31bcc7950e4ccc001c560cf3fa5a6cc796bfd0766f589490304e1ded8d4a5") )	(118955, uint256S("0xf3c8c83a97ca4dea9ad1234df42775d646190d79234bd3f5b123a3c25217c206") )	(166581, uint256S("0x1e339b96eca47c0068fddebcb01e052078c1b9244f94c43098e2b1fba4198451") )	(239646, uint256S("0x676f20df21188cc01a532f1dc8cfb30108890d1cfffc63df73ab59bf48d77333") )
(31775, uint256S("0x4a0ed5aa670e1f4452277cc9ddcfdcf853bc50b6222adfeebf050a0bba52f99b") )	(63960, uint256S("0x73b315010a75de68867e334207d9c63d24b0cb5f7e6b527a1284b5a525edb6b6") )	(92018, uint256S("0x17e1f0593b126c6ee8d259b40fb856079c5aab53bcaba98503245d494f53312e") )	(119203, uint256S("0x0ede5c8133f4fdc895f3aa8d64186904d3461e5aced65a5206a959a4d7cfb34d") )	(166678, uint256S("0xb8615e6c38c1012e81b17d9d4002bf29f62e96700a520c1becffeb30ffb1c445") )	(239676, uint256S("0x7f3d053057dfe1d9a4ce71360cc0021168516fa20fa9d7634ca6f9e30d30c60f") )
(31786, uint256S("0x14d97485c283e8052db25afb7316be247dc955e3c5779739fd16bf72e0737cad") )	(63963, uint256S("0x12dfd78f02b8a75137505ad32eb9602b3f61f90ca2733ff596901b669a9e65b6") )	(92083, uint256S("0xcd97955ecb409182236ae2d3105e8b733863f6ad71dbba40be6567c95889bab5") )	(119215, uint256S("0xd6663c0695c51573caff55d6838c3dfc703808ba01482e17134771de34c35b74") )	(166748, uint256S("0x2fcc15043e7fabbd068edb8ed38a0d46658534604eae4889b9cde73ad763e2b6") )	(239832, uint256S("0x2d525f2bd4768b080beb9da791bee09a469f7bfd9d0f9d2d63009127f484d2e5") )
(31793, uint256S("0xf65938883a6c3f60eabc71e5a02e46d1375e087f5d280a203d72dc958205c8c3") )	(63968, uint256S("0x97100cb0bb416d311fa5336bb8349dc6924ecdd8747207f0443ae2a4d9c6f4db") )	(92128, uint256S("0x95b03dcbd8511fc659ec65bfcd6ef52ef5c0b4602f8e8dab28fb6b95fdcb2bfd") )	(119359, uint256S("0xc54055a94d90f013df2c618ef4379389bfec0713ab597af6bc4a737f4161a21d") )	(167918, uint256S("0x055770621eb19fc1772dd58becfd6ef439b4623e98c8c2ff231758b2c768113b") )	(239895, uint256S("0x837a09a560689d007fd6e3fc4575d1d4804f2e6cbfa0b4c00046cd07de55fbfa") )
(31820, uint256S("0x4f12a460867dca7f059394551c16b6b490056c4fc92166125f758e7634b80af8") )	(64008, uint256S("0x26c9fad7235079025654eb93c463f6758117807f235276118d796805b7b2b975") )	(92294, uint256S("0x6eae28b4ee0da908c723c6235bb42f7bd036629c1d80d2f684956ead3c9cbe12") )	(119425, uint256S("0xac445868e033b65427894fc32d3645296ef206e0eb747aab8c8649a9121001f8") )	(167930, uint256S("0x12edc240c24077a7cc4c97d02ea2cb53d9e2423e7f60c2906d696c67fb54149c") )	(240051, uint256S("0x759c0033f99e3b6fd8d31b73a0206d0e7b7ab167c3b4a0d3770cdac017249b49") )
(31873, uint256S("0x451d8c66f3b7ef79bd386666053a39c65f9074286029979b00adc4a64d7f6553") )	(64090, uint256S("0x0cd8c9bf57b49f7e75fc298e8d0d3933c4b7b1c5caf311e2689682a7391385c0") )	(92325, uint256S("0xfa276089dc53502e9b73ffef4786d3cb246255e076b1067d1da8b9649e0a2067") )	(119450, uint256S("0x5c7aad71e8b3807acf5f13082f00b8b9c6aab088c485e2792509a4459b17006d") )	(168296, uint256S("0xd60b541177b640549726a52b1d9eec672f8d3597ebb46d14ba50405e249cf284") )	(240074, uint256S("0x447ea3aa383a3068c38f89b55d10c733297cf773e1c1f1c361ccc827856bc3d9") )
(31877, uint256S("0x935274d3af1032a5bca0f71116a3606ea6b8731032a267d5eae90e356de5db6f") )	(64116, uint256S("0x7862e7e9f6e0d819341a0ed8fd402c7ca033710f605d13cf2834e7c756a8e880") )	(92329, uint256S("0x232968d4cf867063318000b85311bcc2a2f47e56e9d91db26c792ffb29ffdd65") )	(119502, uint256S("0xe4f166d25842b54ff386b619b34e79bc632b67346bcfe2c6cd8c44933448baef") )	(168300, uint256S("0x6a85be488032c599a97d9c804e8c1915a6881803577cca2520ab6927feb79a34") )	(240249, uint256S("0x23d192be9d1d401bcb44f30f3938668cb99c65f23e78546cc9ebb3e889167b56") )
(31881, uint256S("0xaee4958fd182e72d05cdff0d02a9cd8b1692077057982219a8f13922b18409cb") )	(64122, uint256S("0x5f41a94ec919dc3f4a765fc8964a9a646475318493c4f2e2e9c6570b78a6371a") )	(92344, uint256S("0x16c539b5fff517fdd3861280ace6fc7cc06554406f1f1a777fdb2bcffdc51ac0") )	(119563, uint256S("0x9d241c30e79e8bb1aaf18d1b0a3db1b71bcd29bd20d22918e06b947b7d5c3ad5") )	(168526, uint256S("0x54cdeabb299e69e9d1437047e01acd24430525b3537574948cad06b1fb7e8b32") )	(240365, uint256S("0x127d38ffdfd8fa0908fda928f4919a1251bbf9d767a03fcff94efb92c8c2eeaa") )
(31885, uint256S("0x24cef3aa9c41c3d277b84e7f02bfdb0f1a584091af69e917dc32a6e80d1c5923") )	(64215, uint256S("0x93e8c9b7facbe154a698876c421b6407619c1fde36953082d2a30af89440f0f5") )	(92417, uint256S("0xe1e493567dd9dbde454e1f723dfab3e92ce41d166b53385081edf1dee9131fc8") )	(119616, uint256S("0xd6dac307408f70c1ac4052fd11eccb7b15af7873272bf78380f0e9fe982220e1") )	(168529, uint256S("0x475ae956481afc5ba288c5a98474df2ace67ba88aea5556a23d9ca370ad1cdf9") )	(240479, uint256S("0x64046be2c6a1dd9cd40164d41881c8feb81c3dcb9d680aba74397e410d96cc3e") )
(31914, uint256S("0x159dc47fc6a7620d98b255459d950a3bacc9a603b21b815ac75f495766e1406b") )	(64233, uint256S("0x350dce7a97d90a27d919fbd1d8745db5cdd11be5b050f23d5d2c6a4f1deeb285") )	(92433, uint256S("0x1ffe4b8facf46817dc3d64d08bb7d8901abfe49241338d9b619970ba984b3d09") )	(119617, uint256S("0x7b4f22de81efc9d3e020068ff688b6672f185e3c3d6efe5edfe83444c1b8875e") )	(168572, uint256S("0xe38fa1f51db18b4d3d21297ae5a5b3e0b1cd328a83e42d576cb412737da91a45") )	(240577, uint256S("0x3c347243e2d598b3e4893428a26d62623637dc844944fdddfe32768a31aa776c") )
(31924, uint256S("0x31579b22519334e7a431eefff8d36525b136b055abc220c5d21ca4a35cca1bba") )	(64322, uint256S("0x69033eb9a26298f0daacd8c07938df055b305d8b05761da447338e7359f6e8b2") )	(92437, uint256S("0xf97a672857cf8b854f0afbc575bdaaddb2bbd464e5d6be871822f18df4622c51") )	(119650, uint256S("0x0b9f615c78e7024b021dd7a0834ea82dae1dbe43405baa6260c7c196ced4a6d6") )	(168643, uint256S("0x2bed0632d9e8639de878cd1b73c458e5d8080b1405d41aeab54a5956e866eaa3") )	(240618, uint256S("0x746b030e6d763e4a599c94ce38ae4ea64b8cf1e381345d55c35624a93f218de2") )
(31938, uint256S("0x71b798ce10118ea9cb0acdd73dab9e85c696fc31d0ffe9cf2ba415877bbcf81e") )	(64347, uint256S("0x4ba805dae5befb9826f899caedf0b097e96c34905028aa8cb1b798e59d1850d1") )	(92512, uint256S("0x98c17c361eb64480ce87edfce084b773389baf5b865a844349326642b2d4a6a2") )	(119688, uint256S("0x8f8e50603a5ba2d62e016a1fc2dc1039dd1c834f947528bddc2ead3017503119") )	(168669, uint256S("0x7d092846b3d6517d63fbf1344ce14a1e2507c863eb2329df498ebe17257147d2") )	(240702, uint256S("0x9e0ea9eb0b611c6e388be5e5337e2a54aa4e4ea3c733f2f74314bd69444d6c41") )
(32022, uint256S("0x71dd4fa7c7a041d602537c022e307a5975279b3149587cfa4ab183680b2a0b5f") )	(64454, uint256S("0xe5e38298352ba9943254ff272b31471c319f65b588db2aa66ae2850b9b784ffd") )	(92539, uint256S("0x466ecb60ac6011d5f21d33c6dc8d8a396e6b55bee775b8a9420ecc61c59e2e54") )	(119726, uint256S("0x5e7cbb1af4e221d18f83c0aae40e831d5f7f615c2eefd0a71383d6488cd01ef5") )	(168792, uint256S("0xf14aaa264a26f2c367466be59da14556461a5af74372830d951b9f2c8d1ac906") )	(240768, uint256S("0x9726a1feee0891646dc79be414799fda6c90009b78534795b3d30a64c3bc3ccb") )
(32046, uint256S("0x59c0458c33a0ced75c43c9ed5dfaa031d0a2a7674d97bfd8c8fcb3c444ccdf72") )	(64515, uint256S("0xe02c1bc4b7b53c047e8cc07d10cd0a2cce52f0af087610ab4f7287f3ccbd6f79") )	(92680, uint256S("0x61270741dd4eb3036c63c6defec5cadd710dc958fb01ceb68a2e1398af0b529f") )	(119728, uint256S("0x598cd1d5b6c9c90b297ddccc128e0ca0bc2907091a5f3cf78e459906154c8d68") )	(168867, uint256S("0xf5d578a7edc3809befce95e017f70e90da9433691121fd07d2365c5653e6034a") )	(240857, uint256S("0xd7e4035a7fa4cc637a077c58eef021373919b172d7600b91f5120e315b9e7823") )
(32059, uint256S("0x9372d8f1b3577bc5c4a7b0c07281b9ed61eabbf815ab35ceddebf8963abfc2eb") )	(64551, uint256S("0x8a0a0f4ac67aa2970752221eafd78254b5e3919aaebb17bee949509cf723ce9d") )	(92737, uint256S("0x5c7e93887322e09966cdf33fd9205e1cbb710725492ce58b5342ef939aac6851") )	(119785, uint256S("0xe0bea4e106f866a437a49a68deef8205274fd9b48e4d3db1692f416d380acc4f") )	(169014, uint256S("0x9f05162ef059860d444417afa39150d2373e757c5c4ac77fc1eeec0e8f65c947") )	(241020, uint256S("0x05daf76cd39736406b6503bc2feee9f4006607c2ad25c06c30de141471e044f3") )
(32100, uint256S("0x560b25add1d0e14ecf0bfd14b56bc5947f7c26461a49df1ba70a26429cec5d15") )	(64637, uint256S("0xa79caa7dda1e25e1a3e10d02658fbfaab792cec27f1a9cf6cc879a5296f14d2d") )	(92793, uint256S("0xb7e064b1603dd20b4996ac8114e33497d76d3edfc95cfdf8a3758af083d6b339") )	(119804, uint256S("0x841dfdb6bafa8195571a71e618b92709d294e736d5afc4c95ef0fce458f8d9ec") )	(169023, uint256S("0xb5a273b475065024240e4b47ad6887ea3015cee432ce87d8f082f96d87112008") )	(241047, uint256S("0x21036a006577bb0876dbe1e762fe0ba96f6e6bd05cb5048096b2d60aa178b781") )
(32116, uint256S("0xc038c0ced5988eec01af06ea73cb87c209a9b04a296894cf6e71ae11ff5258b3") )	(64657, uint256S("0xda140b0ae57ce90fcbd23290d308676805d1673d579c3bff701c7d6d52050f92") )	(92895, uint256S("0xac6a9d72406d3c5de04e2b6d33d8da10a6f46a95944404353a1e897158d3c1c6") )	(119812, uint256S("0xee7f090fd884b81b4a7e72b7866b1f09ba9d434dfc65c9bb6608ca34c0cfef72") )	(169047, uint256S("0x36621f74cbada99ccb91a7b9aabe85f9502bc844855900fe1bd8d966a56117df") )	(241074, uint256S("0xe6d2d4db530bdca8e20829e6650efdc07a036724aff36c416d44b9145b48ff37") )
(32147, uint256S("0x1398eb7515f3d5af5300a7ed916843aa3658341b456161c7a3aa3e867f2efd7c") )	(64660, uint256S("0xfc2b99e41946feceebde129c1e05a26d8275141f162d7c3a9bb03e4520c458aa") )	(92911, uint256S("0xb6f456f0caafbf2502fa8a0e0976fda02a9cc296bf6ee63a8ed9addf0e9ebb06") )	(119834, uint256S("0x889d1fcc6dcb5b64bdac32037c3c0afbcc4ac09d858f4e732362d8d6cb7dc595") )	(169063, uint256S("0xf379bbc3d2f029c024a4b34924a055d53bd682b7d24798eb4e8adda662054542") )	(241115, uint256S("0x61f29a7e6b44c6d5233b82c85cb38ee7a125a52dd504cb74a47b0e0290ad45a6") )
(32184, uint256S("0xd8f9e9a339200e1f61d13bd1287666bc042d5cbce339b9924277329c80a0e638") )	(64685, uint256S("0x18e38532b78c2f2476f99dafbf60ab158c4ad2614097147612989bc66ebb6e1e") )	(92925, uint256S("0xd50a8bd4c5a16e4f6139627075b28ebe8aaef9aa474608261ddcfe14a2684a04") )	(119886, uint256S("0x360406b1ee02876b8cd8f0950be1202cdf3404e178c8c86adf7554520c27744a") )	(169294, uint256S("0x9e6eaabcc0ff525f3710bc89194e9b99950683eef6f25d3fc13b1543c64d615a") )	(241393, uint256S("0x9153de19b1021cb93baf0eef6eb1a9a47f629b3cbf99ac604d172f3ff0cf9a7d") )
(32238, uint256S("0xaa15539a98d39d4ea8006f4cc987f7c6a87a4a4483f9c6b9e54917bd92ad7b22") )	(64696, uint256S("0x103d040dfc6de7daf0d5fedadbe358fc320381a8ecf8bee98b3ddfad84e2b27f") )	(92950, uint256S("0x6ca8c912d882f31fd233a552f6a3c4c2c69d41fd802a039b955c6f63419de748") )	(119945, uint256S("0x0f469a774a027628190d129d4e81f4fa95c5fb17af4f6aac0ac23ff612663911") )	(169704, uint256S("0x8f31c1c32809a50100023abd3037d8c85d8879d5e1159be674f15633eece22cf") )	(241415, uint256S("0xd0ed8bfb01c1b8210da2180605701378af7098cdcd29c569571cbab3f8f418db") )
(32440, uint256S("0x57037c7f6a56d78e82455c3d1d9cb81a47e5ebf72409e709e5ee467888440084") )	(64721, uint256S("0x2e5202675e5d6ad7d6514b23df126965ad63c23e9638280b683657aa8469b8fd") )	(92957, uint256S("0x08af4f2d24fe19f5ce7c0b38b9c6b85cca28c69536788440c74417c9f8a693bb") )	(119953, uint256S("0x16a19747e2b38631deca8495d5a781dfd70713be4649c1aa5ab29793201cbf0f") )	(169752, uint256S("0x55547bc0ff088442835c1d3178d5f2a11f20c3550847968c21ca965d62fccb53") )	(241464, uint256S("0xdbf58c5e6636eda53e1d767f1b7f2ba4748daabc87f3e11880153deae02f3dc3") )
(32533, uint256S("0x2349a9600872eb0fab9b190cfcb4003f2af71cfca4557bbc66f063315b5f1275") )	(64767, uint256S("0x03805ed9e03313ed694657ddb2c6d4b40ee66bf6059328be34560ff7fc4ffec7") )	(93010, uint256S("0xce9369d73cfa5d31a396f5a27a6500e00336b8ad1b49d584b53f9fe1ec50092d") )	(119981, uint256S("0x1a985824cb622de5f2cc0a0f21621844c792e662a2bb101f3e649772db179939") )	(169875, uint256S("0xa04a63539c38165fe24f9fc59eb2b2ec5b18ca2e44c4e88637fb5c062226e2ab") )	(241468, uint256S("0x0585cdf41b404f73240652e892f3c29e0550f96b23a6abd61ba3c7877622f666") )
(32898, uint256S("0x6f34eee32677c311fd08b6713fe8ab98f43f76205db532d5ca7eaeaaf94a7f98") )	(64805, uint256S("0xb9443320b8679acc318af8d52ca7487faab0f56d25a252473a0f3e4a9396d0f2") )	(93029, uint256S("0x071ccbf422cc963d1e218baa15a61aaafabc2395d55443c5553a6619f90b109f") )	(120021, uint256S("0x124d9d3ec3f0ea7f55d08b03413053852069b0f1a5f6a425afcca67c4ea27c12") )	(169942, uint256S("0xd68c3c0ba37e02279578d09791d4a33c366e7dfdd05803df7c018bd9dbe99341") )	(241478, uint256S("0xf6e18b1f33a96bf561a495c875c27c6875f1965462bdf381c6475ba4806fd422") )
(32915, uint256S("0x096784953e592d996d21523fd217c6b50fff8389c6c312ab5d4ab77ac6cbded6") )	(64812, uint256S("0xb80618f07a3a548824b12601cafcb10b03a2e9c1777f795d57e83031e860f421") )	(93049, uint256S("0xa00f2c39fa9869b5efc69e60a01fd7e4ffd55967e482bf1fb3a9ba4e57d515bf") )	(120038, uint256S("0x5aab992a5d6b8b9b6802fd8ce8f6cd73fc629bb6188ba5cfb9579c56b4cc3d12") )	(170001, uint256S("0x16f6b3a390c62e62c89596cfd43b00225361ca6b7cbbd7c03d747721c8d612f3") )	(241659, uint256S("0x82b2c73213cec978d09b85284c6f06c254222bc0e5f5d7f63c0782ad9586f06d") )
(32994, uint256S("0x0f8e3f97f7d39c4f57d6c7d942e96467004ba4f6eae19850c6e14ba916bee03f") )	(64820, uint256S("0x18bfaf9494c652f155c9ab563d7e59b8f2445bed6b0c87e14d3818bad7e45a4f") )	(93063, uint256S("0xb8bb6e48df3d829297ee20a1a756481564327f33bc3972a63a6e77749427c55b") )	(120064, uint256S("0x7dd18c9a9461cb3e09114d4a73cd615a7e3fbce9b720486ae645b99ed45f0b38") )	(170035, uint256S("0x2a42bdd296a34345096b2f3cfffbbc9fdafd26b0b5a9e67009c745390e9d7e5c") )	(241727, uint256S("0xc5c1cbb8276fbed32edbfebda8fd36481206cc111dc87f917d047ad6b7fcba95") )
(33011, uint256S("0x29ab9c298d77bad1e630c1d6ae8eb2cbb0d1ad08346745c1338cf6b0afae459a") )	(64825, uint256S("0x6a8292ffd1b9d6919c8ccbc163b4b87591518f92683006b42e7f99d4b573e7a2") )	(93128, uint256S("0x223d70c6d4bcca3e8717f3bf0400f72b8489d4e863ab5bb285d1ed6c6d373377") )	(120089, uint256S("0x33294287750b97e81f1c8938863f17c176320585bddb7bbad4a97bfdad6db141") )	(170072, uint256S("0xe40ab72912c5f01870b0383525b6596a89e9750e54bc5bf48dd117b026d487d5") )	(241874, uint256S("0xe4dccff041157fdeae056bf3ae3ce8f25519f4942d0add1369effa4fd0535f15") )
(33070, uint256S("0x5d352e71d6e6ab2818ff6d5bda1ff4cdfd36e986d9976e7196d04a92d4fd3956") )	(64840, uint256S("0xd6487706016a46b1b966ef8310415afc6640e0deb2fa6cebe1b5aef7119e5575") )	(93150, uint256S("0xd75499ce1896b4fdb2c6624fd511a3a59a4846863c7a2bb7bf81f1c52311f558") )	(120111, uint256S("0x052b91dcce69547d03cc8969cedf03eeb5a1f5392e02f8b2e9deac33269ab307") )	(170154, uint256S("0xed1c071c3c44cfaf84cf7e00657b0c182ea3e9a6bea901fef3fa71e04c0077fe") )	(242592, uint256S("0x907cd881717032ef133323c3bcaf1e13b3c30d761865a36e4a915997d7899bd2") )
(33108, uint256S("0x356e9fe031ed01979c3001acf598a57c94aef2718d8f284d06e414c4516723d2") )	(64851, uint256S("0xdea2b4310a666e06c4646310ab6f5179e2c3ce9910251f36d489f9d93e5433b7") )	(93166, uint256S("0x3b3a5aff76d46706005cd1657c4f9ec504a039c635eeaec2bfc0fd8a44ab8a3e") )	(120117, uint256S("0xccaa9da5be73d5f4baae4962554b4af0364cb28780493f8f0842178093d802e8") )	(170433, uint256S("0x92eaac29ae8b305ef645384741d1e4fd7134fd6028d9fd5ba99474e55140bdba") )	(242700, uint256S("0x99d69fd823c9430a04a6578f0997cd1ff078aa18fb66e4cb90a28d684ea88225") )
(33159, uint256S("0xfbb7539f25d8423dc440892b46924c502876223fc7267471264a0333a60330df") )	(64873, uint256S("0xf9541b19874b91f485bf1bd08a9608df891281864b550c812716072e224a7dcb") )	(93213, uint256S("0x09d848f88a161fe60473d29b85be01df30c32ea5b0e25299df1510c3cd5a1eb7") )	(120169, uint256S("0x0c0e6c542b97212d2a38721b193c80fd514ae521d5933a03a522d6822edc8986") )	(170688, uint256S("0x1b955be8d4d132f36063cf7a2b37114c1812c68336ebfd167851e9879992df2d") )	(242859, uint256S("0x1c235a9ca7cc6885c5b44203e6a5a6c400a7e0aa0cbf5fc2eab812837b8e8016") )
(33261, uint256S("0xbedd1db7a334dd0df8d028a291385fc81689121d7ac5c3ff3afea2723f702536") )	(64884, uint256S("0xce587ae50f0e3df67793b89d934a2d60048f9170df334d94783f673d9a5fd924") )	(93222, uint256S("0xfdcd4b12c0f342d5f87d6e8cfbccab411f15aee03b531c3a2fc8c47fc3d6fe8c") )	(120175, uint256S("0x70fcbf6da096da09661c4bd4e651746fbdbba318a2221094903eec46ba418fbe") )	(170756, uint256S("0x27654bc1c5b1196f2ce4e307866322b40f7d3bb3819e922cbd2813c329d011b9") )	(243244, uint256S("0xfb0c8a12ef3eebc23a8f5c6727c7dd818b7a1e7cfe259156de1de4c09f159f99") )
(33346, uint256S("0x0f766f14e8f43db362eb0f1a5dca08f072f1df3b48ac4f6c85a26a21a4d0bf75") )	(64898, uint256S("0xc6e6a951d2415dd4c210e50139346b6b0beabd08b3d93deea3d6a84dfe2c2ccb") )	(93299, uint256S("0xb81c848c46067a5f8a41a4f8d881687f35b2a6010d587bdcac17f0ebb2c5d075") )	(120216, uint256S("0x10d92eaff34e45cccafb8f1eafd643af61ce263d48f2422cf188158270752ec1") )	(170906, uint256S("0x9cffeba2276c64f3230bf533f50a0a56a8f6ef4e53e0b82d54eff997b84d6e1a") )	(243301, uint256S("0xf3b67c1abd15131effc37e7bd9f6142b4834dc57f8f48063ca6e1c8ef7a6848a") )
(33411, uint256S("0xec19ffff3d1f8e34b648b04bd8ec54808935b8cd68ee18a5c90ede94983973db") )	(64939, uint256S("0x77beab3c83f95a7a2c8f62979563a98800aa23bef6d4fcfab36c358308fea93c") )	(93434, uint256S("0xabb28866024358ae572027ee3b34bb7c7ee715951767b6a993482d7253e0bdc2") )	(120591, uint256S("0x9f338ceae8266bf6799c6d9cc617e56b269ea4b5960733f01c87197ed8ac8877") )	(170980, uint256S("0x98d19bae72415cd81ff6822613ee1bdf22d6695528c32d13bc7696b9f4dcda00") )	(243341, uint256S("0xf3e0fb19785cf70fd36c10f134f3e1082f5f0bd68f66339a7a206b2e1bcda895") )
(33414, uint256S("0x9028c83a17f8fb7e40d62cc453c661d5ad001ffeec3235dfbdc591d2ad7e48b9") )	(65006, uint256S("0x1a323699343be1ef27762e7aa4c9ae8d77e2c1efa81e6e63b25032fa838eed8c") )	(93529, uint256S("0x79748c1dc0766aa2b4c98d71354a185107513915f46061d3f27b9ee92d73635e") )	(120678, uint256S("0x3d66ba048c0ec0091b868a8418b7f2e631a2de586321353b675b0f8909cfa9c7") )	(170995, uint256S("0x68214b88bc1c990a70d00dccce649f8d95440e80f50a3cc7986c4965a6e01bfc") )	(243366, uint256S("0x246a144ce3a4b469b539e43217b496252b0a80b4980267b4d04eb4535c1d2d5a") )
(33495, uint256S("0x855fb09030fccf6c77c964ce21bf4f2688d3d49e7f2b8170373496046bf0bbde") )	(65021, uint256S("0x87b9c6cb424be945b1fbff62425c6113186a9312b204e2c5e7f6594075342037") )	(93596, uint256S("0xf6c5960aeab656296da5d6d08c1589f0c1e846dfd4c335c064ed7e452c037450") )	(120680, uint256S("0x5cc84e92c5542d19328e49abbd777de4d4c668eea96e58b3aea15d4c0b7c04ea") )	(171108, uint256S("0x61dc54e961b1efed1fdeba54920f270e1221d62993ffcc01d76291c1df74ce20") )	(243411, uint256S("0xf6803166e6fb6b809f9abbfd58a0094b415dd1314448611a590b33057c2c53f0") )
(33522, uint256S("0xb07a0bdf791876c05d371d4ab0f09ad50d05791f544bcfa20203e470708ff44c") )	(65055, uint256S("0x66c29d70222b54410f6848f4b00b0ff70047019dded5621045bb7571871a136e") )	(93611, uint256S("0xc6a70875cf9f48962d8900bdd0da018746742278967247638859f92d84b3966d") )	(120697, uint256S("0x9e4fe7607216fb5180008f238e9c045e12326fc0b06aab6e15eba1e5ccef45e8") )	(171115, uint256S("0x63145fe1991dda1b75b647d7ba4b22eb2da9ef81129db533f98bf4fcd6673a44") )	(243510, uint256S("0xdbbe818bc24861efefd5f3060099371ed12009a3cb17a67abfbc12cbdb3e4291") )
(33715, uint256S("0xb8cd3cc89091a90f401881ad551818a730af3b2e52a02db42baacf39426588c3") )	(65117, uint256S("0x7b62f7e02115b49321e073e8939a0edef54b7af140a202b8b8a0edc6dc4d8fe8") )	(93644, uint256S("0x3f35e8372ff7573c5c26a26e10f76f7bd7ddef0da76b209a4fa7287221f22f60") )	(120748, uint256S("0x103b1d834e9b57699492cabbad766eb8094114dfb27dec542155079deae07a47") )	(171457, uint256S("0x5dbab12fb9c034f8453b04f378a3e949c316de96539dd23f627b07ceee9503d2") )	(243519, uint256S("0x1cd0d060cec66538e6bd497e242d97c502f4e5d9b0824da1efbee8bc8c4f6135") )
(33771, uint256S("0xb21d2d17f071802e0d83571ffd26b16cb34c0972dff00eba2e1465793a8e0c9c") )	(65120, uint256S("0x0dd5a5ab348a0971771cd19e652a71cd003aa9b9b75be999db95c6a2283442f3") )	(93668, uint256S("0xb8e390611757ec8fd3a13d618e0dadcfdc82b06ffc54b78c4bdc1e1692dd3089") )	(120988, uint256S("0x2ff3031fb48525786be6988d47c2c21196545f82e77f79a7bdd48cc1fbae8abe") )	(171631, uint256S("0xd65cca26925084fd7cf2696b731da5ecbc46f3626f4c05d947df1dd0c39cba57") )	(243626, uint256S("0x65ca21ca1943bc521b6590d00271772d4b47f39e9edffb41389a03bb0e194d9c") )
(33823, uint256S("0x3d06c7b9003fb336c7b1e1f19fc15058390d7b954dc8b80c49b5eb1364e8fd03") )	(65128, uint256S("0x98e6336a930bd4c456ab7317498720c48c91ed319b69f6e8fa624716f73cfab2") )	(93912, uint256S("0x9614acb0fb476f6652b20a9e9563a113c893ca29c7979da3844f8aca69eecb3d") )	(120993, uint256S("0x5319ae3403043e2ccad32104990a3ca49814accab10b53166f467c2d0fc8bb90") )	(171675, uint256S("0x1853a1524295c3dbb33ecbf83f666596eb59db376f401f6370b575c363ca3d49") )	(243724, uint256S("0x459ef342916338f7b889bca5678c92d8c12654a69f5bf14e754ac79df9e58aec") )
(33824, uint256S("0xea62e5f68aa84f7c4c8725e8ab415847e38c3d2096ad381f9917da02b8a1647e") )	(65269, uint256S("0x453b70f18999187293d7cec81b2671e8152f12459b37c85b275028eedd5fd8d6") )	(93940, uint256S("0x61d2eb56ea47db05c4f5fe19cebd2d46cabc3e67caa599831ea22895fd5f2828") )	(121044, uint256S("0x31c0c2a7e9863ed44dfaa6c80206b9c11e792bf6f0329d932322ab86bd60dba7") )	(171726, uint256S("0xabf0322995cb107bdb5756d07ce87f0ad4c3fee82de21169b33495d8f5fbb373") )	(243779, uint256S("0x6f16cce6f79ef7d5992dcc0d5b68d84f0007049839af777f7ac569f0b4484038") )
(33888, uint256S("0x1f662b47ef20423d7b6bce25e34f12e0186d9aef8aae34c27eb84dbeaab7b6d8") )	(65299, uint256S("0x65e4be28dea42767e18d5160d061864f6402b6e30b74916ec077c0b34e3616c6") )	(93955, uint256S("0x1509f06cf164f721d2669c6b3e6c9d144c7c52ebb67b3e2f658e3dc7e3339d74") )	(121087, uint256S("0x6ef7f74769ea9d34e4d0448262bbb8772d8c552feadcbe52c1ef6fc01e29e9ce") )	(171846, uint256S("0x2f76b966586d299a1f4f4a4e038fc5200765aa1df27bb0693fcdce6845a85619") )	(243825, uint256S("0xadd5a7dee9fabc9c29cca7535f0564b83840965dae602473107062d204c5ccb3") )
(33950, uint256S("0x2a71ff13e2ada716312098a4af1de591dc4840387c731d9a8d4d6c0d4e55ced2") )	(65321, uint256S("0x92659b30fb827a73355620fedf836cd156a6bf79299da9c3a40092156440dfd6") )	(93995, uint256S("0xa717ba70632c8792294c51650ed071f467c5d5f5d4003b32a80ea905de421b54") )	(121099, uint256S("0x7d1e4e505b588bbda4ff7a60be710fc4952617831984288d78a4916caecb0697") )	(171850, uint256S("0x438e6c9f93358e645cac937be689791bbed2943e280ea12712704677e0e9087c") )	(243847, uint256S("0xddc6afa0bd890128c0a1c241ba5d9885121cc8e1d99746babe24c818210eb81a") )
(33979, uint256S("0x3c6df4cd9f1711679a4fbaedf6610d5f4552e604067f7adc56755e6f6a0c0ad2") )	(65388, uint256S("0xd7032137833ec4c6c24d7d2486b0e43a8c9fd3e005efac464a88181a28ca6483") )	(94184, uint256S("0xbb383924337a218d0a911a77af2d7a488c1faae2ae54ea181e311fd5e3d679c3") )	(121262, uint256S("0x13a9840b2272b7e8f492ecf719ee0a379a79ef69f1ca870456a820da37f6ff4b") )	(171881, uint256S("0x3c0d1ed30c24ceea84e85aa847c25c5620480cf8fa32a9f8df45e325a01b9bc6") )	(243867, uint256S("0xffbca3109d8567b06feb05fa2e258e19269c6dcd981cc64cc86da6d1c3100373") )
(34016, uint256S("0xad874a65f03fcc1526f04b22c4cdf5a33b4f98920fee46145565d4432c20cd5a") )	(65447, uint256S("0xab931f5e4fb20110e8d769a3e14c3aa536dc72d56c267354cc0ec7007157dedc") )	(94215, uint256S("0x3124a2e808547f3a6c4f54376c1fcedfd14221be04a7a0cde5c3880671936582") )	(121345, uint256S("0xd1b09ee7ee7c8a2134e1b303cc0efc6bc35b949b84f9d13e470c740dfa4f975d") )	(171927, uint256S("0x2c348d261393e392fed8c8e7ad0b1500d004c22de43685ec25cdf4926f8e414f") )	(244098, uint256S("0x23e13faa6723d402980f626747f656f99b63ecd7f3762d1a028579df3852f339") )
(34057, uint256S("0x73aa93605d2fcb580026bf1a732072b821bfd933c4668a0f6777342a5240ac62") )	(65580, uint256S("0x615b042f7dca0284120cf258f38ffe024c5274b9ee67f37fb65a6140861990e7") )	(94222, uint256S("0x5666675be1be747a0b1774617264d03897fd95e1fdc2e889a11c32ec6a7b8def") )	(121370, uint256S("0xa0707965e9e0e1bcbf6c93d04c08cfe125391e79f276a0ebe49273da71ad3904") )	(172071, uint256S("0x4793a6d31eef4da8db36df7220f223cd084868544bb4b131b0e121fc2533fbbd") )	(244147, uint256S("0x97f3d0d61cfc1b81300b149a77ffe8d386b49c2b6d494221d08a379d61cfcbec") )
(34156, uint256S("0x44e0c4c3561a377129ad24d60c6a487fe7e3e768bd9d8026ee2d37750837c7ca") )	(65621, uint256S("0x9d1ae11e07b196dc8da71b7394266b7b76084e37b732f91b84c6d3de4a638a21") )	(94261, uint256S("0x3b6e72086ad829b52c273ba2eda7efd8bc5a718b74eeaa64eb95f8a01d82a39a") )	(121384, uint256S("0x1305d702f0f3b6e32c10401634208c56d52cae67d9cd78a6772e82faab9640b8") )	(172402, uint256S("0xd2afd037f0560c45ddbcc7d3f851ad1fc05a43343193771235faaf36204d0994") )	(244371, uint256S("0x2d9d1db466a1cf23e81be4fffc43f39f13c479567d1691e20f791e56dc24d7f8") )
(34174, uint256S("0x77ef6937b1402e822f1fbd885f526f6b4f53656f2f20366b23fd349aac1e9020") )	(65638, uint256S("0x4c63ed7fc1bcc5946bbd9c9428b21a4e15b5b811267a770c7f4b04f46b444176") )	(94297, uint256S("0x143cfc8be290a4bff1737bcc181efcf4852c9a3bba62411e3ac94a24e0838bb0") )	(121484, uint256S("0xb8ebab9382742090999ea435dba13d7274f725fc3c9fbefdb207c4d1f264a70f") )	(172590, uint256S("0x70662ad2c86b81aee1e31b588d31103807d1ba3159d6bc6405bf8c4d67981164") )	(244542, uint256S("0xffd7f8a3fd93473052b65b9a53fe1bf2aa6f592eef4c6f03493e82a480279931") )
(34182, uint256S("0x4e935b562001bc191aafa4319130cf2afc28c503ea968a549895f2db9796a615") )	(65658, uint256S("0x3b76185fec98274ed53c3605e774a8f4d9a564b326e97012fe831d4960cf0385") )	(94329, uint256S("0xc467c7401fd5f683320e7915e01902e79ceb2082c5941353eb3c1cc535bdef6e") )	(121592, uint256S("0x1394514208eb1d3355ac4fb3b91f7495f030141a3753a4a4543232fffee301b1") )	(172686, uint256S("0xedc977c59f4faf326f916094b15b784402d9cbff216eeb55b2ecb2c893cb9262") )	(244877, uint256S("0x8d6b1243ea1ccec34c24d14e8b9675aaa4c2a60c5d8bb26b4b13d6026c7139fd") )
(34184, uint256S("0x1543b064033b4a549afbfa8c6828f33b3d2f73743ebbc5e635ab4aafc0972f96") )	(65703, uint256S("0xefc784adccc519d2ad6a29cdf56bb59a2bd0556888bafd6cb02b254ae7ae2c99") )	(94345, uint256S("0x8c95f30fa47bca3e022c3724816202ec08db5defc198e4a07afeb4bb9cb02a14") )	(121642, uint256S("0x2248b52c39112c6039159c70166cf4585e30e49889a47f3582c207de17979399") )	(172979, uint256S("0x8c8da75201e9fb123f84fe3c2c589b320f6e9a5138d5c70a7a9487e9d0bb117a") )	(244992, uint256S("0xbeb839fe8f013bed7a3b1bedb11f544c6f63b1b8bc33ab67cc9c54f605d873d9") )
(34304, uint256S("0x99578ac0935c32cbd1f75c433ffa91c9f2dcfcbdd554026c9631560d1ab797ca") )	(65731, uint256S("0xdce15b5c19999392695e350382f100efc5e0164b356417733b5961017c45eac6") )	(94448, uint256S("0x872676756b81052027ff7ec5a4fa745841938d2203eb896259244b8d54250442") )	(121798, uint256S("0x6144ee0f8a0865a1189d76bdf264c53820f231859f9c6431faad13636e0643a7") )	(173006, uint256S("0xe8f9a41b1e63d6891dabcd3148e51d435b09e55c5788257d5cd5e4a185bb4c5e") )	(245334, uint256S("0xb2da1b39318c4bfd7320bc445d8a74146421683b835981a42951b863cb55a10d") )
(34358, uint256S("0xade63d93785e54dcd960d5134233ddefbbf9c72ee7e5f503612e2d549cef777b") )	(65782, uint256S("0x1eb873db1e9f4fb1b6b4458479a0dfecb0aaebcf70c41f62714c35010ac80923") )	(94556, uint256S("0x546d335b98c37c56251f6a64be7e1ad2ff94d26eaab5c28bfae0298c0bd2fb76") )	(121889, uint256S("0x27899bec1c236c6f62f48c3eed308b872cd88c23081571e4ff2fe66e4944beb2") )	(173031, uint256S("0xdbfffc1981820252a7e599aee96fa29c248c4bd8281ad068447046ee696069f3") )	(245344, uint256S("0xb00f10075118b84f2b12ffc48e4c949481ac5f5dafd2da58c3966cc30fbf54d1") )
(34366, uint256S("0xb5fec924ee57f81085dc5e07d306fcff9847665f1afbb33adaac2ea3e830ea4f") )	(65850, uint256S("0x2c1f14396cd6d3197b0dff2af440e46cfb723000ddb47ba3ea94fa0985c46325") )	(94651, uint256S("0x28168c9931a91db177173f690736570bf76efaf6275080c312a86b4edce21c35") )	(121920, uint256S("0x584b7be4958a48c939713357819f8e00d18d0d128b919f5afe12b39cd11f129c") )	(173247, uint256S("0x3c6db92b08c854090cf8959206bee4a39feba77e69b8b341e3a228a8cf8536f6") )	(245416, uint256S("0xc1e088837518d4c4054b85192244e5d96afdc27ab70c1db08b1e6add50589fb1") )
(34451, uint256S("0xfa55054c986e6e285055e88e8b50954cbbaf8e9c747a9476954665a05d9b64c3") )	(65855, uint256S("0x73d48da7bb9b514bc17ecb7c64306762fb8756877480f600cabf6b21a912cb25") )	(94712, uint256S("0xceed93703b8af92af939b44140d06e269a74af8fd78d4e1ebd388e7908051a7b") )	(122089, uint256S("0xea5d6c528cc35d1046c2f7e6ff5533deec6d4ef93505cd196e6121fe183bd256") )	(173341, uint256S("0xa95257b2ea31b01d5eef7171ef5a44bacb323bbf2166d5327576d50dd0ebefc3") )	(245453, uint256S("0xd719f7cac9f608852e92c74d1c1a90ce4da28a8dc2bc957c6c1ad19e5f9698ca") )
(34586, uint256S("0x384a990ae2f592febc8f242e48531a4a888650f503555883bc6422adb907c045") )	(65921, uint256S("0xc47f86bc392c08ad1724fbbefb097526825e76d30339416b99a61feae40e05a2") )	(94724, uint256S("0x769e864ed725aa9c4e7c279bc5be98332ad92a04e426a6bbd1ed98e1c60d352b") )	(122178, uint256S("0x1ae88af1c8f0464cdfb062a594fe0c6a2a41d906cf7faf6067d844e84b698291") )	(173566, uint256S("0xe45b6f36163f1c7347cc09381ef4d76542f6bc5f9a8f93587f1d67b2aac03433") )	(245471, uint256S("0x80641a5ed87d4c850292ec85d1ada15f40954b21da63a9a4b9502b43cd9d3e43") )
(34592, uint256S("0xa20d3a5503999242bab752dc690248c86ee62ead147632c0edbfb141016fe234") )	(65944, uint256S("0x0530aecf79fee4a5d92f6fae028ba9197a9b656909dc0fedd760f058f3b457d7") )	(94746, uint256S("0xde7a4f7c6a4b6b64c4592f3fdf3ce461b4e6f9ec9f586b9cb8b7557756143e90") )	(122198, uint256S("0x7c2a987f2aef9326c5160b22daca5115e5528ac365edab96262f6ecb1949840c") )	(173581, uint256S("0xf22e65036387aa9d47b0106694db8ee6222343928d114a559e1c0bd9721c7316") )	(245482, uint256S("0x6c36763a7c42849eb33c5ee52eafd65e87247a6c4b63e5fe1e65c1ada00a537a") )
(34610, uint256S("0xc20494b72a0cdb7d5a70342a18e0c6b0fe32944ffd90db134ea4daacfec95698") )	(65982, uint256S("0x2310821e2c7225347e0f5747020ceaec36ef08e9e0b1e0b4d0cdb8759726f1f1") )	(94788, uint256S("0x218cf722d097d6a029dbcc2e944d18eae5f7ad5d99005c9b6afe98ab51ad25ba") )	(122229, uint256S("0xc51d92fce9defaa105534b07e495acf50d28225152ee273206fa941882681b75") )	(173717, uint256S("0x7bab99fa4b880dc787ece71eb4ae8a9ec573184e8b88f8bafe860cb1737cf549") )	(245668, uint256S("0x856c7764cd9f029ca9155c88f4919b3b4f53bfc4d4bfef79dcdaada33c676e11") )
(34658, uint256S("0xb754471b3ea198f59e671373c2249456e0a00ecae4579ec790fee89c3d148f05") )	(66064, uint256S("0x008b8dc3e5016ad622d9db525a48b25f391bcd6c883f3bed4c132778e64f90e9") )	(94792, uint256S("0xc8972e346ff0a03e1f85b01e8299e831ef962575c492faa9db9ce9b4fd519488") )	(122268, uint256S("0x51e848b1b46ba6c4705a10bc2a168e85c5019ea0ad42c3e6a2bfa6802f5c330e") )	(173827, uint256S("0xb1e534b06ed9b4c072b986a138f46a8566a3ad8736a924340c116c3ab5dc2f2d") )	(245679, uint256S("0x1b0085146ae8af632e0bfe551b560102e6c7ff51251f2f1493516a5b2590059c") )
(34726, uint256S("0xf7c44a2d708afb7ae1b32c308a117fcc43892d2917e91045639353d41abbaf8e") )	(66132, uint256S("0x4f9419a40127e8991650981ad6afa790849646565e4d4b357d3eacb0d0286373") )	(94909, uint256S("0x6c463e605f3e7f588abd3bdd053aabb990de52b4fde9d039de47ff03dc6425a6") )	(122351, uint256S("0x252d0a09e61df0bbc788260bb798998e0d0e74fd85bffdda7a8b4cf46b2b23a5") )	(174117, uint256S("0xd42f9d4ea15e8a0f4c8161fb4ee2ac9a4f1dc9446c25068d9315bdc0bb86053e") )	(245732, uint256S("0xab46e7916017032676ce700ef0c8ee29393639136c3f411f643111638bf15b79") )
(34776, uint256S("0x4ae2a81cc3b7920277fe1645d955ff784c765f8e7f8dbbf954bbcd7b2082ec28") )	(66140, uint256S("0x277802efa80baac928adc6a6584632e36ffc4d4b31755f5b625e2b9f856d158a") )	(94924, uint256S("0x95e9e045d854cef498e6d830fc0a5fd1a141d03c2e710c48af45efb08ce86b61") )	(122388, uint256S("0x517057213a3f4d013f3b7530e112ea6f111c978ee1e7ad9cce815e5419977bb2") )	(174237, uint256S("0xb01e8fae2e39718b90e3c7fe5cb880ebc130b500f0548ed2a89d9c6d62ad7ead") )	(245827, uint256S("0x3f7f662ae40bbc30b4eebaaaac5c27eee158cff31d3e898261c6d29fa667ed71") )
(34788, uint256S("0xeccebe1d14751751b7b5d9bf0c33012615a535cea6bf766018cb9e0148221b09") )	(66291, uint256S("0xa1b86f23cd2913f80223f2d4a524540e2c6c3a746230898cc61967cc0878fe43") )	(94958, uint256S("0xb3af56a30db5c933bc78498ef234bad0c11d1b1d0801102e74142119165fbefc") )	(122456, uint256S("0x68f7da57bdf3472d2ffd67b1a20ea9b67670788371ebc8e7c8461e2f3426a60a") )	(174464, uint256S("0x66022ce27ce1c1a120b1d25a0d6bac44e40205fc633f3a4c575d68b9ba417e64") )	(245901, uint256S("0x8db3323790ef6f0c95f797ef89c77a9ece33156de13a5ad36e9aa4ca648f9012") )
(34803, uint256S("0x56cc688879b2940e06f7c0c06e268a7874ebba031e57793e02d46d0186472ef5") )	(66379, uint256S("0xb085ddc576dfbfd1ce3103f9470d069e428ed4a6e651c61e7d82fb03d350475e") )	(94964, uint256S("0x3685c66cc465f1bb797c970b3ae33e9a0cda28d692340ac3b847a3dfdab98f42") )	(122466, uint256S("0x9282584b8ad4d1d52c20b249ffcf8b365cee78e827e2bf0f46a203ba489f9a8e") )	(174659, uint256S("0x90f220b1d8c4cd2e87d426b53f74d69040cc3b506e8e12bc22c9a8bb4f2c64f7") )	(245952, uint256S("0xa5fd3045370e4da35db5b3a0db4c1f35ba99e17f2140450d9852f1f38624152f") )
(34914, uint256S("0xccc257452ebabd9b8468c7e0bd3e5a9e862f970618517643909d08ce0a905472") )	(66407, uint256S("0xa0254ce58714c2752b019c095886489c4bd1efa4d290cdca9f71d01a2ae2ad4b") )	(94997, uint256S("0xe64f4859f6db68b9a27fc071d8a2e3c16eb93da2a351369f2ec1143e16708579") )	(122489, uint256S("0x25cdf9311d283ea40a8e88036349e31cae300606cd1410cd749fe06171d0cc97") )	(174932, uint256S("0xd735633bf88dc227599992f494ea55a43acaebc315dffe2d7f62b2a0a0b08b7f") )	(246042, uint256S("0x05acd58de40395c67636bb9c6aaaa1e306da07b6de5113cadaa1c0268c36113e") )
(34944, uint256S("0x2c6e43ee8c8d3b76ed38d73b69ca58c13acbc12ef94ad2855bd2ea827d5e24ba") )	(66528, uint256S("0x759fcb13486f7e020e42c1534c2ca9dd7d3efc6df3e60606faf00feaf3e6b632") )	(95062, uint256S("0x84d51efc113f575eb0af70cd07270eca7088aa8e9be6b4ac9926821369ca0d37") )	(122580, uint256S("0x8ff9d6735d6307f2877aca2f7d5542a37dc451034284f781578e6fe14b23a2db") )	(175049, uint256S("0x77e5bd21e8ed7e92bf965fe775eae533468f7f962ddc1c39ddaab21bec5db146") )	(246145, uint256S("0xbcdb6916a1320d150f4ab323d0c0cf4e80745de0e64bb84569e6ca1f35350331") )
(34946, uint256S("0x2fa29f2f9b160ebd41c1619919a5fbefc1a116c642a35063ef3a2397fd996701") )	(66577, uint256S("0x98ea5ec906f619a392e40db5f06dc5d57329962e4fc478b6142e76becdf8c00b") )	(95076, uint256S("0x90b287ad493acaad590369d2d340c0b7d057ee2d9f2eb10168847ca9fff0165e") )	(122621, uint256S("0xdfac3d1e8d2bb185f3bcbdb86cb9888666a901f7fbb1babe02f01757a69a356b") )	(175119, uint256S("0x99163e3b6d67c57bd87ca7d3b4cf2b1e03634d929f65d09cf9b2b3d027ed99c7") )	(246479, uint256S("0xe8ef62a2cff53f63153684e859f1384332bda7606e4d15bfdc8bc7b91a29998d") )
(34947, uint256S("0x4eb92f96c40f80f493b3f40265275137ea0122eb3abe53680c654ed7d5ebd572") )	(66636, uint256S("0x3dda52f02bff89c1e7c25359d0af4725c60cef7ebbfa77e72a099d6a3193f548") )	(95080, uint256S("0x94759c36d82c6884115de51fa94d66d1ea8f39612614177574ec4cc4f18b75e8") )	(122644, uint256S("0xcda1296b0643745d3f9c54aec8256eea0a75287bb278d7d32c211db1e20daa52") )	(175168, uint256S("0xfe989c9044cead41863c0c4fb2b94cb090a5fec8d55226586c8ccc3cfde854de") )	(246583, uint256S("0xc0823768c93d54622525808ded683daa541b8e9796c6bdeaecf02dc10fec3aef") )
(34956, uint256S("0x36a658be632d3094f527a98d925aaeab584eeb3aa72cd154e9909141cb72194c") )	(66743, uint256S("0xb32bfe9c4f0bce80ff8b295475ff9e2c47ed8e85034539465d901324a18bed6a") )	(95114, uint256S("0xd0c51763a5a90cf3e7d2bbed1c3aa9ab15d385454f90e95531cf25efcaa52731") )	(122663, uint256S("0xcb038758c3800b0bce4819960b7b96ef395afb1cff45504c1340a21da704bf39") )	(175205, uint256S("0xa0d0ce6cb24b72b8dff89feebc7d80dacdbb8df63087f8185f1f228b83fba8b2") )	(246626, uint256S("0xf8be3e1b2742a6400732c57030023883074b842429d826bf2eabac96a244153c") )
(35055, uint256S("0xcd08e9374f9f69fc1672ff38a9c91650cdc50d82062a4b7a55f5994fa6e0b58d") )	(66858, uint256S("0x47dbe440f448054a9d442f5d09fa30bbdb0a2aad9d64cb0ea89cd91723bda364") )	(95145, uint256S("0x972f979f2b015a54abe569afa0dd3ef092e75b0050322aff70df26155c5c59c3") )	(122714, uint256S("0xe4fd06d078bc47da1dc456e147dc3da4c2afa8f2d9a1007e7d6407db6bce3339") )	(175228, uint256S("0x73cc9528d0acbf6ceea8b581f03b637cef4f7f49927241b4138a2f605193fe61") )	(246954, uint256S("0x2cf6eaccd1c61a17bbd22c92865b25ae079581b55dcd51fd4ffce6a721963b9c") )
(35116, uint256S("0x2e462683dbecad53ef8eeee77de6a8e1fb62f240cef7a3f6a7c3876532c86299") )	(66929, uint256S("0xc765821f84841ee52800783ffb1a8c802091ef66080ab5e74788ff82cfc576dc") )	(95166, uint256S("0x5a59d1d803f17cbadfca3e1bee51757644ef717724830de6dc81a1e95e0d34cf") )	(122720, uint256S("0xcc4b926587f54e315ca68a40a650f4f5c3d50c226bed1183091d541e5865f3ec") )	(175281, uint256S("0xc43e3cbdfa8ff115462c0fcb3f8b72a61829aab90882f6ee5a78afe5e70cbbd0") )	(246994, uint256S("0x1458f3afb79ff860069efe396ebdef895058863153eb7f36ea2bd6f4fb7df34d") )
(35144, uint256S("0xdf326999c9c1e43354e4ef3c383ed142b318dd463f3e888ea3195f9947503444") )	(66951, uint256S("0xdf01b319d945cba2f01622015267b16b653acb3caefb0baca68fd64fcbbab4ba") )	(95182, uint256S("0x100dd4ca08c50f82c667eba4772e86c50af1a584f51692cf991985c29f73457f") )	(122722, uint256S("0x61aabb98ef2009fbe78b7d972c940fc33dd8428c0a50a3ac359f69e54b57bada") )	(175304, uint256S("0x439a9fd528a3fe81537b35a66577288ba642abe090efe25bb57000d2381badf4") )	(247300, uint256S("0x2bf65bb1e56831775c5adf4830cdb4820a9cafa42d845fc48eccfbfd02091933") )
(35330, uint256S("0xdec291f32a7663755e9a53ebeb7fd57b1e690823e7414c8858b0f468e995b4e7") )	(66968, uint256S("0x0d9c3ff9a444100fafa598e059ff687f303000b3b9e9f2fa82382febd067df1d") )	(95245, uint256S("0xddfaa7c7cfe499cf155e6139e136910971a24139776566a565b8bdf9c404c656") )	(122752, uint256S("0xe7d02b1af4911f4eb68cb7c226a1971b274caba3e326946d34c6b489c260a49d") )	(175561, uint256S("0xe9c8fcbf70ad63565a686627a6053a26d23068e50d22470884c1e1f52d9ad71f") )	(247416, uint256S("0x4858215b54445f0f591e1b19d3a89e7d3c0883e014ba3fb061c2da4fb5ae869c") )
(35382, uint256S("0x4937d45e7fc2512261d647254a81619bdcff3722dbd638006dee7947a4ab5fca") )	(66973, uint256S("0xf8c62345a920bd321847450521c530f90a701891a72e7ddd5c8e765b67180eea") )	(95278, uint256S("0x34f4334aece70209157a693714bb95e4742e62313cb1d1bf317816363e874a84") )	(122777, uint256S("0x21b40c6c04533f9c397d0c1161e334c37bd5604ee13e6fb7d625ad78d728d832") )	(175720, uint256S("0x402780823c0b7088331b7d244d6cfedf7826354a497197abbe89aceb45e7db47") )	(247613, uint256S("0x81b482417607de1f20ffac777ceab825e02557e0ee014a6a5bea9593ac367368") )
(35407, uint256S("0x6ec947ddef8fdcaab48e5b3bae15345c40a63113cff58f8bf142a1467965d3b4") )	(66991, uint256S("0x0efb9e71426720a886c8afbb4cf357d5d09e4a391e3811a8a189825dcbb12e50") )	(95332, uint256S("0x677794b11e63f64b3bc1cf19c02387c28c785de23df72a04bd1a8c5efa6c69f5") )	(122883, uint256S("0xbec9c9a4ff5915bd80549cc8e86db1d677bea83af132786590014a6d5129829c") )	(175723, uint256S("0xfc294ea55a42796c1e3987bb3420cce54895dcb49e98716f3c419a0b39c720ef") )	(247760, uint256S("0xb4b38e63bd4f39d0154a262d0d3da31a8527ec566e8f6c626fe73f8414ec196e") )
(247856, uint256S("0xc95ad1ca5d41376c3dbe276e0b7fc85352b2c184ccb437b4ce289d5b61cce9b3") )   (247922, uint256S("0x6a6cce10ba6bf30d10105a55d4ae7d692aee54c194177dc2b7c7d327d38fd42f") ) (247960, uint256S("0x335e1076f896acba2ab1f6b489830f34ca1f0625e34da799eaeb95cc4520aed1") ) (247965, uint256S("0x2dd079319ce383ce0bf0859aa65ac1a42392bad97b2e54661f317aa81a59d65c") )

    ;

// BIP30 exceptions for (testNet)
static std::map<int, uint256> BIP30ExceptionsTestNet =
    boost::assign::map_list_of
(2245, uint256S("0xb36ba28cc920a1db46d6a2d35e0691abbb1a03f5c44da7cb43dcd7df236fb1b4") )(2267, uint256S("0x184c0eb4f40f1b6ce75056672049fc495718c8d4e9fe00b13f8c1b78bb9dadb6") )(2347, uint256S("0x99856fc8f4acf84f4221e4fb3d26e46a0902b28548b9339eabacb01e4659e4d3") )
(2504, uint256S("0x250c57828a33753b86d9010293bdd132dfbb3accd03ebc5b947b872e118ac6cc") )(2512, uint256S("0x36efb86aaee95696689f9f559f1d95e3adf49a3d683469208887485b9c43e2e2") )(2543, uint256S("0x8a7633a065a9bc6cb226834a2519b195b333384dc2c04cd7bb6dfd508caf92f5") )
(2560, uint256S("0xa1e802307113e98de8774575418378008258d1fdd75db37e10704ad21dce26c4") )(2561, uint256S("0xb544893d9a726287704799ce2c69e58b09e46b5ff0483db294339d0f008bccce") )(2621, uint256S("0xcba4b5705b9e209eba89027d2d7953b69676359b9e826518df17d964f1c051d7") )
(2980, uint256S("0x8354f312f89b9e6ccecbed1db9dfc9b6533b58da81eed20ce1193af273c3c2ad") )(3047, uint256S("0xa21047a0c9d44d559f5d9954081b31cdcd07e085a2dd3a3d02c8692ba727ee55") )(3067, uint256S("0xb95db8cb1cd269a1e0907c60ee47331a19cbaf524ccc4faeb3d3974667605f1e") )
(3099, uint256S("0xde77d69206f3294dce99a216d836ad4e7798e47c5c509f49b5e0280f49e8fe41") )(3249, uint256S("0x40d04bc9e7c2f57c7fa46d9299e3395ceaf905a94265816c8d77bfcb6bfba150") )(3293, uint256S("0x62d1d811e0995972941ee65cefd9b254d767bab443b63e18c1ece58b6ab62e9f") )
(3412, uint256S("0x090c13438ac170ff9ac451724024104b37e30b8f47fafd55a27384ef64ea6716") )(3436, uint256S("0xd833bf0284f5078d5494e3e4f6d8daef32af2a92a683e455b7799d763be94859") )(3438, uint256S("0x5b395171364b7005fc88daa42ee2e3959fd9caf0555effdfd69f8c9566da28c9") )
(3442, uint256S("0x951a4e2a0a9996042762e83371be3bb04f77448ee66e6e0b11b6b0f624a0f698") )(3457, uint256S("0xe8d14375b404703b5117627795085fcf2984e3d9b8946557344054133647ca97") )(3619, uint256S("0x180db6e1046caeb6b824591bdd69865d5e81206d96e382dcc590e5a940f54c19") )
(3649, uint256S("0x96ea3f7b15ca23a5666762f69127e3da8aff17b2102cc1f5ffecc7a567aa6eea") )(3689, uint256S("0x13dd64748483365a2b0661fcb8f6739940726bfba80a361c191915bda676cebc") )(3733, uint256S("0xd1d0b1896d2138c7a59b003852fdcd797b563a4ff6c920be50b696fedc5eaa7b") )
(3875, uint256S("0x8efe6dbf62499f3aa17e749296a3b5c4ca5d228f42575ac7855356c492457375") )(3887, uint256S("0xff5fdabc890af2bcffe9954114eb748c07c038d7ab86735eeebec16cd6a7066b") )(3977, uint256S("0x7e8955ca95c744b4b75d25cf4eb55db4450fa5565741ba8cd13efbf3c48698d4") )
(4069, uint256S("0xa1313f0f9241960783a00f8f22ded19710d57e70c24f202afce386cb7d87bdee") )(4310, uint256S("0x12cb4bc78a68a33952ddbb3a6598c76dd0e5cda5e14e4dfc28ceaba7182cca78") )(4338, uint256S("0xb89f78614905d0b903a575eab2724a1ccad95629a03ab46910b0c9bb868c393a") )
(4445, uint256S("0xf9d755b53fa0e9f382ab93cc2f4c78229cf3e230a0482483370b76299266618a") )(4474, uint256S("0xee74bca8573e25e22287ae9967b083a2e52536229bad353f1cb803c83590b651") )(4580, uint256S("0x69a49542d66d1f865b38c32df104641dd48a7d593c392c09d68fcc9524a773e8") )
(4616, uint256S("0x0d35ddb402d04d71090d3b55e3f8ac63681b69b9796fca32db05a2062ced2af8") )(4751, uint256S("0xcf309e7c9272d02784025367cfae652663fdb42bd3c5e4ae0e60224dedfab9bf") )(4831, uint256S("0x0d2a61dd2654d9fad4799bc5701a88a63e72216ebc9891615cb4b6a5d090843f") )
(4920, uint256S("0x202d16a5b3e1c95bcd17b0c725242465ee56d9f99312fd155b4f98b2cbea0966") )(4930, uint256S("0x1b3c0d02b85a4ab64b61398ecc4186935fba69a5b2efc0a74faff6b10566a629") )(5153, uint256S("0x0a91b3508d7bb8f472bfaa52860744a57064028a6894e2de98396a187504d89e") )
(5178, uint256S("0x8fc0729d16c9a6a0a274a7c2b1216e54c913a2d5d84eb51af18d11d9728a28b1") )(5228, uint256S("0x76bac306f13333bbe35ffdd5dc09aeda5907918c21fdb064873b10a94a3fe6d2") )(5229, uint256S("0xe0640bda55140d7f2b8a6a7a451a5617170f50f6123af2edcbeea1b594059f9e") )
(5291, uint256S("0x1da676bf1c258a6a2345bba88b668e8d2bdc20c55361a75fb562d7fe98d2b71f") )(5350, uint256S("0x8db61f80b236425436b6aca7184c004d08797343970096d239683e4fc770d54b") )(5369, uint256S("0xfe7d4a00d9064251fce31b3890486748f119042c2fdf76f99f0d11b20c0c540d") )
(5387, uint256S("0xa0de3ad520438284942a07475adc482974de8b38c2351db82b49500ccd2def9f") )(5448, uint256S("0x379675bc9d97c35cb4922c0d0ea5e21b40e5cdf0af7c9a3455423534213b5d17") )(5517, uint256S("0xac393e58b7d03225502f1d5df3e709825d7761a305f0fea9fc4a36c7a8bba508") )
(5563, uint256S("0xeb7d38d7c11a084a5dfdd91038dd2466c22c18a313177a3425b6bbe71b193ad2") )(5590, uint256S("0x167da5a7f439f2077139f0c5ff08464ae2d960b7270ce953b22d81fee9a36798") )(5626, uint256S("0x95160ae5580300378bb08409deed0a94b3334ad6db1322b5d71488b29426786b") )
(5630, uint256S("0x845c15cddce7497792d528e6aaaa7475868c4b15d7ffe41520940c318c55c69e") )(5729, uint256S("0x057407222a81bf3240f855e7c6048131a0bf8eacf485c6118dd1668d5eecccb4") )(5754, uint256S("0x04750589c2ced85d52679c481d53eae219c53f6bf1098d1c75279361c835ade3") )
(5893, uint256S("0x8160d9e1b1ee8106295280d5504ac1a161ecd79ec5c7c1d08be75f866c931278") )(5919, uint256S("0x0744a9d2864f23f23e4794adbecbc511bfcf1d5451d07c07075ba52fb29bd5a5") )(6120, uint256S("0x129567f3730a32018544fac23b2bd34d14735e962f6e23aa73f044c76ec87cb1") )
(6446, uint256S("0x717318aedd6c71f06e62c372caf0516d226d0912aa2bc101a8fabb22ac185085") )(6492, uint256S("0x0e4d57b4fc36755a0946a969318b2652e7dac1714803b608e080748505d68b23") )(6522, uint256S("0x2df66b8c109326c43825e053eae3db8bfa32dabc81af28b092638df4fc693815") )
(6620, uint256S("0xe5affcfaa357d724d2fcde9aac3eb6f5b5b4e8f0dfa54f4fd1fb9e8761b068e7") )(6655, uint256S("0x8ff918fc5fcea63bbb4866cc2debebb678008de45ab95a5c880d5728d4a8d71e") )(6755, uint256S("0x476d98d80f3aa36264cac5cce17a4d82fc0b2bb949f13f16f46d362578eb68e9") )
(6795, uint256S("0x2f8a4602bf69899d4ea855c200d6564b69456eef26d002ccf117c3a67e2d9931") )(6873, uint256S("0x50e04636a3ec9a4049100e236612056c254f78628e9cd009d60f1b9b1436950d") )(6880, uint256S("0x2f14f00b1138fb2d4cb69bc324fb516431e58327b4d1cb89adefafe050824b7c") )
(6923, uint256S("0x56b901faa64e26a7223d37086fbd54f4b3ac86de991651f7f0a963f1c9c4ae98") )(6952, uint256S("0xcb730b59a60278655fc5221a799fb4cd080ed06c693df07422602826ddb33965") )(7011, uint256S("0x2534b531e8b28376228e17ac7c0ac2872a2bba2c1db21602b4c08e6f111288d0") )
(7061, uint256S("0x0cb7469c3404ff605003cd73f5221d35c47f93e686ed70aabd33ab46851de407") )(7089, uint256S("0x0b8c45c1a1ee710a3103ef0d8466a6c2f700bdf48e6fc79432099f18673ec1d4") )(7162, uint256S("0x1d4bd28a0eac1615d568ad63631593e73b419b8135fef786bdbe324926c2ed69") )
(7199, uint256S("0x1b27b5f243388417c3239b8d91976fde3a3da35f982728b0b50a205812d3688f") )(7332, uint256S("0x53a13f455531bdd6efa8d4925183d9be01cfaf0793218e3c4a6ae8936d38c3ec") )(7358, uint256S("0x82419784951c0fbe8dd06690fc3ec0ac301bc17abd73126d8b810a63fe74de82") )
(7378, uint256S("0x9f26cf5752a1feaa26764ede0b7a2ec0c1e0b915a83a1ef61cf442e72d63d1d3") )(7433, uint256S("0x1e7582eba0a360256a57b3eb30ac98d953aabd1ff1c882ff50d6ac62ee668eff") )(7468, uint256S("0x93c691847a5e2c4019f7e9aa6bddffdf9d6a97180204dd6fb6ef7441a9753436") )
(7564, uint256S("0x7cb2a02f975256efa82e1065dcbaec3ce8c34203a9c7cac31bf7d89810eff50c") )(7578, uint256S("0x0fd71a73a835788b2ac3714d086ed656f8c44a1db867ea5283f674a15cfc3871") )(7708, uint256S("0xd15eb7c1e9813751f7cce2d4603ba78c731cff6f2c8ce97e8dec0e6477fb48f2") )
(7709, uint256S("0xbdc0e8619ed683745e1eefedd0aee97a4036a7e406246b691142fb216395b0ba") )(7767, uint256S("0x6968caf75911227582aaa7284bbe20221583ef2fefb549204f87bdd054e94dee") )(7832, uint256S("0x1cb960eefd2ab794a2687e727631bc3dca2c1749412d8a12e1a354299c20db6d") )
(7882, uint256S("0xe12ddd304af8c7fdb4303965ec3252c406fc0bd690c17e419a77175f52e20006") )(7898, uint256S("0xdf0592ded1ef1f547573547a115c429ec7f3728206dc1239684d2b3f1538353d") )(7983, uint256S("0xbe055ac1d35d1751c00cd6a9b8a7cb03cf85ca8e184e40ccba38e2dc32064628") )
(7993, uint256S("0xfd04514741bb4da40498b7525937822d82873fb8fcf7d8a585a91100f74b261e") )(8343, uint256S("0x5ebdf4f08c06581cc07d86844047c74e181d9542693d2d0d5f6641f56988e1b4") )(8382, uint256S("0x2ccb2428ea240104e8d6c8ec829d389e9912f1f779aab8e7988b64e52e92a620") )
(8425, uint256S("0x65e80903ea540076ecfa3f56b8136381fea0aad0ebf17c1996d38e4fd87ab59f") )(8435, uint256S("0x02446a219baad740b2c23df6e205c615fade20042dec878cb53bbfff7f28e637") )(8455, uint256S("0x9029189a7b1666cbb5f886b6dea0cad71a42bd9ab59cf8a92401c01f0dcb82ad") )
(8503, uint256S("0xce5d9944c500eeca33766aec0e9e8edbb2ae041284803a34bdc37cc4c8b31cae") )(8607, uint256S("0x49986ffb41a72d05bb7f6a11dd17016f3a4c2d634475cce3deea6536ad076ede") )(8612, uint256S("0xc4563df6007a7cb63492faa4df0bc13fc287c81ad9ccaa3ab151d6bb13617c8e") )
(8701, uint256S("0xf89bb3274cf23438e3f516c348a4fca4496a6b4bfd52dc61162bfc5aa00fc1e1") )(8805, uint256S("0xdff7506be6c424c5d644c3ee1d05379c5e4aa427a5258d6f01e48295bc7f8545") )(8841, uint256S("0x08632350f1b32932e8624f2cf10bf47e72535d2fee6e75a21a37b75783c40b56") )
(8863, uint256S("0xb72eec7bba431d69b547af71cb7ba85bd0af4f8661963a057ab46dd8b03dfbc0") )(9130, uint256S("0x899cb2cbac4e2c08aaf396455d8fa938d3631eb921531b9a4da4af982d01e86d") )(9239, uint256S("0x1ff5ae12ff8524534bddd7fa33826d94aba55a21d9838c4c97e56cf8b4378f50") )
(9245, uint256S("0xa27105c3ad77ef87a904c3a1dc781a711c87648c70c83a41db0bf05bf0c11f26") )(9340, uint256S("0xf731cad6b7a79140bd86e5d7d2478f9f1dc9697116563eb9468de884fd4b0349") )(9365, uint256S("0x2f269e4d4b33af6ba91733b3a667922c9ea22a84446fb9a84a1a06735f44ad84") )
(9381, uint256S("0x7ac286e98019f57838c2ca08b01208c2e5b5e75ca665ed6830ff7265e4288e99") )(9404, uint256S("0xc001bbec43cdad5a22af3c127a8a88805dd535fc15a897345b1295233ff68485") )(9437, uint256S("0x4147da0255e1bd0a344b21db30bf6f60c8070d260af9ffaea99a43888628dead") )
(9512, uint256S("0x5ee150769e5501a7d24df4a99a48ac40bf3f9b3fccafeeabf12aba1c59190011") )(9548, uint256S("0x8b0cb3a516a05d5fc6bcafeff06d6fdc24a3a3537c14b60318aff38ee1743584") )(9886, uint256S("0xa09a1636b8135a36dfae9c523e8b0a31ed6fc1ebd82931af2ec3a38c3622e83c") )
(9954, uint256S("0x2938fa15c0d086404f1e6ca0410b36e05d9c3be1a0e8c23ab0481d6154aa14b1") )(9979, uint256S("0x1569f40afbc66c456f4dccb99c7618d5f5022b177a7ae30177ff239342d83dc5") )(9998, uint256S("0x61c5eecef4ab5b313f8112b40281ffb8c54891b9b2b24d5ec61f159eb317f15f") )
(10080, uint256S("0x268feb140b682aa9097b6cfd78e4c9f8915daa407a04e3396dc8d636f72abc0f") )(10082, uint256S("0x219077a08552038f1c1b9f81a64530c4f2bc8173c73b7577fb88483fc455b765") )(10121, uint256S("0x171731fa4f116482c980b28af6fcf03d5d35a65dcaad1c069015944b43cfbb9d") )
(10146, uint256S("0xcb5ac5595acacf0ff35b8716241cea0070a4be90ff2eb235683a58a29a1f43ca") )(10220, uint256S("0x45154ced57a3922fc3f836010c91e577d15c858e8f4e88582dc65eb437ff4a79") )(10295, uint256S("0xbba2a0707ac0a45a11ae4cec3b5d4bc243c6249be9e76a48aa0a5965b693e766") )
(10384, uint256S("0x9be9f70b9e9ce8f2ccddb2b36ae1d53c9f9b764e5f869ef1fc77770b8e09ea2d") )(10479, uint256S("0x0b21ef06dd61571be99f085cbdd718fa5b0c10e20c1169843779b6abb19b9bba") )(10542, uint256S("0x2ae016288e794d6387716d193f3ac71856edfe3672cc39f6596e0fc77d9699b7") )
(10732, uint256S("0xfee81d2dfa79c18d194b421b384fe8b957ee31ff21f1c30f2c1babce175ee699") )(10812, uint256S("0x0bab9e31ceccc7d6910927cbaa3c03f0cd87f9aca98c6286215c0c735f024a55") )(10849, uint256S("0x8c87fd14f91e4497f9b86c3bd00c7c4b625b8caf78c385ec6083ecc8031756fc") )
(10877, uint256S("0x535ae687aef40a9d1252948d9757fab1ea985835f8966da6d24ac0fb55822d7b") )(10898, uint256S("0xf5f1de079cc0ebac872998d49c55b6de5f0718e3fd2c3962197a529f2d41d300") )(11056, uint256S("0x011af4f979f772fe7a9d88d84ab34f097fa15ba44aa658dd6b2db1408eb6b347") )
(11198, uint256S("0x0a47ffec1bfd5e8f108c4aa7737653f412d7f465ecd4977a9a4a278de5e8befc") )(11218, uint256S("0xa65206a39169c86597469fb0d7d2dd098ffd00b42fe79662ea507e55942c8c82") )(11236, uint256S("0xcb10753cb6ba95e2f8a8621bc845568b43ad304cf910a9b4455d9e70e1d1778a") )
(11254, uint256S("0x0638205911f317ed3f03bd349e299fe7af9b1b25a362ed99fb4f08032871480f") )(11260, uint256S("0x736468c6203ae672ad21dd168b126dfd19a35b8d9ee9fd3e0842e83f32daa209") )(11282, uint256S("0xdaf98d6e1f41f755b0f4eb35dd3bd95a8800912d23a7a106bff77176460eb2b5") )
(11398, uint256S("0xf73b35be20c204055c74defc20089f79617814b5c0fdab3e9ebf4a25d2b330a0") )(11465, uint256S("0x0369174d6dfdecc95c4eb6a2602610928485e133e212f07f9817ae661dd6e2c0") )(11536, uint256S("0xf233991565c08ba2544849fd374b733918feffa5a0031c74d118c12b9796a4f3") )
(11564, uint256S("0xc1beb13c0bd81c6346088294073a6623e7fc17e3cf2d7df09a6ccb85636cdd60") )(11598, uint256S("0x1c4be4b5c5e2899c22f93c08c85fd53c6a7fb13de0df82a223f4947db3781b9a") )(11718, uint256S("0x66d482f2227955b0c53fd1ed992080e8c55940c9f5780014dee24cc5897fc238") )
(11724, uint256S("0x8d897078a54464ba67b51762db5be32649aa6c7f15be4bbed128fc347ac0f229") )(11739, uint256S("0x41430e8c4059deef7e488a425b9eca29d54add921fc5f9fc6ae4236ee3a3b3e6") )(11779, uint256S("0x62b2d2000eca79ee1e2101a7bf121ac17ad6b0328f81d77a748917583e9b21e4") )
(11836, uint256S("0xfd790dc37f0b4ba3875666f8c7384f846cda8a20141fc9a36ef6eef171d45037") )(11920, uint256S("0x0e2b8fb63e9530da2d01743cb452b521775d21277389ac9ae54328bbcd73dea4") )(11944, uint256S("0xd73ac4af26b9d16a425b7f342e60db593fcdcc078596332ccef40e3c21474050") )
(11949, uint256S("0xb8c7d66eeb3cffee7043e10eaca50d20aa8e5549fcc52c6146815f0216abf072") )(11969, uint256S("0x078698af48d79c7c55864af39eb5f724c83a0667faf884efe4a35cde38654f60") )(11999, uint256S("0xf97f944f2d25f2a198ca610a6e967aaa39b8dbe9ee06c2e0dbbf9495e33d7f01") )
(12069, uint256S("0xf11fbdfb970fc11da4add0277b4c0cd00890487b6289e433d247c696de52a7e5") )(12198, uint256S("0x1fa81e5dc1bbc9b607aa57ff37005b42a009820ae01f68d25a5d5b0e77e63cff") )(12260, uint256S("0x4b1ad5d5cc1f92df9a50cec416822e55134ed43ec728824258ca7232cd869e9e") )
(12312, uint256S("0x506f153765a68ba0c08a6d8a0efb65a77e17ba7d36969e31b70460ee48c47bbf") )(12326, uint256S("0x9fd90d234caab762f5f0f3a377aabc65fd2ac4c51f72fd1c16c34a2639de0a27") )(12682, uint256S("0xec4538055347cfbacefe62af243d7357cadbc2d5ffd2347ca49e840f4aec6c1e") )
(12772, uint256S("0x0edc2d3e25e526c69204302ee5eba6b626a69e68db90ae71de204ec3f65752a5") )(12776, uint256S("0x0c4531df286ba654b2ade00a88b175a7edd3ca37d2e16cbdc2c6ca8558853bf5") )(12813, uint256S("0x8e6df9a279a7d6e7bafb42bcad6916d32284313c894bbc116e3e81076d7ac1dd") )
(12829, uint256S("0xc2b0652bbb6f0e7ad922ffd2cf8b23fa3ade8aee20c72dc68c457a2468929354") )(13118, uint256S("0x660a55673acb4d5cf384de639a14d5b0092157f81a2e5761f04a6659982a7225") )(13121, uint256S("0x5a1c54aacd858c1c693536b3bdb3f37f4306ebbac6642bbb844ca81f7e26c699") )
(13225, uint256S("0x38db84f67f632c2db5756fb0d46bb5a1c67f3bf0a6e4031671fc59dbdebdd79e") )(13305, uint256S("0x46cc2909b9eb94fe41850d7595956ea8c487ed6ad2591f8762c26b87b0f678a8") )(13474, uint256S("0x054aec537fc01bea3bff8b0e9d305ea8ef607c0248c1eec218b08e6a8390a5dc") )
(13544, uint256S("0x0433dd592d058a000a1a0fa02dbc68007850ab55dee70abc525c2c8c1e8887da") )(13701, uint256S("0x7b16f8f6b0c4fef35778a8ce970047b81d136dcbc79b7604e52e6fb6646f469c") )(13715, uint256S("0x7c6e91ba5937e634a6d311d1e34d9a70b5860cb864f07c7de1857f7a1087c485") )
(13791, uint256S("0xb4a51485859a2b5a10c612809df46cad59865cf1654d28dedcc0d6bdf4f143c1") )(13923, uint256S("0x795166ecc11dd6b385302c499d41f44d7a0eb34c5bf3eaaa87a8b96c21b5ec35") )(14102, uint256S("0xdd1a36587dd3eac1fc5053e6768ddeea93f188a903b2c2142533fdaf0ad4c518") )
(14151, uint256S("0x7ba9518b0407a493950175f973ce0dc5f5ae9ec9113dc7ddeb31b89c0b606f95") )(14203, uint256S("0x94797e6425d10fe518bf872630026f2f7e41d1de4fcd575a0d021950be36daad") )(14437, uint256S("0x72690f7188f09bc30677914a72993391f4a5a76887820f8296e3731c49bf9f5c") )
(14555, uint256S("0x565d55fad869b94195592d156219cfd1b3f3f8ff7cd42f42fc0726e90d86b222") )(14558, uint256S("0x86dc811d160ff7d13c7b1a5b6db4f33708e5b81ec9a1ea0fd3f73bbc8492a52f") )(14602, uint256S("0xb431b446dd969ce50382f003f4216cf8a11ff2238dc53f2f0bdadb167780dd74") )
(14625, uint256S("0x8bb892b6a98e5d8aa5dbe2ffd00e5764c6347ced3aa2a58586c5c09124e20504") )(14703, uint256S("0x6a2a345fb9862538603635faccb9f712d6cda0d8c30487f863126bc582bad69e") )(14930, uint256S("0x92788894b032abc0dd87395f16bae8e689a7bed3082850bf02bfcab037e89f08") )
(15142, uint256S("0xa236715c544f28905a256a3ff802a2540d583053641d69a2b845f644477d997b") )(15210, uint256S("0x9e28b81895514938268860f950af613cc917be81a077bdc23deaa6b4f3b96637") )(15223, uint256S("0x6f3c1cc6e405bbd897d14050fd0972fcc3d162f217b7b25d989ea8e54bfc3388") )
(15235, uint256S("0xa6bda59260491d00799d3f5ba25b2b1f68fc943ae5fac7e2840c0a557052d8b2") )(15272, uint256S("0xc30cd92edf1c0e19b2d78d2547f258303ac77123d365e6a633dd217d98f18869") )(15288, uint256S("0xad975b54493cfb3f68183d21f7b7cae3c343ae6c9c299c8c5996b46001860141") )
(15406, uint256S("0xfc58b8b597b517096cebaa6c2ce2c45a4e1b4d85925b24510bc2b36482a62660") )(15520, uint256S("0xf0d3036150ad90c8cbbe98d5ebd056c156ac1e6af43cb6b73fc7981f36d791a1") )(15644, uint256S("0x3508ee7e5ef69132e335f593d1d885982bfb9234768e31cab186d093f6a51dd2") )
(15771, uint256S("0x1a33f041a1e99d90bef5fd5571e7561e598dca4545a3c1d93ea4cb3d51b30ae1") )(15792, uint256S("0xd4df7bb0408326ae963c96d3f90dd892e46c4cf7ddc7576ee65443a2077a9e23") )(15808, uint256S("0xcdccc2283e95b89acdb1185e13d1b63a2deea04a2e82c577a4cb1c4d5393b3b8") )
(15838, uint256S("0x97e32193433035a2c183bd07a3bb47673cf4c3b1bf4ab1fbda21298217006be1") )(15881, uint256S("0x314b3c5994cd26a1e323a3a3d24d8a34e494f6b6cb4229c03eeed9e298693e6c") )(15898, uint256S("0xcad7fc71a3e563c47ffe20a583a6b8f0b2540a2f963654d00d763d0c56f52b82") )
(15913, uint256S("0x60c504d8855aab204cb215d57e045b5430e1c43f53e201127c6ad779d745e5e0") )(15926, uint256S("0x52f6cb824e067ef2fcca7dd976ac6b93b019ac3ff3eb40e0ce346bd130086ad7") )(15973, uint256S("0x57f1e93f2a01aa6b6bc6c57ac2bbd0efba5c97934cbadd641d124698a6cb36c3") )
(15985, uint256S("0xc473804733a291b256a5de806cd0c237ee706361203634763a61703869f9d20e") )(16012, uint256S("0x3e5a096d9ad4a1b057eaaf4b045453345061b015dcbbf1d2c31937434b30ff9d") )(16149, uint256S("0xed9f57385edbeaf4a129e78cefb573c17c06ac8ae5103f8568fa8b5381e5af5a") )
(16160, uint256S("0x2ec8cf1490485578be5c8c83862b3e1b2396f62da8ad17184006a68c544e2287") )(16161, uint256S("0xc98880bd605df78d1dca11172b50ad1bf0b94236a8192efb3d3c7653ef53e7a4") )(16199, uint256S("0x7e0e150d6846cf842043f78cf4a3e5641ac8ccbdb8cfa2d09c0a4b5f8218e184") )
(16266, uint256S("0x05661d06a728ea0c84b0865fcbbd0a70560e30a9dcaad8dff77d4896f65c74c1") )(16354, uint256S("0x3de4cd3937d2b4bd497568d9e2809880e609cc3bd377bfff94975f076e290fef") )(16358, uint256S("0xbf4f33e2f534fdb9b72aae004922363f31ee17be976d282433e80e054140a9ed") )
(16406, uint256S("0xe6410e925f089aa052ae8cb44e26dfef2e93f63380108b63126e3db607de93d7") )(16425, uint256S("0x3461c792b26163dd7eda8b0f8c6e7f60d646e9bb5604c10a524c5a43fef001ff") )(16436, uint256S("0x1d29b3b5b061c09cd3ac1ccc69ed421ff3902fd8910850ea1b5f99ce6aa5d749") )
(16447, uint256S("0xfaf7a3c232dffe104c7aa140476bab1c24f99962eb27abc55607ea2e64aa570e") )(16463, uint256S("0x668e4cd91ac813d90df99cca9a145dbeb28d181ebe30863eabc46ba0a93bec0c") )(17016, uint256S("0x963902dfd249fe2678eedec3a854a8dbfd82730eea745569bc5223baa55adaa4") )
(17151, uint256S("0x5f2e64a28e610c88b24e2f312e353936056739cb0af95b282f1763645304cad8") )(17154, uint256S("0x9457faf97f04da9037b2bac78590338613a5e89706ba9a7a099a7ff1ebe23f6a") )(17378, uint256S("0x7763a8a1abc771acaca07a5d0c657338a9dce8f82b83d2a473d274a6c14f561c") )
(17435, uint256S("0x7e624d59d53e28204846bf1781e59379562029e481cb1427618d6715d8c0e411") )(17502, uint256S("0xbecfad29d16f667c9815957c3ec3f86af0958d699ef251de19f59fc96ca721e0") )(17556, uint256S("0xc9e812d39f46275be4abaae2e073f505623cefd896ff1e9bf6576c86ef19b8b4") )
(17564, uint256S("0x34078b652ac35383f3374c2d98612da0564392692cf3e2b807eafd82ca9132f1") )(17567, uint256S("0x4da5ffa73a2803de5f925f295a7786a25e280eaca036afe0265ce271b581df6d") )(17585, uint256S("0xb35f277e668e431568eb8ad649028b510350bf63d52a8a401b0ff3e07d9f81fb") )
(17671, uint256S("0xa30d773b3cb9a6b7ac3ea5f89d4bc66a24a9e21376f7ac3582800a50f4971585") )(17741, uint256S("0x3ae9dd14001e46972627ac36f0e78f00a51a432fafa96e1e463f6d83a4923f1a") )(17816, uint256S("0x7943cef5403d7ad43150a174dc271abefdd4ccbc5bde4d9964fd714e2808e814") )
(17994, uint256S("0x812acc75f4e8a4d74f047c214620e184818aa52c7722260c6d1575c9fe775094") )(18058, uint256S("0xe86338cf380995ff7afd83826fd13c5b39bd3d8a378fc29a695438b66a6b951a") )(18170, uint256S("0xaa1ed4d0abf272f3df7e8bc6e8ce9df8810c5084700aca736a24b1551eefe567") )
(18212, uint256S("0xb214dec1536afc8201bf609cd6e0c6ed9d8ce6bc4efeda31d73f0c3e2bbeac83") )(18347, uint256S("0xb9680cb89e42f767d02322f359e158dd70c66ca155dd413fa8e66163b7816e8c") )(18448, uint256S("0xeaf041bf669c65524cd3fa75123b1cd1c823112e4ec0df46e5d12cd1897f064f") )
(18480, uint256S("0x328dd54762888360e8a717039103eaebbba87947abf1ac5f1ea471ee91d19f31") )(18484, uint256S("0xe47cda0006660796767b2285b1b9c181a5c5e75e0a4b1e6fe31b01520f346faa") )(18597, uint256S("0xc25fa9955d7ddab9496cac7cae9284838ac6fd15f8fb5a1126fcef91485e2938") )
(18748, uint256S("0x1008be4f5b5190e6d27365e014ac4ab028b01e2d43c9b864316f78dc1785e5d0") )(18764, uint256S("0x7edf9fc213c164241eaa8c1d656ec82d5e3d9db87a6eb407f6c0207047909c51") )(18905, uint256S("0x63d0924b0670888fc90f6fa3d6a2b80ac78c6347126110e1afec4418465ad692") )
(18957, uint256S("0x50f4be1c52e3d4cacaa77dcd4aa5321e164c7ef26a8a0a2498a56a1e33745313") )(19006, uint256S("0xe36d3f5c25e8c768af3a4e73cccba8f59302c7723e8e978117a7046c3f903b4e") )(19054, uint256S("0xa6a25258632b7c666205ec5f885792f37e69920c55d03d12af249dd506abada1") )
(19098, uint256S("0x43d024d6b2f0ebe8103ae8b7d66288e8b88e753b47c3293b839d035f89bd49db") )(19251, uint256S("0x68c1ef335ab3a1fd04b9a68a2621aaf26122879114b130ccec80c72e724b4002") )(19321, uint256S("0xe11889517359778c40aacab564f4175808275508df0fc3233bdfcda903f0a3cc") )
(19428, uint256S("0xb7fd10d01dd726044d1b0fe70a7c8ed5a40e5bf89db8bbabbf2a65e2ecc14a15") )(19451, uint256S("0x107284ea8627af55abaa32f66417348c6529814e627b27782dc47c548829bc44") )(19514, uint256S("0xd7c6415fd08221799497f58cf11d42e56786bbbb4a3e53c74e391cb7325dab61") )
(19615, uint256S("0xc05c34f80ba5607333ae5cb30d78dda058ae66f4e35cb78815fd52962a07cd43") )(19749, uint256S("0x6be255bf18c8ecec0a949d9b99b7eea916b9d9501eb04ca58d0f35c24ecd934c") )(19771, uint256S("0xcbbc895a9ae777e737f3173a6fce4ce34d92a4c4bb1732aa29988b7785faaed6") )
(19837, uint256S("0x7a039d5439e2308076413564dcdd46efc3f5f8256bf04706633c2817e701635c") )(19872, uint256S("0x405e88e5a9e6ce32f11f7d8b7d458823e3433228728d6b9931645575e9e08401") )(19883, uint256S("0x279fcbe20d13e4cd062da09da3dff8a173308a63d59e3181ec3d3538ecbdfc2c") )
(19930, uint256S("0x0c5c2a8200b98177563aa3d828c80a2c3ae903014ca914d1345f33ac562259ac") )(20066, uint256S("0x91a01e7f4c7cd687bf3fae2f89a0933140d0e7aa3156c98ddcaeb78bdc566b8f") )(20155, uint256S("0x3d580fb03cf77b0992b5cc390151d4abeee45e3f31008af3e7666f9c4a3f6107") )
(20343, uint256S("0x6c863b50993a1955d819c8d0669ffbfaf9134fd7c07c395146215651bd27e309") )(20380, uint256S("0xa6b8e43fa6765e580f17cf49cde388fe2f8843e20d17fc3a851f90aa968efc64") )(20424, uint256S("0x3e3d4884ba382f17ef8a0d944f0b2683021191fd627637344ea9f74676a70421") )
(20490, uint256S("0x4cf8178b1f64323ae62149472c3a50960360a0179b9efaf5f2f85d471ab26f85") )(20528, uint256S("0x29397bb133ec34934f9c0861927770d4052b0dcf13370a8dd1ab8481d563ab6d") )(20599, uint256S("0xe4f29299b1907c1f10e8c8b418be70c9e5f3a24eed1b72458123e77e230f0d5f") )
(20711, uint256S("0x6fb85be542fedabdb8197036250055bd472489eec0678fe1a0abb87c8bc152a0") )(20721, uint256S("0xd16f7205c4b10634799a98abb5c5a6a970cc37a06b5ec2f3ee7b42061a0ffbb9") )(20724, uint256S("0x6dde8c27720d41b5a3fa2820b9b4a0382041f5a8652324c6db85c5733e95f74a") )
(20731, uint256S("0x0627ef6d835d97dfebcf6c188acf2c0f6652d0eaf4d75769ad2c9c4c93575876") )(20762, uint256S("0xf1c37e997f9fff56d0bf9c51736a930afcce43dbbc5148efefaf03a0c291ecd9") )(20827, uint256S("0x71294b395da3d3556f712076c278d4170b18ab80b3c43f89185f73b394aa6776") )
(20839, uint256S("0xfbdd8ec1cc36983fbc46346225211246a50ccff81afffadf82e3963b2dccfe31") )(20938, uint256S("0x286ad0101097f3aef5b667c47119d4607287b89ef67329b1abb881bc54612faf") )(21018, uint256S("0xb7e8fb7a2c9b52618b7dc60d5600d6db6aaa6cd9fde8d6e2257177f91a3a372d") )
(21045, uint256S("0x2ba8bc382157ffd8c9a6301a512d20bbcfbb28da1b3889ca15e19ce33b96e0b2") )(21132, uint256S("0x503aebfa2f0987ee1b1005cfe649416b53e8a6a20febeeb1156f3eef45ba07c5") )(21191, uint256S("0x4cffce0d5b3acaafcf282dc344cd37e5caad83c7b24e3b74f12277152964b3b2") )
(21259, uint256S("0xaf254b9088b9ffb3bb1e557e7fed32a1c66d7e306129dd456cda40d01fb04ae2") )(21386, uint256S("0x2e07289236f1bf035425268c5ebd364b9121d823ff75ff451204fd238a3c3e17") )(21588, uint256S("0x513dd7e5e3f84897708dbeaaca205b4dc3f048a17c80a0fd6dcda8b443fe962e") )
(21737, uint256S("0x36b4fa4ce73911f39733af9071716d4eec74a28dec12caf2168dc2a72305ea2d") )(21826, uint256S("0xa3a6aa1c2b6c462df0cac4e410df9edffec5bb855fa9c7132dfb984cd8685efb") )(21879, uint256S("0x6be78c5ee685452ca773555e2c6957aed89b9ed515572a8f9efbb528e2313a79") )
(21971, uint256S("0xe8161fe0c2745a754f94de7e7931bbbadc7f58d7ac4cc1bae42580be53aebe5d") )(22106, uint256S("0x682ea427c438d67f79b54f581c9faa5fdbb5c5c59c422727ee94c8181188059c") )(22157, uint256S("0x38db37b75737f5262e6bc2fd3de57ee3dddd5b9ad67ae7e60aa8354825f189cd") )
(22231, uint256S("0x17bd73fb6a3bea14b9fda06a921d26d1fbb46b417c86f05872ef84ec316f4544") )(22243, uint256S("0x9f2e9aef4c41de6c91ad5a5b7f6f5b21ffe0b64bf7ac715908c3d1701ae76077") )(22322, uint256S("0xbd859e7ab87d0be9cd75e0688d31fc002724ee796fecce7f14695b80fb2fba2a") )
(22323, uint256S("0x5d1edcc13df6267b6b9bcac70dfba6b1e20e8e59f66bde3c21a7856f3829cd44") )(22382, uint256S("0xd30490f07caf566350becfd1e8be6d7d756b44199aa4b7b8e6d2737f61908468") )(22476, uint256S("0x3507a9d566612b24fc51dac299c81f29d45dd0ea1d64d515899d93d9514827d5") )
(22539, uint256S("0x5e6ae55b8209914000e34d216f8dbde81d7b3a8f3f9e9f2ca4bddbd16846b096") )(22653, uint256S("0xed6fb7a36ba953eee952e633f84455d182f46e3f355abe09033ecbb30c2c7cbe") )(22678, uint256S("0xa062e5026cc18d3c6f836134408df9bde37c0e2dfd3e136f96a89fef717123e0") )
(22914, uint256S("0x2f0aecee81129a50d620ad46a06e721016371bc0e838c01a1d00c12b431a176a") )(22997, uint256S("0x53ee2fdbc8a90e5cb32658c53278c9d9343e69e890b20bc199500bbcc2ab6a72") )(23093, uint256S("0xbed30f896e455801dd80c03d2bb830a4f598d1ea61ad60ae623cd27ccf2bcc08") )
(23201, uint256S("0x9a7c9103d21a46fd41c6d7d1bde8bf36f1996203304f568da8a192041cf75548") )(23461, uint256S("0xca5875a198cbba2c0f4bab1a3689bba05a1158065ff4e48721afcff6e7eeeaa2") )(23515, uint256S("0x0df2e9491448d52d7e8b4de40fb99aa1be4cc6e5519f16c54a7274db2910fc36") )
(23668, uint256S("0x4fdcc9635a1b2adfd433fda31d89766ec11e03bf4962a749feb66bcf8a9c0dca") )(23731, uint256S("0xd8965b048ebd56f4e4f5cfb9d3cd405d44f1955c50815b402cc800aca0983f8b") )(23737, uint256S("0xb5128a31d59a3da23052f9bb3be3749d40a5154852196c810154b1287c22489b") )
(23877, uint256S("0xd9be51e86d7e0a1e64e7e3a87acc1d83c8bd33381a2cadfb23eab8313b394eff") )(23909, uint256S("0x375c694f1c2cab372ea63af140fca5a67d1504517c67c8bef8cb4cc886c895e2") )(24053, uint256S("0x316d8dc7cc5e761cae69e8b0261e00cb7f30f877a9a4d540ac1dfa040c9bf9b1") )
(24084, uint256S("0x632ccf9bc1a2a05ef573696325a85a467fc8d5e44b7f3ba37a99773fd1e304aa") )(24210, uint256S("0x4f00fbf0a8e2eea33a37f58abfc5e456dbcf6c35ffb2d44a45168ba4ca64b81a") )(24336, uint256S("0xdca0763c55c30f966981392541e3d46895fed7ee5c7430145e022828b647a91e") )
(24453, uint256S("0x22eb8b88c6af0655b3d80e914d6d1326097e966eb103f7336bdcdfd7a264fed7") )(24550, uint256S("0xb3809c599b82744f51c210fd9e5eb9a1a75959d8c41ddd880e02d515e1a2073a") )(24601, uint256S("0xa1f7f3a473d77805c87610a36b1283d72cb3d68c6f40146a6404c09b18be5aeb") )
(24658, uint256S("0x5f595c8182026cdc364cdbcd87fc3362a289192b0cd7e2a5d0e493eaf7bf8609") )(24725, uint256S("0x9a9a49f56deb450b545925b5f9973f0c4db697ef788e0d078205faa5fdf18075") )(24752, uint256S("0xeb1880c3de302f01ec250461a6c0aae94fec110e3a465079a8dd12564b693297") )
(24815, uint256S("0xcf4aae6c89fd73c52899d92674856f61dd411970fedad0a1cd855bac5f01d965") )(24905, uint256S("0x1abbc0de9f29671f78e1b9686ccca6b8ed04c8030b5ffd76a1188c392ede159c") )(24949, uint256S("0x458e68b0a737709fd258e71a9fa0bc51fb6d19e9db145d975b10441182f48ac9") )
(25132, uint256S("0x51f6143c5c4c91bcd1cc81427b0be00e32bb9211d9e57f0c87c7376795fbd004") )(25213, uint256S("0x2fc3c7b4c77f45aa0f3b45c7a591b573bae0eeb2866ee29a6a3251cc99b88532") )(25218, uint256S("0x87336a505d5831b72affa29f303e8f540e67d7edd56525de37145e82ee5fe2b3") )
(25280, uint256S("0x40955c3494a9e7015888c15690013a13bbd3a3bad1b5b12b918540161c7d117c") )(25331, uint256S("0xc89085ebc86ae4ad4e5f82025b4aee80d727e30de80a816fcc4d889592e04f3b") )(25334, uint256S("0x4c7d46ba017410bd99e4a56f2048d911b3367443ebf9b69941509958db89d0c8") )
(25393, uint256S("0xb56c62f90110190c5e5e1636d340455babc03c6679bd481a0ec37f78cc3f8ec7") )(25456, uint256S("0xa38ac5b20e875223a56cb50b14706b3260539d20aa8f1d626141c9b585a3df82") )(25542, uint256S("0xc5171db1b1fff94b3a850e0d29723dbb0ea383568a16f1500d88b1566fcea2af") )
(25608, uint256S("0x4d469dd2bc82e97a238fe3b225de1ea24428e81214da47be42ddf6fd78006afb") )(25725, uint256S("0xc55c15e472aaeef3d50e612ef155a28be5c22ae1ed5a0f79b9dc940716b354f4") )(25805, uint256S("0xe544e2e0c3c503e125b5662573efa33b9a3728a0bf1a990e60caf929ba64bdcb") )
(26064, uint256S("0xd5af31b671ff8ebca13fc6ef102c243cc096032afec0d5affdac0407ed1a681e") )(26146, uint256S("0xb66f628de25ab3363ecf0276e88cb623d13d8a4df7ccaf82370a6fbe3e8d57f2") )(26206, uint256S("0x78184c9458d5b060d1afbf18913762d67c320e639dfb4cfdfffad0f95fbe228d") )
(26212, uint256S("0xaf7e3ab0f037981328ad9d514ff37786de932791a6adf6a34fc37afb6f389790") )(26280, uint256S("0x20c12859c5f104594c8c24fb65d239b92d7384e16036bae1011bfb6df9b5e2f5") )(26356, uint256S("0xa70ba20f76fef329353c1b4be823bb2e3a46b08290a7895d49b99678ac9e5022") )
(26600, uint256S("0x87aa314f0439c1a72da8e2f7c8fb67619a0685272057a8a5952230f20059cfc7") )(26922, uint256S("0x929e5b521d49d9c1386116564dc0cfe3e1884b62ade4ed4abc3c34c1f527f13f") )(26993, uint256S("0x40f33f5ff8924fa2ff80e0b3708cdf1290ababa31cb255f6a6bdaafd1b2db810") )
(27054, uint256S("0x5cc5a4ef6ea66b74c20715703e1af28eccd3e809ff9cd0cc542121e39ee073f3") )(27132, uint256S("0xb94fb87c8bfb4ac5538dc272f34f34f67d586b09448c321e4cf5f8d97d33a633") )(27177, uint256S("0xb71d649ca4daa86f7ee27396b70de0eaf7ee6e15793c312757a3c0faaca08512") )
(27289, uint256S("0x00b66f75f019ea30ba24aa1d9e06ad416df6f600fbf51375202e1bea9e995d47") )(27305, uint256S("0x9071b05f8ab63e0f967034961aed735a6b7df058db499415ce384f381de9d774") )(27412, uint256S("0x31065e5abb30a280f26e38e5c9e0c16de8f4a7fb41146c4629685811ec696d19") )
(27456, uint256S("0xad12f331b62f74e05c4affdd6b84b89881aac6fb482f1e3d0472b80bbea82d8e") )(27483, uint256S("0xba493912754c4aa6fb818ff3609c3d0eccee2e0478bd712751bade79d1b1b1d6") )(27565, uint256S("0xaa9b20206a432fc6c41646676d6ee7be6a3af5e5577fa99aa0e670a168733426") )
(27577, uint256S("0xd2de08560bbe9b42a1e0bd5c300c09083b55ba56669e7a3886401ab8c3708bf4") )(27729, uint256S("0x7f0ad868925051ef001abea2a30a9ae89b78a351e0dfff89e20a5c8847d3050f") )(27761, uint256S("0xf1750ff7786eb2f217f73d553d8d3a280fa044b275412c37c7890aa2dafaeca5") )
(27825, uint256S("0xc3212c8e10968eb90a32a5a50295ebc8108bb0a784a2984b5eb0cfaa9ced08eb") )(27893, uint256S("0xdc107de9390be8862815200f81edee8aed16086c2e7c92e0d9a1c6a43d2220db") )(27963, uint256S("0x1436ecaecdfc697e33308509a1776850f1cb44201bfedef03b4e66e4e9dfd394") )
(27971, uint256S("0x5b0b551c195423ff2d5b913a79784bb926422b45e527e6a0126770446dfd0e5e") )(27974, uint256S("0x6a0c48bea6cea511dd83962b1791b61205f5000af94b5daef1d703c0ec033258") )(28082, uint256S("0xe1261d48baa05b3e03ada7524e4336362e362590d1919e5ec59ca45c6571090c") )
(28110, uint256S("0x2b7048833ebb170951109062312a4aa68c5cc0f438f9b70ca5f48c632b19fa6a") )(28312, uint256S("0xa187a6e221c3118470ddaf0bc94babe6b67adaacbc586ca30011d4e025602f4e") )(28373, uint256S("0xa686888f2746cca9d3cd5308703e40dfa7f5cf7bb26092bcb79891f16cbb4345") )
(28432, uint256S("0xa1fcfcdacc06313dc8318db1cb65d845e99107aca46a09920b3e9f45eb34354b") )(28456, uint256S("0xf7d6152715fe6d26e2622b75e203df57568098c1427a69032bcb1c98d3adf932") )(28468, uint256S("0xb8b92a4e8f0f290be04742e6c8310afe4086d8a0d2fab2246b448e63626d144a") )
(28485, uint256S("0x84c039d29a2a6e774a869cbbbdacfc22e0e79a09cb658c21359b3b63bb8caca5") )(28617, uint256S("0xdd9cf162883cf1d4edbc2bc3679bf3c5794cd00728af198fe4ff67f74a199c22") )(28625, uint256S("0x0da9bf42aa9f445f78aa1c097dc3692541340a4e365946ef7ade198d05dd8916") )
(28693, uint256S("0x5e25ce786e0e2b60323bbf0f5eed122719ae81edb729b8e1be07ed4cdc3395f5") )(28932, uint256S("0xb0b04ab9bfd74f528187903302cc800a42aff8e346cd2cb1f7cf1da97bc23567") )(29105, uint256S("0x2f22029f286882b8a5d28e1b19fec1faa57240196cc84a3b86e65e5b7f090a84") )
(29488, uint256S("0x6161bf14195b164c22ef841bae61a451704c1a024cce2272a1ddf66918f7b97b") )(29560, uint256S("0x90ce5426087e6b020758f918407aaf22c6cae2afe8744857a41c226d718f82d7") )(29587, uint256S("0x8dbb335b82be0f15af517853c700a78cb7bafeb8a3035a1658e01b259233f3c9") )
(29616, uint256S("0xa3efd9320fd1f39c5cf2f6d8550e80f0feb5dc0433a1f6635d2d8a04622886b5") )(29636, uint256S("0x1249c81be9d29e52b9b4278d46003831eddb7031afe0fbb897728a30b2b62717") )(29929, uint256S("0x5716cd30b334a8e0b2074b3c7e50849022075559d7b191f31ee9053b11d9d960") )
(30005, uint256S("0x9d505447235e4cff20467ff1a1a76a84c4b8a8167529c726f00c84ddc4140288") )(30065, uint256S("0xc118e283138996ae9517e9f0e785a74b49c52daa2dea992b992bade8fe29f4bb") )(30098, uint256S("0xddbc8671672027ff17e3fc411556fc820e5807d0663600786c05cd6d8542407f") )
(30461, uint256S("0x47774e59b1a7d4c784f0a979fbb25ad6fb2fea69078ead47e8d07a007905dc82") )(30466, uint256S("0xe6cf0b901ab5364c6381b1a7e47b48b8bd17b8c50ae9e87299c21f705fa15b3b") )(30587, uint256S("0x03f064776a2dd4f7f0c2182caee323b0ff1af19941c0f05f491a34f152882e4c") )
(30611, uint256S("0xd4bb55f28377ab7bfe83386ccb6b9e00be1dd27ccbb2f78232eddf22b34056c4") )(30673, uint256S("0xc701220e9a1535b7160f6211ea19010a0c07718aa47021edda5ded73e3ebb414") )(30958, uint256S("0x5f5beaa5df3cead5876e2e90cf011c20f47ac66a98ad0d7e4c1ea349a5d4a18f") )
(31063, uint256S("0x927cf69c2b25471a6a445ee00ac99e0f6d22f39009120794afc6832339728c32") )(31167, uint256S("0xe29f7940b87fefe2e834378559f04bdbdb5438e3a746c817663c27a87b16dba7") )(31182, uint256S("0xa649ecf16a944cdd69e5433dc95acfd991b3c2904a67903ce730987c0e89b7ce") )
(31186, uint256S("0x1c1571a6b33e275ffe6bf0947b5c80c6da8a8a9435213b95e050a291caf7e84d") )(31221, uint256S("0xc3bd8ef5768dfe7fcd17e4a88ad7761c5874c2e4e5201ee677efad636d2920c7") )(31275, uint256S("0x69f208bd163e38fbd55a4e9013676de9b94c35f0e126d68f1c2199199853daa6") )
(31294, uint256S("0x94835fa5b5038e566c1ed6c1d7ad46afc4b5d88d3aa2ad522b169f87c4de0091") )(31457, uint256S("0x92446df06cee9ee500f4310e1aacd7d3f34403e7ca2e92a5421ca65a3d6447c2") )(31487, uint256S("0x5e10b7fb71dffb32d96d10e97bf93a3536289382ddb155de07775809b3117138") )
(31492, uint256S("0x63c7765804d60e6811dec1e5e3956805cfd0a144a64cd9cf7acd686568dcd4a6") )(31577, uint256S("0x8c8e515ceb9674ee8fe261cb38334f060fe3d6e04a4f100b78c2639823bf23f7") )(31604, uint256S("0xd6c4ead7ba952fd554ff11d5535616d0b28cd3143944837107f10c91394b13d0") )
(31682, uint256S("0x42e8c3c6fd0bfb8e7544ec05efe0b40121ab22043110c473dcd63c15e4a0bb82") )(31804, uint256S("0xf931ec6737c72f1a17899e250c2c3062f875a1833eb2f5605b2ed3814b44e38d") )(31815, uint256S("0xcf7eb6c43edd84e7f9569e009049e057c309b4d87ac73f2b9c07b7ddccecb8e5") )
(31875, uint256S("0x10bd6e677945f31e2f6b0d170f43ac753ba43bd047d91c4a588459b1d8b45958") )(31950, uint256S("0xbdf440fb94c3dbab0bd3507b3e53440d71a8b016eb129af25bd5a12dde173e2f") )(32042, uint256S("0xf1a3c5511b9b78f44b27bbf985479e7754ead03ff58ec57a1f121b67aa6ed4f6") )
(32060, uint256S("0x093b77c1fdc5fbb9a8dac0503d1832ca3fbd4865f4d57076026c8b553accaec3") )(32129, uint256S("0xa665ef74d09b75811de114a00098bdabf1d7eee7bd537e05f910cf7e35447f47") )(32169, uint256S("0x1e5d4b1e890a7aa357077f8baa240d26b625eff1ffdf62e51c2f3001c7bd842d") )
(32393, uint256S("0xd96a32c7b2a0b7a29219f7cf92cfa4931ea19755f6b02ae0a8a42c443d6a190a") )(32471, uint256S("0x73e538549339df89626d8a873a9a34e3e411820fa391dbf2220d0a54ba8009bb") )(32596, uint256S("0x4e9d4e6da3d7f093ec3652407b9eaba6f0a2696801f156cd02dd04e27a78ea2e") )
(32739, uint256S("0xe138245a44470b23d16f0a63c8926fb1860ca9fc801b3c8116ec97df37764676") )(32772, uint256S("0x99564a8fecf51517910ca4a31e1e2d4d93d480605619ebbe57cbf0e37286ba0a") )(32829, uint256S("0xaff3086017da12a6f3147dc7ee4583dc9b2dabf1aae8c3f555769af19b5ee64f") )
(32899, uint256S("0x1084e11daa4f7275f1ef418cad6939a5b47789d5aaff6aae1d9a57fb50ab07fa") )(33068, uint256S("0x99092c574be89d43ce28f365de2ac53d005b41dca29cdab0aa881128760989e1") )(33129, uint256S("0x96d084ef6b431115bfa88fb1068760a30cef1cdcb71e754a40bb8f4f6bb50a29") )
(33143, uint256S("0x853d160155945c307adf85df23fb9b938833e93fdbebf4100eeee83830548845") )(33437, uint256S("0xe7a157b616675294a8409ee4a8c70c8927e54fc760c1a57bab96609dad8c8f57") )(33598, uint256S("0x6dd6b7d26c09ed2e663e3765ab46c6a5cc74877028c95744c62114f981a39e2c") )
(33695, uint256S("0xfa9e27af354f8bdde2c4c1fb9c9ff25e7fdb3e9a2f8fa173c86e0671b183ea96") )(33732, uint256S("0x6fc172a02e08d0dce9a2b80365173453fc01aab3b6e614c0f7702cb4e19376f0") )(33780, uint256S("0x193b57f346317ed054499d31470c254efe800bbb86869e93756ccbb7e7343f97") )
(33797, uint256S("0x4e8e261d20972b94577a092fbc707ffe54a08aecbac39d5e4aa8de36102a7132") )(33934, uint256S("0xcb99e13bf1279076125770824bcfbb2a7305c1cd291334a268226c974e836d0b") )(34056, uint256S("0xedbd89afc1ca1d3ee2809ffb3eec061e6c78d6c1a7d352c4cd8f28472112e8cd") )
(34104, uint256S("0xa870cf0474c9afa533b064182b489e10ee184ea5cbc85d66c6fb9ac670db2d4a") )(34302, uint256S("0x41c66925f4cef271074db9eebe6dedef836dc254fdf6025e66a3c334d2a88863") )(34449, uint256S("0x74fa194b92512177d3958159b92a1dcbf5df9fee3dfeabbcbf9f1858cf8f45cd") )
(34539, uint256S("0xc7ee3ab94bd244cd9a75503e44901186a35bab68fa35fdf667926f773d4dfffd") )(34686, uint256S("0xea6dbcf2ebd84d3bbcc884135b01dc338f9f8659c13e01bf40120b03a01f9571") )(34727, uint256S("0xc5393fdf551a5b8d88ce660c765bd476f8142d117734bd03c4fd5c5894eeab62") )
(34802, uint256S("0x7caf0ba85352f0368651659a6f596dafaceae15661fbdcc10ac1be73e7fd2f8b") )(34858, uint256S("0x5d99ae74c258b92b4c986410b8d9ab144e37d704044a41fa52f6ac99ffe90488") )(35020, uint256S("0x28b001a232b9c2ab7dab8472f064a9c576fab438bb537f6b7ac6f91343820aee") )
(35035, uint256S("0x44aedd35da8ef34c6a0d59fcb11186483cfc3d3cb9629236a9077ecbc2a9ac8f") )(35112, uint256S("0x62b0c2ddac3d9d6d081f0df1750ddeb95484fa2366d6e77d93899d46a5e80468") )(35130, uint256S("0x83b82c17a651971fa72bb1a584e983a81ede0a984f772f9ccc1bfae4842473dc") )
(35162, uint256S("0x93b6dd4811086dd8b03f5bf63ed672a2d1940be0c755fbc37ec6f1539e7d1b09") )(35194, uint256S("0xf733434befb4fbb1a8e8761f21588edf2ba8780645d116575cc841aac1bbe0ac") )(35256, uint256S("0xc53033b881db9d108c3fc4f8684b167e06e30e59b906da9fcdd491bca65fef63") )
(35451, uint256S("0x8156b765270864dafcb820a5c7d93f2b1bfc11f5de5baeba46edb88bfe23a79f") )(35651, uint256S("0x227ea05adf630801d0bb31961439a81850fb48b99ccc4dad99641b738ef0dcfd") )(35679, uint256S("0xda517c08d66ff033965509fbde633b828ae908fac89b8999673ae77a6eab5ce4") )
(35963, uint256S("0xbff187ba8ab80400b6bff2a028872ebb795c5dc32471ddb8690d31aeee2530b8") )(35980, uint256S("0xa3ced8b7cc6ef57b8527be0a2ce3153e13c38fb18843e471e8a04b3472cf6945") )(36138, uint256S("0xebee95e9259a742c75bba5cb077565a3000ac3d08fa58a26647a40196a04fa24") )
(36201, uint256S("0xea7ab801af91e9a9cf798d034dfff4a6c37b087e4188a9731f3e7c6191cddc97") )(36368, uint256S("0xd9edd0b6a73bad7a16c84e625c738e6a841ae17719e021fa638d07a44383ae53") )(36551, uint256S("0xf448e3d4920eb7082c37bcfcc9ac2039ad7ac231495b70366d288a98e32b0f8a") )
(36586, uint256S("0x69595224a38a3284e51a5f71234843526ebfd492a056c83eb9f7d48d15adb33c") )(36690, uint256S("0xad3646c94901aa243fa0287e8b49c77d13328d8d9aa83ce65de2cb6125a22336") )(36700, uint256S("0xd71a8f8b4737b1e5e471986b93fb0f50dc93a6da7e385c2f043212fe585381ed") )
(36720, uint256S("0x6672508853aa74783fba0ee699b7b9b19e90f6f93a5927c3c8162371b24a03ad") )(36813, uint256S("0x495c934e9fa5b0d0bef4974358b4f5c11c273efc8d61f4d3c46a9494bfe5d9d1") )(37004, uint256S("0xeb59038227f3172702c16e4fc5f7ccd8bdf96e2b7d7c34daa53cbbbfa55baaab") )
(37027, uint256S("0x608931721d0398c113572d35a35158965d3e33fd9844431d38f4905950f9066d") )(37064, uint256S("0x80a4bb8b28d0e53da77864ae0c77a1045faade8f04c68e413815eb78994ef06c") )(37276, uint256S("0x8f340fe205a0d9279f378fbdc71d9ae4a56dc8a898de3546f5a4e5ba66364e9c") )
(37277, uint256S("0x3dbebde40a1c352329463db3794e0f0f70757e34deba56148d3e9ca27bce634f") )(37292, uint256S("0x038c436c0cddbbeadcd4166f49d2d77c185b82398196d101a3a26ab7c9f69667") )(37303, uint256S("0xe0962a278a80619077be910283e268e3dc9a8e4315800b20d48d7474b7f98d30") )
(37605, uint256S("0x45947a15258de7fb0165add56748ebeaa1b9fb6e388b4c178f2aef7589a1855a") )(37607, uint256S("0xcd0dafdadb7253562209e9282cfe076ce9bed094122e503b30d5420f63a1fd96") )(37652, uint256S("0x15548384516b6664023dbfcfa0cf5ab132558823c0119f2308fe08584d9f8326") )
(37737, uint256S("0xbdb4e2aea9590da9c8563528d9c0b9ff04dae52314f1e37b563ac56ff03b4505") )(52792, uint256S("0x9a3739a9f41f12e81e3d3d977fec4e51321c76b6afbc2e774428aed307e86ae2") )	(66463, uint256S("0x164566491da6f5c989b6986949f74e1abfa3fa51a0f461db13682fe7aacf731c") )
(37746, uint256S("0xd197764cb4827225438d101c9a2065eebacf30038e3c5519df81fd8ffe7f24a4") )(52821, uint256S("0xeae86ef4ba6a86d3a78954232695f1bba8f1d0b7f78fca200fa0dae65d46ad4e") )	(66501, uint256S("0x5104194fc31a9764a0cc3378256de26d5f0040c39ed61af4d9076b455b9f7c63") )
(37847, uint256S("0xfb72bc633c2780b69633260cc6565e4c9f5a7decec52ff55aa92ccf755cc6a85") )(52901, uint256S("0xb7ac6a94ceaa59cb58aa77d784cae58b66d1e396eed2b9934c0d1536c341fcea") )	(66533, uint256S("0xa758b1f069066e93b10920553002499b1d56ea29c4854d6201dcda3ab7f6a743") )
(37871, uint256S("0x323dac7a1910dc0a04b587b8d86bedea966f09e7f3794a497d67f13f0f3962da") )(52939, uint256S("0xca5819d609e80f24a1975bed84321b653fd6a5bfe2e9beb457647c24a187be3b") )	(66536, uint256S("0x4be41ce812a1e467af7f06242b24543cd8143b8296d63412e8291280966d4b7b") )
(37950, uint256S("0x9507cce94bbe0e81b89d4ac4fdd43eecfffc9f545e8c40849b2bf581a7f8d839") )(52985, uint256S("0xc2ad2ea297009b35b1fbda7ec8938b9e5430fc1da56ddfa978ec207d85617114") )	(66583, uint256S("0x194716c9d9b14f8a0e9c9440e8b4a1d1b069d1b1b5ca50cc1b7525fc1b4c7330") )
(37966, uint256S("0xd5f830fd117f9bd415bbb1885a8ae4f628aa8e4564c5778aaa8fe3b56e896f43") )(53005, uint256S("0xa484cb9b39ad6760f7ddab59c2992d65cd6ab3294506de2d24acaed84286c8a7") )	(66590, uint256S("0x230a5fda6a48d982156fda1b1b8abec2861e7ac8978c88e283d70fb2edca37c6") )
(38155, uint256S("0x18e41e1ec714a10b69446670b3cd7f70b420ccd71119a1b8a6bf47c1ea9768b3") )(53024, uint256S("0x8a7044df6774839ed0d2ca8c7fed21ab9548e3e41daa7542bdbf7c2ee4cf5d76") )	(66630, uint256S("0xc89aa5cd94fee81fa4625701472da1af665c76a3cb41fa6111364929b69fba9c") )
(38224, uint256S("0x2ecb76de96331052b33c2a09c74aa9a324e0e0e7919f88a77aa896a5e979057d") )(53075, uint256S("0x0bb3a022f213e49c667689ad645f4f3fd36b28e82298d96e70f383325492f972") )	(66652, uint256S("0x4cbab460ac03933899008028b81097455dd5b1e2ca83c1aabb9ce4209143441b") )
(38232, uint256S("0xf2140bac477f371d6d78aac0487009061cd07d53297c672e4e4aacd3101c8eee") )(53182, uint256S("0x74e2fb25f1639d42ef6e92c6bf20973aeb4f05044d3586408173113bbea41b3a") )	(66665, uint256S("0x0266eb0a2316620ec325741ba348487c4fadd917fdcfd77a2d4edef733371683") )
(38256, uint256S("0x83da1577ba2954c5de5e426966d45310c6fd7c2e5497a856c5587e287a62b571") )(53246, uint256S("0xa218e521174f57c13d5c6a321cd16c9e69e23a7768b140def6817490cfe0d2ef") )	(66680, uint256S("0xa07c730c74813e40d82f0836cdc50e265186c8fd8976846fde351107d7782ddc") )
(38336, uint256S("0x5c9623e54b49c3051e1d842bc3e8afa911c9447c1fe8e9334c0dc15a6d2c6e96") )(53253, uint256S("0x7ea24f33f4d544cab6fdd64457e5bbf18243426877a9fdf0cb67800bfb418b68") )	(66768, uint256S("0xa4f03e0d776dcae4828ef5102f5cc9f6b59e467048c147d77b33b6234147c54a") )
(38387, uint256S("0x2ef161899748b5195d20a64e965b1c46a23d583b3609e757c1aa73d6417c82a9") )(53441, uint256S("0xab74a414995a148cae5abad87462041d179a12f11f501a1662a59024e04abd52") )	(66826, uint256S("0x983e1d85cebcf2741542688769f7af1a08ba3ac1d46657bdefef1bc33b9209a2") )
(38429, uint256S("0xb44cad7abf5feb7656f0509aa4e75cdfac83e0c17228b34f7ecd0fbf7d2ff3c2") )(53536, uint256S("0x4f7664bacab7de8a03827b5f171ae2e2b4f6703c0984327779513e65fd2d1efc") )	(66957, uint256S("0x835ca75793b3659f2411334b7beb0103fa29d114caed4bb3637ab36ba96227f5") )
(38675, uint256S("0x3d172b612cabbcdf1e279b9a83623d6c70b811719e9fee009900e5af9b188f19") )(53629, uint256S("0xd97bee81a4a97cff406938fdc18f956ddf06cc35f1a6c0c88d84856a7449b55f") )	(67055, uint256S("0xd1f243fe6317c36c2c456b2f98dd1a2e091bd388303332b5d9e429969d63184d") )
(39058, uint256S("0xc051eb132d5ca2c98a0eec2e4a333bc998e1c394bf7b2e90c3c17717f65c5e8e") )(53635, uint256S("0xb040261c0b8d5ed00ad542391b77e11e90bd02e15cdcb059e6eedb3aaa8dab1b") )	(67085, uint256S("0x7a22020ba3604ead9405ed4445dd592fa39c95826188788b21d2a804b1396692") )
(39147, uint256S("0xf412edff3c40c5a46db1f61dea22c1f982d29011e8162af5deb4363128407a69") )(53659, uint256S("0x2bc6fc48e5457fe2a4f27972c163bd06ba1c3ea48fc8681285dc8587bcdebd04") )	(67122, uint256S("0x1fee245ce4f0292e252ff3f6dac97b53bf660ddc9a43df67921a0c876339d310") )
(39182, uint256S("0x82c2b5df0a342e521db11d408ba736e1cdab748b364a656449687f4020a67ffa") )(53761, uint256S("0xfb4ef7239e7d440d2b27d14ed0b5154e8b1b49a002b4c60137ca2ae16c595aea") )	(67128, uint256S("0x36829939211d2e2f0f5c18033bb2b40497fb2ec60ceb7e48402849b91a55a430") )
(39228, uint256S("0x7d52c5a2af6cd0be839ddb9cbf5901b410cda283168cf6276c626da3d5b09b45") )(53769, uint256S("0xd640162122f5fba2b93babd771d83a7f0764a21e0acc6b313a793e2c6a659945") )	(67231, uint256S("0xd72877e6b493f0b768c9d3419dd49a94dc44f4a4dc02c01174d2f2dc0417cb28") )
(39275, uint256S("0x7c51459c6befe7ea01c851fa90b353ceebc5aed3deea45e680d82e26e69f3dd5") )(53886, uint256S("0x1a5eb280e0f4158cc70a2c7e95d2521868c393580e2ac0768b41365b224e0d8c") )	(67382, uint256S("0xcbea2706f86e9653535e05e077f593076f9266ebf405f56495d959ff9ea78679") )
(39284, uint256S("0xe3e92a15babf86ec0bb4d1b58d49f256bccb5a16f4bb8840bc289de74a551b3e") )(53902, uint256S("0xde62a856e74770c60bc6512a71acd959b59b99599eba9b691692ff882e3b7d84") )	(67421, uint256S("0x2e925d42f655c37e79383d9773dc72864f23b0385c115de30beef74b90b341b8") )
(39554, uint256S("0x65b01b19dec772bd7aeb4b76df71c2ef8f9da135006eae2390401d5bb4428865") )(53970, uint256S("0x3cae73cb6c732b46972808a7c64bd62cb35b447e2bcb124b1dff1ebf71a6db85") )	(67526, uint256S("0x1bf1ce97836dfc8528342e2922b9fbdb66ad2474d6e6fc527f32c02456fdfc29") )
(39568, uint256S("0x193c1984d4ffa1daae54e3b44e0addc9af1a7004a7709af0bde4afdfc356ac3a") )(53980, uint256S("0xe63f5cfa0a0a4282e40acc62a101a946be301f4e7d3b4774b1e03d5dbfa9da58") )	(67548, uint256S("0xbfd6a3b203f8406f5abe4303c34c1d1119f74cf62daa6cd9d1abad3a789419fe") )
(39669, uint256S("0xee05ec432b0b580d01b11aa1fb572782a7fbb766e649f2161b2035716f206eda") )(54082, uint256S("0x4c68629ddec1c442639be142b0982b4da95331f2c99c0a0e97e7477461bc396e") )	(67550, uint256S("0xa46f10de4086074bbebac67783a92f11fa2efecf373bb0737c389e01415075fa") )
(39836, uint256S("0x41efbcb857f44b6131433c42006d03bf509aac95ebd77f25bf3e717c19a0503e") )(54217, uint256S("0xe3b5455683cd6b659665a61f28a6eca79ef78d7067647c732b96d3f628268191") )	(67574, uint256S("0x67399dde54f6b7f958188c1871173cfeba0d521dbeb48a8373944b97247210a8") )
(40300, uint256S("0x38f14a6fba3525bddb9d60fe977506e5413b79b1481a9dd93c9fed70d152c606") )(54245, uint256S("0xb30cbcba826182d37fa4ae5587c0b6e76758a485ac94ed4863120c736248ab3d") )	(67639, uint256S("0xb35c30213bcf14efcc87fc4eb731dca4d43561e0c4bf42db7ecf3bfb1a1fa9d5") )
(40381, uint256S("0xa7e0e22764805c92be8c94c7fdd4305ce8339322907297851270adfb784cd1aa") )(54522, uint256S("0x5a1765b68659000e3aae2588df595288ef94898a4bf15ac3c5bb7c186a03c82a") )	(67655, uint256S("0xdab7c11ecddf71624282661947678c91a6c1d746f55e90231f5212e814f047f6") )
(40447, uint256S("0xfadaec54c1652da838f1ae6a103e1edecf17abdcba925df848464bfaa508161b") )(54587, uint256S("0xb8ee41393377144eabb68551c3fa347ffff7d996df49b896b1da0f53b2c89b07") )	(67701, uint256S("0x70d1148dd6f4effcd8f81a2713414a449dd12f04588f9a41c04a64b571d92b0e") )
(40503, uint256S("0x7f32306078817132054490044a62b9ef8e7048a34700ffcccf9a410409b35af7") )	(54612, uint256S("0x430b29d53ea177c515537babf34a499365de6a2cc1e7920988df9e3a9d421cbd") )	(67820, uint256S("0x567ad4189ed7209555c7b41a0063f9ca5fa9ba3453d8d3953fc33c794207d68a") )
(40518, uint256S("0x55087ce8884e372e78b87848fc57a10e7e4ec8b3198120653aaf8446f63aaabd") )	(54650, uint256S("0xce696462c5adb9f281845cb7362c6ca8066b5f5831470b878dda4fad8718c6bf") )	(67903, uint256S("0xaed719485467a951abc514baecb234073ec6fefc1635770d0ae68b8e963fd0da") )
(40634, uint256S("0xa2a8ef3fa950b96905f72899802b8954302e07de6702c1d293d25499b1f853d8") )	(54678, uint256S("0xeefc1813c07dc2db09bb642d8e7839bca058ec8194a5dd39ab1424e49b0f8247") )	(67965, uint256S("0xad7e5d810c88a20e86bae01785e22e308a276dff5d026663f77a2bc2943d5666") )
(40657, uint256S("0x05f12570f6692dba1b2b362283e6f94219971ba651f6f55286817681c70c86a6") )	(54712, uint256S("0x4c6174959e3be7986f85d7ed29c97841530c03c7d15c0a289b91797f28fa4c2f") )	(67968, uint256S("0xf7b1dfd40667e9068d61e2936837306979e57695a36cd0a467b9ea36c7a7f531") )
(40709, uint256S("0x51d7ca0e253c676ea333e3aeb8826f1885ea7a5ab64680e9fd567095703327fb") )	(54731, uint256S("0xf3ecd0665f869a0b2c12007413e757900d5f6f1ec4b80ca68039dd2d64031685") )	(68054, uint256S("0x4e351fe8a702eadb3f5dc8b8d83da07a98baaddc38bd05d3c55080497a351680") )
(40736, uint256S("0xc9e7e5e4cbdbd111a39d9032b00095b0ecfca2d64f7c3111ad825872761a7550") )	(54833, uint256S("0xa92136af3194440c308b72d1edd624ed272b67a9cf2bc9eae6f6ddb81f5d3e93") )	(68091, uint256S("0x2042774e86f142d7e3f0eff87be471ce89d38aa75b896430bbd8694e12242675") )
(40809, uint256S("0x0ae3e34fb871ddee2132ea3677422a779a8492b4adab570628a89364b28e3772") )	(54968, uint256S("0xd97009d9ba76afbe53fbb7ad9a76f60737e8675823d74ceca006df2b3c00c75b") )	(68143, uint256S("0x91805d5f3742d8cfe931750a5a620fd6e63639f9ebf30fef00dcab6d24fe235f") )
(40819, uint256S("0x9a840ff5957e50121295789586f1500174be2e34560f8eae04c3febab4fbd5a4") )	(54980, uint256S("0x9242e48d7205832f76ada6a1b4932cc58d44f9bb71e080603b1851a9cfa66b7a") )	(68288, uint256S("0xb6982fc60f127acecacc74556c69e38ce518feebecac53a802d3c652dd8e4626") )
(40984, uint256S("0x818517df796cf23091d4654c2f1c2fe11e8ece6772fc8fd41eb40b3f6bcbc179") )	(55012, uint256S("0x68864a70ed04d6d27f26ec050ec9bf80136fe525d394e18b49d421dd0849d33e") )	(68330, uint256S("0x4070fa58375e829fb4fff4f4bf82d6d23620465960acc0de92863b897a747ce4") )
(41028, uint256S("0x4ea2d3bb3b01212f7859b1b9dff8eab21fda484b79bfee145934b1d101c74a42") )	(55374, uint256S("0x0a7332a40bd3f1066855eb2f96073f0faaa772ebee3fe7424c67da8b8f4709c3") )	(68348, uint256S("0x0f1737aff3dcf4fb98c2270d720b7fb1c854d219222cee12d3b66572c9de7f89") )
(41055, uint256S("0xfff6cdda605b32a32b89f389a96bcf9e1e6cc5a869b07fe6150c163773620e68") )	(55396, uint256S("0x08fd21a9229663f43990ea172b6b6bc972f81c4e0dba96ea4a06a813c3a9bab1") )	(68489, uint256S("0xa387c815e655bab2712bcb45488b33114bac75638751d72ad99deddc4a61723e") )
(41118, uint256S("0x623bfdb6a265ab76b12fe5c4a6799f820ccd26ac624e72ed87a127de9eaf0fec") )	(55463, uint256S("0xe9338b05fec78db67d96634ed41293d8f8dff82b04a5fad50ad18c50cbba9fdb") )	(68609, uint256S("0xb46df6929075ab52fbd26249fbd9663965dccd5cb688a9aca409673d97b2c3a3") )
(41244, uint256S("0xb2295a160ae32a99259ca2711f5e5cf0dc228b1a6b043360cf6157dcf817e6d8") )	(55535, uint256S("0xa04ccf83ba8982cb10df810a351d2bdc037eb46eb92397b9272eaca9460eaebc") )	(68650, uint256S("0x33c94b063f0faa47a503ef8b825892b837ec6a13f18d243635e6f6e6d26e7fe4") )
(41408, uint256S("0x7097810b58e6e6b1f1e1da4b9753e1706730ec4245895647402b37b41e62c63e") )	(55593, uint256S("0x72415b0af562c467ba854c119e6e7bf8e3644d9f67fbdb7359a0a6e4437fee5e") )	(68755, uint256S("0xd214ae71b52a2823e64300330ab0c34795e63e02968c162f866f4ec6abe4a98b") )
(41678, uint256S("0x9a0d3d79e912bcffa00ee9512127806ce7b9f260f69cd8d84547d14cf528f42d") )	(56008, uint256S("0x61e6dfb7c087caa7e801ba138019f19eed351b72a8f0704ff968adbd17d96cb9") )	(68812, uint256S("0xaaf1ba362851fa005c6eb6efc4e142c5485227724391e5cc6b7c107f0fb964e3") )
(41710, uint256S("0x031249cd52839caf019e793fe7f7d7842e5f9cc329f05124f94aa913d9f5b19a") )	(56083, uint256S("0xa8b0fd8033629988f56a2397523fdd04e2dcc86508259f41d443a112b16d486c") )	(68905, uint256S("0x6865b183bb3320dae39e3beaab2a5df4859426936d8c01b2988652233660ba25") )
(41717, uint256S("0xa4d3ededba87d61afcb8f84692205b9862399066fd40c86e805a057c70b19a87") )	(56130, uint256S("0x5838124dcfa6c774188e186c4f1fb13f3aaa642cdc786a622decbf3676ca8614") )	(68961, uint256S("0x4e84c78d5470b1398c3b8f25a2d6541f48f89664456d811bd14e87a679b2459a") )
(41791, uint256S("0x97159f292b6e793d7fd5af223eae7821761837d78e727180896e836f882b6e15") )	(56293, uint256S("0xd9b5531cc911a1bdbcf453e8e68e72780db19d2dfe8b3af34fe599146fd3b302") )	(68980, uint256S("0x3c7a874a7df7afb9dfb2e6ed2ebea4df2fe206d4cfab35192f5916bfe9284895") )
(41888, uint256S("0x16d481205115c97af58e73f522b00bb1044fe8ace94a41b383deb95dcee04493") )	(56304, uint256S("0xed43ece8b4a3ad3ed6660ed6a4c29db52856ae1ddf7e31d86b85f2f36812386c") )	(69003, uint256S("0x020c05050923a586df54893964017c671b052bc52a643e1839dff0d6f3b96c97") )
(41895, uint256S("0x319560be5f03e1d1dbc0540049b687dec5d6e280a0f3097d27ba3c47fcd3c8fa") )	(56380, uint256S("0xa041ba9d48f4110489ac2ead374a3a576748dc55edcc66ac7c7edf1fab0c4a0e") )	(69012, uint256S("0xfe8bbadcdd0f15b03ea35adaaca4a0c97e0bda595aa0de0e8f1df1cd8394c244") )
(41898, uint256S("0x7cf0d51715439ef9b971c57be5957efc35b431e82b0ee4480564b3f823fc32b5") )	(56390, uint256S("0xaef9c078ee7718afce714c78c011942bfc0ae69b959193cf263c132e3e986e6a") )	(69017, uint256S("0x41cf2569b823209d99ddf81b06afb2feb1e6ad523e527ffb67bf6dd9ba14de54") )
(41915, uint256S("0xbbb97696def626ec64efb60a64f4bfa8aaf2df00d2d377c0cad4977cd38eb4aa") )	(56420, uint256S("0xf701db042d2d519f3d411f711b6abe5c2eabe6d18585c51b1ee4e70245d47903") )	(69038, uint256S("0x2ab323995556ceffc4707d0fbc7c0ca586d077c0dbda56ed2dd21f44d055b501") )
(42024, uint256S("0xf962cb73cf1a779622fe7bb59e4db9065c71a699af589909d82135ad6f1253f9") )	(56464, uint256S("0xf7fc6b1b873bce6a123d3fbf330b10aae18abe2edbf2a367c41589f81bb22aea") )	(69068, uint256S("0x02539b4bfc368ba593ad54b3dd0ba07c29ffbac7b8129ad391ca83b6b829e1f5") )
(42056, uint256S("0x96fb858fcfc531e05a6133feee1b86916d8bc4ead8ffb2fbd52b5804c1ce4fec") )	(56511, uint256S("0x151e22df8c7625a359b3144a1743d6ecc6f93fd3c25db54a253a8ab7b410bd23") )	(69095, uint256S("0x390c1e32f2fb9d7dd79564fa96190e9783d524e09c3aafbe79733d7aa1a27750") )
(42132, uint256S("0x68101d01cd9fd8c40344d9d05559fa748a0a77bfa44454eb80dcdb645a7bece9") )	(56523, uint256S("0x03f3104743c1385c5b09431e16107fe6d91c08713b549a4e1c9d1a5888973abf") )	(69164, uint256S("0xc9bb7ffef28f5687860e90e3c0bcc4195c60713ea71fa6203db06afd10f50169") )
(42173, uint256S("0xeb048b38a98cecd149b3e15e3d4dc8f898f47d0a43c2002578c2adffe1069dd6") )	(56617, uint256S("0x8837bb5e4bf97742e4420960ce0c0f01650b83b46112784985f866a5e95c940c") )	(69215, uint256S("0x759adc661f64517da430cc488b4c49c646b77363baf70a005e06745e7cc85795") )
(42244, uint256S("0x3bf89cf4870a7d0fb47ef93338d4d35fb410521f90f0f924d6e12033078b922f") )	(56683, uint256S("0xd2334250e9165fc16ca45b1402f6b7a24f0c0499d59bc18ba20edce09da04e73") )	(69326, uint256S("0xf8019983bafa48bdb117bafbf3777422feab6371f95e553e7c685632e020f4b2") )
(42269, uint256S("0x5a2976ea1cde689282786347bc51c62ad871f91272ea144249598dc512028f43") )	(56688, uint256S("0x10d66fc65a98fd107f8c597e5c1c84782700c39fc9574ad7d01338262e6f0eee") )	(69346, uint256S("0xac53e820a9d7fe1fe57bc0dab7429135831ed2bc559c92c96a34ae9ee523ce37") )
(42289, uint256S("0x3be7d71bb2a8289dd2d6306734ed1a26840dd9a368cbeb6bae5383a04508ea6c") )	(56689, uint256S("0x7f96c907cfabf267a67743c92b83fbdad94e7fbd92a9c8f581864a6164c23dae") )	(69351, uint256S("0x73dd0c62400787660ab766246b4367d2376a5c79e4bb2ad7bf0c7751f677fc0e") )
(42398, uint256S("0xd2aa6a0c03a099ca63dc2a12abe02a2d2caf3854acb9f7aa1bd53f35c104e34b") )	(56769, uint256S("0x14bf2277dc6c79f0aed8d80841e807524d8fd43c5e41579013f4e7cf1b9a5c55") )	(69464, uint256S("0x27c6b0b3e72b3eb8b6f99dd8b321d1be69122fad3cd72b6271c3203298d21763") )
(42535, uint256S("0xb177758f822b3b6d2564d2ec79fd9919ba2db106e1a2f515a926af64b8a9f98c") )	(56811, uint256S("0x5b014d3e7228b2c8e80b110eb172b3ac31e25e983f5e4efac3ab5a03b992cd58") )	(69692, uint256S("0x40ce0b1e00519bfcd2cfa98f76c744e5e2f0e126b3e7837186d3376ae94ddade") )
(42548, uint256S("0xa8c8060b24dfd767feeaf79fa17901b07b5b9a641098da39e39eaf929fa21c47") )	(56898, uint256S("0xe71b05eb8a7a3f7bced7aeefb74f5cc9bc267898017ac45d89f162da017abd39") )	(69724, uint256S("0xaba18cf0fb673419c243bc2446e703421bc19f16340c1d9754096a6d01094c34") )
(42558, uint256S("0x106b26d483484aac48416693842add210ae03b942cc0d0ea9e7cfc47606735ef") )	(56917, uint256S("0x4bce16acc37b7a2571df92af8646953442364acba87fe344f44a3a753a074586") )	(69725, uint256S("0x17e51944a83dfccc64117fc800ebe5497779372abd3775d8cf52703da016e9ec") )
(42569, uint256S("0xadd4591b82ac5588f1704359c675adf774cc735e25eae61d8c6f43250e0c1109") )	(56939, uint256S("0x6e7c62c8b2b55cae8b5f6a56058fd6e5fb364fe81ccf1a93cc234adf503b9ac7") )	(69850, uint256S("0x2721051c483e432835511e922b7be160c0cd265fabfbe614163694a3ed40f418") )
(42615, uint256S("0x488d768c476bf578e5db19dc18c0e92fa19dff28a20122516d6340bbb0d9e721") )	(56961, uint256S("0x4676dfb2079634e37c286941005900bee3e960f7dca7537cb73eb2b60daef785") )	(69863, uint256S("0x404bac8ba3c33952fcddf8e02ea299773a0484d5350112ed408165cd84477ddc") )
(42665, uint256S("0xf20acd5b92c6d72b434ba58f50f1d8069a74a951405bc51aaa23d828c12472da") )	(57030, uint256S("0x715c5fe70e14b2032dc9286568614c7ef4cf9e2bb9f68fc0b4dca0dbc8570667") )	(69967, uint256S("0x479571a228344e77fee2101d7b51509e205b3acfcf58d2e3ad07d22c397ef5fb") )
(42682, uint256S("0xa9496af6a0cb5cd7f1f6d569392adb9d4f69a18ca84ce8784ad60a68edd5509b") )	(57055, uint256S("0x8f902189da7802f4ee78589a0277eecbbceb29fcc1d70dec83ce422e909a8a33") )	(69970, uint256S("0x51f69c4b1b5b6a16a88a3a55ff21372dab1ff1abad7f57c937b7097bed7699dc") )
(42717, uint256S("0x38b84da7e7dbb2b9c2210dad2720799ee4f29b11f581c37722cf30c7458584c3") )	(57313, uint256S("0xcdddc504ec17c4704ea61973585dcb42afe10c8866c81c3fddea08296bd2912e") )	(70052, uint256S("0xc08209916e3d16cfb3dc6a4ef6634197827181f2461aa7d31babfaca31f29b1a") )
(42773, uint256S("0x710edf5363cacf81f8af09dde37fe5eda5f978c54f565b9c03c041b08ed1503f") )	(57404, uint256S("0x5a5328df14edc4f526cd63b799fd7d891142f44ef6b35404bfcfa0d35fa18a61") )	(70145, uint256S("0xd6aa397e7afe3ef8549e35bc85c22db9e0d2bafba0ac8a061e0309ab128f7e9c") )
(42790, uint256S("0xe4acae76b53a3e7bcad23d8de11419cf52b732ac608c6b1dec478ebb1b2cae96") )	(57412, uint256S("0xc93f585b5aed01e156e7f3366fd49a4ece892ef241a9441dcb8604975b21aec7") )	(70155, uint256S("0x01ba93d9a340885b0e1b0b1a9e37234560c58839cf21f32d818fdfce4d224e79") )
(42816, uint256S("0x38fe94379d8d846f2c43608a2f2589aee7435d1ef80088aafae07a708c822485") )	(57602, uint256S("0x4aa0565cd40c69c3eda4b7509310548506d76cfe4dbb7d0eb259885d4304732f") )	(70178, uint256S("0x5f79c6475c5fff916a9f9e7cac9c6d94188abb23bde07c9ca1fe1d407219273b") )
(42845, uint256S("0x3a04edbcb586bc786e4cab84659ac582a3d118ff6e6db1fc71833e6ae9905ff9") )	(57613, uint256S("0xfd22024311c4f70668c1d09edb679a6ede9283dcaf60c2dbeba7d5824949cdd9") )	(70245, uint256S("0x7d9f505f9e2ff39c5fb9f5e11a4a9210a535d7b7c9f0380fca307b68e5dfe3b0") )
(42976, uint256S("0xcfc9a2140528c55e8b6d3fb03aba96438ab9a4ca29fd5af732ca950ce28a5ba2") )	(57624, uint256S("0x13f62228b2e590a95a97a60feb572573cabdd4498eafec9e10d0d326135bdd56") )	(70259, uint256S("0x05fc11e16298ae706600dfa6b2a8ee2091b008aedec38056488af9f8ee1be21d") )
(43034, uint256S("0x63e300d38a3d377d7bdb0c674d4bf8c6c8582cd63a395472c300f43c8e7958fe") )	(57720, uint256S("0xdbf5fca0e597853217662dc5e49264e9836e15f0594097d4d1865cf61987cd19") )	(70322, uint256S("0xf58b9a80ca81755d9f04458ec1922cbfb0fc266b30458f9e9410af7a4ba32f7d") )
(43053, uint256S("0x6b01d8b3ac8460803ac33df664763fe387e69025f5319e9194e7ab5fe447e281") )	(57809, uint256S("0x0b4830df5c4b43e92a2aa31bc96a32734137b4a388547d370668bc4955de18c7") )	(70335, uint256S("0x07bf5769018057ba93056d2b3245a8d8e4de0d3382be9f4f284411346956d0f9") )
(43197, uint256S("0xfba8b603d269878e4819492ec7f4f4b90ef7ff10028dac8e6327cce5abc08c3c") )	(57888, uint256S("0x772cb175bce47322825422132f431ecd8aa9daba4f3a17665f008f856b9208bb") )	(70353, uint256S("0x88425fd4c8ed141e7cb6671228c2bfd4ce423e814a9b599a368128c2fb885a85") )
(43237, uint256S("0x55394ce3f22d9cd705a051d1eb42b2512a8261631288ad49968e40786a776f08") )	(57893, uint256S("0xcc1d0ef3d9a8da8349ac92b68476f9fcb42dc80dc55a70d73bb59181ab78f52f") )	(70379, uint256S("0x9be84ceab64c19ff0b70fb9e822fb452ada82488cb3b123c7067eb5d478aa669") )
(43312, uint256S("0x0d5f5188b2c7a139c1dad9dbfe3bdc9939f2984d63e3892f4deae0f10f2eda06") )	(57894, uint256S("0xb61eba285f5ee7c544a3db08dcb632af208a3b15aca853a2f084ef59d368582a") )	(70388, uint256S("0xedd4ff04f21d2f3e4d7b1b057577140b9fab991e5842f4a1efd76c6708bfdf58") )
(43361, uint256S("0x65eca993c201d0330588e876e37edee98f620afd93910117619bc1e4d38b069b") )	(57910, uint256S("0x74182423f35eebc9d086e3c51a68c92105de38c867fbd7903d071126529e130f") )	(70518, uint256S("0xed67704d2d0ccf8bcf776bdd3c7841e7bd5278c65e0cfa093592507158d46e2c") )
(43431, uint256S("0xcd752dfc873103a2753aae8da6867f3f2214fe4f5a52e3e0587ca1a853be42ca") )	(57926, uint256S("0x9b9e20f8ed105bd4bc1ab64879351b131912a6d922231df77a4d3f6f03ada658") )	(70572, uint256S("0x03512169a6a94d83c0c9c4f0f562bf72a33a4b14b216721c410a540791eba920") )
(43463, uint256S("0xeb99d5230c92d76d1bd7ff0458dd89486716d4456a259741ce83acc43993d328") )	(57956, uint256S("0xdcc7a734e7491fdfcf403e84933dbc59b8b482efc48a81ca61e19b094b34ed2a") )	(70583, uint256S("0xeb377f8addd969b83b88ee6fcf7f1074b7de8ddd4c11a8cce3f0e29d87041535") )
(43472, uint256S("0xeb280c2d63d899c15c3f2dafcf2cdb35e48bf7c6197f80011d4a1cd3edeff26f") )	(58006, uint256S("0xa9bb6d254eda5d6e8ae28781a1a690f05c650c62586d77ba620bd8ffcdb01a6d") )	(70590, uint256S("0x9e7ca881f191c85f28a200d39923227bb018476240f783b8fb0da333d334b7c3") )
(43524, uint256S("0x2291f8df5e2d31f3a53130925dec79f6fff8465afe530b35278e8df17fc32356") )	(58101, uint256S("0xbb2e4296a041784a6b83eea5bbb3632b87b42d577cadda2cd2bfd91a71283f04") )	(70595, uint256S("0x7c2bcb89fa34f125eacbb00f1ee761f44d7e6d23f9dc66810062a2d3173ea86f") )
(43578, uint256S("0x125b7665c968428d56ba576337187f50f435856bffdb747ec6924037a9274b8a") )	(58176, uint256S("0xad0696be160c5db88213c1ab80c3da8bf6c6ef14489efbcde4d5481d965d0662") )	(70601, uint256S("0x0d045c291688a7f58c47fb4616b633b28eb2a914f0414dd98756656fe17d5c56") )
(43713, uint256S("0xc987615aec234aa8c4d154a274fefd58c091782209569102410e17d1690a1b0d") )	(58261, uint256S("0x07ff3a8ad0d93b8d43333357405f157c5a13ee126b3f8e99baaf51b2efc10e5c") )	(70641, uint256S("0x263e74b1cf3994adac2f5f44d1488aae88a00897b3812988115dd1d55e9e847d") )
(43757, uint256S("0xb1f0a105100f04e7ac8cbe574a9946f1cf5851f55b932d97aebf75f16448ae7b") )	(58306, uint256S("0x4941e568b9d4c9ae2758a15befe2be2b3bda7c91a2ec358560e141e0203068bf") )	(70647, uint256S("0x7502a8d4ee9fa437a4f991aee9756640000f69999599d9ec905dc556f6817162") )
(43866, uint256S("0x279b08a45fa5f40bd34bd72b68dc4196c62743776f5991095a604ab07ceebf20") )	(58308, uint256S("0x2fbbc9898692ec23b764469e62bd9837c57c4929c9cb7a06cc6c8ec4e306492b") )	(70689, uint256S("0x665ecf0d815d1efd706af9ec7251f699ec7368eda0749f244531c718901f5970") )
(44119, uint256S("0x4d3bb15608292fb4ee658e56ec4d72849a5a946f87362241a6658ff5a39fdf38") )	(58506, uint256S("0x8e5ab44b41f30d6d052947272707c831cdeaea7111391ebc08a22d830f6b5c76") )	(70715, uint256S("0x544d150aa36c183df3b4213cfa2183d799dad9ca8c848a9106e8723f87b4f9d0") )
(44324, uint256S("0x58472c3a17a23942cfff736123c6c5dc89d10830f8e56c4a1e48b37df0381e81") )	(58553, uint256S("0xaffdff445754611015f77178846dec852d82d613c4d86feaa517cd684e9fa95e") )	(70758, uint256S("0x4136c9e69efa7e43139ed2a621cfd02ca1a2f0878963c90b49c7db6a8b141a42") )
(44402, uint256S("0xd1f868e10ece6736d3c7acd43c293072d2d9c9e926401c614c187d21698f162c") )	(58716, uint256S("0xc5a7bacc7844fd185a382b48f052b2e8b77e516024773ecab2709b1867d1b8de") )	(70836, uint256S("0x835527252fc680e2d7dc3aa640319ed4ab477438aa4a7f4dad001a84b6902dd2") )
(44461, uint256S("0x30817d0473153a62a938714d2c4e3a713f47d3790c5b974f207b25eb6f8dd59d") )	(58717, uint256S("0x5ddc5858bf7f53cef0666214eb8447e3a2546ed9041718d66675bea5fec3e18f") )	(70840, uint256S("0xf1f44b2577168dd0aa88d62e5bb27fd06e20182a4bf2eb5f9ff0e861eb6e2270") )
(44470, uint256S("0xf1b6fe9776eb77314977100865948bdc70aa5b8249ecf2fbcb8622c843df733e") )	(58784, uint256S("0x37c0fb6eb5bc94bc7dfe5191e25819060e5db10d73c6f8cc29f03d408e3641f9") )	(70861, uint256S("0x8ae7ec2863e1b669d0a94d8683d5a606d5e9723ada0046eb94471b534d4e8eaa") )
(44514, uint256S("0xc7c6eb0b999acc20e01a4f886c7f1c56eed2d3d724b3f5a3e94b225b78027ba0") )	(58975, uint256S("0xf951edc2810be907fd45b4f284a03325ffee8db85fcb9042e09d070de0ac85bd") )	(70874, uint256S("0xdf37a07df9fa6d131b5183b320b5a9c879c1c4ff7dd916d993aeef1097f509f7") )
(44530, uint256S("0xf4debbaaacd188222d11e322df0d7f5a8ef2a314e4e72df8b4bef4182831ab39") )	(58980, uint256S("0x2bf25a8f9439adf76040a3982a859c7c4b2105e68d275ac4049fb9b3ff939a9c") )	(70979, uint256S("0x0ba93707f47d2dbc430f272b4c94ded784f9aa30fef9f4931b22763c25679c73") )
(44562, uint256S("0x27e8bc58b263cbf5489347df75a6eebdca9247a8bd56dc1296f8deb330e920f9") )	(58982, uint256S("0xf8c8fd386f72bc2a8534d7d307223235ea8df5d22d41a982a482614f1f860945") )	(71047, uint256S("0x920f2e551a1a1320ef2e7415bdf0a3c10e0c83dc0cb99ced1c662672bd65c3f9") )
(44578, uint256S("0xca46f001019004222d04436a3045266e7b3cf72a956057c1778b638c8fa8152d") )	(59021, uint256S("0x4c5b2c3f290ecbd34ee115a3b2a13022f98be12ee8a50e7493d4958d1fddb765") )	(71159, uint256S("0x7992f06e1410923c066325fe1e5e136e0cd1acad03c56f4b44085d3985283173") )
(44608, uint256S("0x65249487a76045a91f43208554c8497a3ca7d11ff0327b478fa80ebe430b3d8a") )	(59137, uint256S("0xc62a519d9b134b1b19b3ccb3b8d49a461bae735b44c2c9be7044e7d8c5873a93") )	(71174, uint256S("0x3457547d14ed18ef56368b4522a534183269d64c7cd7cb9c4a0007f13a0308b8") )
(44712, uint256S("0x0436aa69793f5e518b493364749d10ca24e72ddd0bf6255928d53adbc25535e7") )	(59298, uint256S("0x46404ed84b2dc33def086dcaaa53c3a8842f08076d65afb011faf5f97c46ed64") )	(71217, uint256S("0x396d27d9fe1f12613857f85d7190258dda41a26a3a672a4da0fac50323f8e8d0") )
(44718, uint256S("0x8f63f66c40a5835dcc012543a709392320a3cac7184d6a07dcb40a7ce4e9cf44") )	(59381, uint256S("0xd5f749d3709201243a1d35846a1e574e2b0d16ef3775dbfdfbfbac25d13afaf6") )	(71267, uint256S("0xe7513a7828347c1efda440ba40f417330ab4726c11dfc7b67b346e2ec65ee4b0") )
(44745, uint256S("0x5a43de767de23521fe47d1901611c266e5609221616d8486216a9039d596f3e3") )	(59382, uint256S("0xa8c819a4a851079e9fad498cb711ac47949e61ecffd5173d17ee425288be79dd") )	(71299, uint256S("0xb8cd740c9adf1df963cc7fddf5fcdb25c062d473ddea80a6ea6f8aa318258e8d") )
(44775, uint256S("0x0d5e0ab9e09df530566bf7eab207c0a0c2b047a821f3d33b592eebeb9dd3441a") )	(59599, uint256S("0xe0eaa1c41ddbd4c8fdd2079dd61fed12c2ac2fd2a7274ba2cb326caa5207412b") )	(71304, uint256S("0xcab7e04b5c62bcd1c638fe7c968ecc6c06a7f1853145765d48325b450c8523e2") )
(44789, uint256S("0xdf9e5561594db78458eaecb068aa5fac091df3a5c9717829e979a5527a600d23") )	(59767, uint256S("0xbf9d24251d295f9cae96000ae01046e2a78d11fdbf5d0cc3951a2bb09e7ea1a4") )	(71348, uint256S("0xfd0f3542d36e51fe84cc5ec0f3d72fe1bd25f4b4795ea8df555ef1eb16357164") )
(44900, uint256S("0x653409da5b399dded3d6cdae962be2801cb3121c29e41ee33ad66f3d43a5a090") )	(59804, uint256S("0x20ba683d885fe16109697eb1c50666642fbc5d3cda39fa1676833679fe30ec5b") )	(71382, uint256S("0xe81bf7b043c624bcaa12222b786291958efa156e548eefd8214303e756ebf867") )
(44971, uint256S("0x2d50e4963a1161232fa4f40db23ac5d43f46fdc4b0aedc58d4ff25c2cf887a27") )	(59843, uint256S("0x2f9e0e06d994285dd426683bb89c39641e9472433a03d36947cfad69f0482fe8") )	(71483, uint256S("0x3cdd826162ca510984e2d0006b6ac54c900045b6ad54fe9c37351f3b2d2df075") )
(45045, uint256S("0x0b1ed9b5dc7ce97ce60dd14007a33670cf03166d21d141ba5d9b3b38807b2c38") )	(59859, uint256S("0xbf48521e209b7522b3ca081f155d3c18206b56e8cfe13f40496aa2819f99f53f") )	(71513, uint256S("0xe51a9ef1821fed1adc80253c4d181401951d77b28f6a317a0890852b10c38e2b") )
(45131, uint256S("0xa9ec3ff4a64653d7036a59e656cada24b92df40927c1f09f47799acc8edea831") )	(60019, uint256S("0xf8161a7719a7416034cfed8770ef60ec0a1ba8d856c378f4d073e665e004abdc") )	(71545, uint256S("0x95e386a69b3de37fe3faaeb6d2d6275f44604296f913e733472ab1110bc8c366") )
(45231, uint256S("0xa4604b8ba14442ac332a54a8a271714195ee27bc4f5fb6da00ea82bf3bb981aa") )	(60022, uint256S("0x23e7d0972bf657b8bfb33c7bfffefea1b181bcc000a8cc31fd960984a447a78d") )	(71571, uint256S("0x0c718980841e0060d4f2a2b0e23a84f904e67ed259a539bffe57bd914d6c4aa4") )
(45238, uint256S("0x92ebd5cae81cb9e8e0147f2804bcd65c4d70112368633c093e6fe1c17233ae28") )	(60163, uint256S("0x407d8ca174fd3db2f99092d3a672ca18073d9a8520faf3f7ff41d3d1948157a2") )	(71597, uint256S("0xf5995b78c7167c9a821d785f6495e84abd93b8f4854f4924ef0e99244805ba1b") )
(45264, uint256S("0x94f0b183445b47387e05bc5363f10a01e1bf138c1810a4d77472d09f68586c39") )	(60245, uint256S("0xcaed0c71973bf17dd16e6daabe85ac3a4e3d2840e21ce763a7ff1d5db23e48ac") )	(71666, uint256S("0x53a1585eff21a7811f84c483bc0084d033db04a767b87114afe540f7076d911f") )
(45322, uint256S("0x91e306e337f62e240aad2a96fda51398a1960439ebef6da668602a133f444f88") )	(60291, uint256S("0x6c0e6e24ddff95840f5a95b9b3f99f0c30360bd067fd737564192e178847c1f6") )	(71687, uint256S("0x236794aeeceecb22628fcc87a0251890fde91dd8a8a76328ecab925df19defee") )
(45370, uint256S("0xdaea7f4ac83df1837c8576cc9a26f786a3ba18be49a0b658edf60313d440c20f") )	(60538, uint256S("0x6d4375576a3b95b7693a80acba0db36309b04e661590a2788e6c165392c60562") )	(71750, uint256S("0x7c52041549e195f6115b9c0332f6d4373e133a13bf3921c2087e94c906397e0b") )
(45406, uint256S("0xe53d2a841bffc6302f4c5d5af128ccffa04c18bb97ca783d168e4d8712952e86") )	(60573, uint256S("0x2146c63bcb2fd4d4107684939e94b09e17d1898bf72a903ad8c379cb64975277") )	(71771, uint256S("0xdf7fbaaa87c40e2f463cae939866bb3bc54ab4d9d53e82c979bd6ddc58e880aa") )
(45434, uint256S("0x687c413a055a1dce307353f83b1c2a49d7674ec7de1f726d5a40178247bfcbec") )	(60639, uint256S("0x9f1103572f06acfa658bd9f3b9d8f816ee48a404496725735b1a4fca414a4784") )	(71811, uint256S("0x822d971926920c08de7d21ca3e23d08364281dad5c9ee8005bcc1c7e2f1cf7f6") )
(45547, uint256S("0xdd5658ca2734b932948cc586f89b533c7cc8324a036104d0eb61c9a12dcda5b7") )	(60651, uint256S("0x3c363404ddf9546abf7a6dfd8ff2c2628a7a5fc8de8f6aeea657cb05ff62e762") )	(71822, uint256S("0x4fba04b898a9d2a45dd19ecc32ecb908aba67fc08bee0c7966b4c003458fb83c") )
(45602, uint256S("0x574f76f8c121ed919f3c79aafef93e28f521759d853ae9cf950221c73360e443") )	(60659, uint256S("0xa647b84ea7db53bbc612e2df5a32ef2bf3689908fe4b4656c59658cc1de21afc") )	(71841, uint256S("0xe05263818fa0bbcd81165990640d96cb319174df5cfacb51520ca96efefbc86c") )
(45688, uint256S("0xc6a35572c10363e5bc6b8f9df2b66cc05f2b47c53616571373d43b869006c0d7") )	(60749, uint256S("0xfb72d9b7a76437dae634846133a77f9a03aa978cb3978a61dab3015304787c6f") )	(71904, uint256S("0x124ed1ea1827d775a3ff9a534bfdf0cd46a19dbfa98e40fe756a93d6266f7b72") )
(45697, uint256S("0x04b55403bb015ca0415a741d0efa404b6256864c3f6353c5762875fc53822736") )	(60761, uint256S("0xd00ecec3eb01d6543479db458c3d5f861708c7391c29562515e941d920418868") )	(71946, uint256S("0xf3648f86fcff181e50caf3f34c30ef0b59eda9ab26d9e6089121d46ee6a542b5") )
(45708, uint256S("0x3112a99a782540aebb0d865e572895c7a1a6e6bfe61633d58eff2f03d32897e9") )	(60787, uint256S("0x82be61490b8d72c4a6f533cafb58b7180503432afe07ea1d139526e042bd6bb7") )	(72007, uint256S("0xd4021748b79bbe8c2e6efebb95599d1d99e19197997dbb156e0d9fc66bce2d62") )
(45795, uint256S("0xf065e30b9e6114040aa76fb89f778507b9b21df6f1d05cd158f1958f16e48c4a") )	(60810, uint256S("0x08dd44c6d97960bbf92588fc27db4a445b3898e6505d6cbb7d68f7c989fe7d80") )	(72015, uint256S("0x2739a7362925fca39b59fe2c88585cfa945bd2eb437f660fad830216b78a7dda") )
(45862, uint256S("0x9ee76955efeed43c9ef3f64bf3fe0bf6322777faa917c058784e976208b54cec") )	(60877, uint256S("0xbad1c79cc76ab33f7901884f3e54285b2265cf47dfdd87248550b1ba48d05eda") )	(72035, uint256S("0x286d3f2d7c8252d964266975675e51e21a6f6e57ea16104bb1e3528f5afce31d") )
(45980, uint256S("0xb777d16e3ff723053c201a9ddde207a6980edd545e5e94f0d7d024e529926ff8") )	(60944, uint256S("0x61d2568dbf21b8f028b4a2bb5ed5b01f9fde0c113942bee3c2dfe141c58ae5e5") )	(72040, uint256S("0xf0bbe585e62f6740eee11116355b8bf0928177ce483d86b9be133229f889422c") )
(46053, uint256S("0x8b2abdc64436fe7af7acc3424e4204fbaf6f42b7dd61b94d8a7e2ef0753bd744") )	(61021, uint256S("0x6cd25cdf0aecb6365dbb510ff55023f8bd8a5f391055734674e1a6b4aa3358fc") )	(72098, uint256S("0xcfe5b00e93ff098fb82dc5e64d8b54c589a30aa47666e11eb213c9b12d55cecf") )
(46236, uint256S("0x2d312f4ccf466b3ce28165cbbd46e1cb6e6487eff6555abcbf1d46feb21914fe") )	(61177, uint256S("0x2bfae43757a19195f854a765c1332132fb2941c82373dc05e3dd5df299581acf") )	(72182, uint256S("0x1d240f8f9ae0469efc605df56c79686e15d72df23f3618299c67032f561d15ea") )
(46255, uint256S("0x00b552c381d7a69699ea98dde989ca5c319009391e719f379bac32acae2a228b") )	(61226, uint256S("0x874ab86c6c5d224eb098c96be8386f6c6521d800b13ca5f1d6e4fd6077dc4445") )	(72203, uint256S("0xcbd7d43f0594346ac037e8cabc211beab94726cfd4440cd247f32e7a497addbf") )
(46395, uint256S("0x76563047181635f05c5cc1accfa67684194696c274a8f187ef09b6c254ed0b13") )	(61372, uint256S("0x960483a748560053626e9be241e398461888f936e1233e330df1256a7104b829") )	(72300, uint256S("0x3ba92a062308c11ad1562ecdfe93164419161fed2d63a40993683ab09b4ab631") )
(46429, uint256S("0xcbb8dc67676680aff52c4dcee99cdba520dccb052f7d1fcca57511e7dbd8c730") )	(61407, uint256S("0x23aa56eeff128e6f4d7520b786e128f372d5c59ed753e07fd98388c2125b82de") )	(72345, uint256S("0x58f339c9450e9b64cf1e83dc844715de46a05ee9b39fa9171ee7b05435a162bf") )
(46448, uint256S("0x221de32bbbda767c861530e38b9f0647c589529f95855b1b03abeb625b513a66") )	(61501, uint256S("0x2831c31b1652333a664629658101be14a7e77f242956eb64f99b16f710f9f427") )	(72377, uint256S("0xcaa794938eb389f653ddf14fad247b4033cdb717b5d89f1bdb1bce456390e4af") )
(46631, uint256S("0xa88eb0147cc2827cc51fcfac85e883b3df52a69dfb26a633157ca6ccda5783a5") )	(61682, uint256S("0x4edcfdeb40f32a94c16b4ed206cf4d435107e9521f9645c4ab0ec4ec41c99b53") )	(72461, uint256S("0x3e4dc2a61754c6dc8504bc43faeb144a74ea8264a31de5cfce7167f11391f64a") )
(46647, uint256S("0x524fdfca12b97ec5fe7a007e483aa24bf08a413e85e912126f715f0ac7a2ac64") )	(61700, uint256S("0x9e24b576efe59834faf5d8541124ba00bec164db5c8007f202a9a8a83d2a3b21") )	(72512, uint256S("0x73ef9e617390af566c37353c0b7c62b14c3e8c5aa756e4e81ea6c3bf0227b2cf") )
(46757, uint256S("0x562029eacee2c218dabcf1f251d1b755c0cc5c7cabe1b74d77bb7789991c0c96") )	(61732, uint256S("0x87dae959bc105fbaa6e9d8520d86e20a8ca37597b13597320d8027a01400a03e") )	(72573, uint256S("0xf0af7fbbeeea083dbf2435326c111c81f48b05583f0251333c24379548d306ec") )
(46840, uint256S("0xa780754a61fe6d7819f6a9284b053989ffe48df9338b564cb784cc8a61a713cc") )	(61758, uint256S("0x18b423693d68530b44e46b2636b88014c4186c34cf7bda3e6b8054fd9672995e") )	(72675, uint256S("0xd04f39afdc603295abf120a9174de772aef614406cd48841a85999e55b77f9cf") )
(46864, uint256S("0xfde6cfccfc2bf27391287f17255a0fee85061e29f660d33f701b41e0bf97eac6") )	(61843, uint256S("0xe4ee9955acfb597c0821074cc5305aad3f60cecb9ddb446932bbeed50251ea8f") )	(72787, uint256S("0xd60e215de4dd0d245f8662bf3bf9acdb185ae6d78ea5ee382fe106df13f707f8") )
(46901, uint256S("0xaf132d2842901bccf287548974383dfb0323987eaa7e24292f6a53c00738f5a8") )	(61961, uint256S("0x687d8234e11a562f69dc7630d735c1b1faf90ea9b725c627b3add48f0aaff6cf") )	(72803, uint256S("0x50abb936aa3aacd7fd23aad8d18a8d459d5465b8feb030b268d0cfd107d108da") )
(46943, uint256S("0x4120396eed1b64cce145c21a0ee1f11856ce71ce7e851422713585639e6822ec") )	(61964, uint256S("0x3e906de854d5c6021122457d8d4383e606ea8bed08993ee7170df69252887795") )	(72804, uint256S("0xa5cb048dc8ca5647bc3ec06abcc895c0362d3b371ae2d2856fa33999d9096c58") )
(46988, uint256S("0xa2d066fd8bb56275fee649787fe77b31b3798da24ef4513f48cf0921c8c9cd6b") )	(62012, uint256S("0xef1c97c068a4ee2e771974339d18874fe5dd7e30b10c16a89fccd4d09254bccc") )	(72818, uint256S("0x065a4b5d52f90c1afaef28f754949a6cfaf442d2b1f4e3ee6c9d18628ddad1ee") )
(47063, uint256S("0x5b1e61c8e0328a5118e2abd5d7de76e48ccef774677d9bd9d8e69427dd4de1c3") )	(62032, uint256S("0xcc159af1a33e46f8bd7389786df9a20a0f54877b356c86508f377c7c19b046ef") )	(72836, uint256S("0x5c6417dbc079da4aed4fd76136cddf0178ff52c5c72cae50567f92c140ad59ad") )
(47067, uint256S("0xab5a71fa40d0f14e1b0f881d5e92f5997d346db381cf1252183a66ea242dee21") )	(62128, uint256S("0x85ceeb06266cf065e560fa66e1c138f88dd360d27f38cf3d5f8aebf9a9ccb8e9") )	(72853, uint256S("0xfb772d56f2d2b18b78066d56884c140efb3f128bcf4a46f3f81d128ce9bf8fdd") )
(47217, uint256S("0x5dbfbd86af5f2687ad240f0792fc2bfaf766b704b25434eb6462bd15b0b72b59") )	(62144, uint256S("0xbe1b58e5e917e61e0b5b7ba551f8468237f5d8738964ca500f0ec8fdf321860b") )	(72942, uint256S("0x583f9ccdc54ce203279a9b7b9a0b300235519453668c18acfcf1aab164986614") )
(47234, uint256S("0xa93515294018c38e25063a3c9107b09ac3214cf6fdc5cba9e19007382b95ac64") )	(62177, uint256S("0xffcb2e9434986b1ab40ba8a67a08c26d1e99eba54cce149ae549b12ac99f181f") )	(73141, uint256S("0x53e1c816d4bcfce94575ad8f9dbd5f4153f3a6259b3737d092634bd61bcbaff6") )
(47248, uint256S("0xa03fb0640bb5805fefa36501f90cf5549d26d900b34b82a869bfe09523199e87") )	(62295, uint256S("0x458a1b600ddae75da3226a53921d3b63df12ce2ee3357f4d98c78d03b09b2461") )	(73183, uint256S("0x003c966c5bf5c3545ec80132c84674368ecad56e36f2a2f710e78d9646aee10b") )
(47529, uint256S("0xf011aa86eff815023da7eca5db1d4f28d0965115114991bc4cf3e20078ec8e3f") )	(62307, uint256S("0xec7e2303883650fe1526bb249ba0babf95df35324c0046db742499b45891fedd") )	(73255, uint256S("0x1a466bfc1fe6e370a0d184d1ea4dc4a013ed6cb4c18da25998bf691356ecf3f4") )
(47702, uint256S("0xcea4b0d61e405d62089a2abec48c00210aa025c8ad891592a81d1532907d43ce") )	(62372, uint256S("0xe432cc8661221da3f44d9428261cc6302e79a469b247a9351dd9588c8c323d03") )	(73264, uint256S("0x8e29daabf178f2195d855e7b7836e65c012e9f50f5e2667a13f74eac20b450d2") )
(47708, uint256S("0xd46443bd3a8249548172d0071eb3fe4d6a348c788aae3fb335ef680675730f2d") )	(62427, uint256S("0x0d2254251f749e13a98c6e44dbca11c993bfb91db6cfd4245870f1997b46fa72") )	(73296, uint256S("0x2f0a6fea0dfdb6bfed4ea25dc826b6b917ac831f4e7ec4205eabe9327f7506b7") )
(47714, uint256S("0xb9e9164a060a5d64ecf767ea6180623a4b83c571433e8f68092958b976c688c1") )	(62497, uint256S("0x1591a1f4c3a31f827c9ca94c80b71b04430414bd490516271b095b4eb269f77f") )	(73336, uint256S("0x548a42bcfc7b852ec08e6b043c9e0e84cb6a2688412494cb5cb4570ca0c830fc") )
(47799, uint256S("0xc7bcb3fd6b1a8bf326dd85146d57290580283f9f9e1301638fa40305fd6c0aa5") )	(62603, uint256S("0xf26c78eb889aec3613ccb74784550a37e0a7f05c63751b07bbd1f3bd0ff18423") )	(73387, uint256S("0x3292029d865055bffb8791d1e8a860a1616effcd96ceca494203524e11a34993") )
(47881, uint256S("0x27671c60ab45a261c9494aafada6ca0116fd79adda1bc3aedf07a2451943f32f") )	(62646, uint256S("0x80c9a30acd8fe24f90d1a299e34999ab10fc606f89eeb14470a7c209e4da37d8") )	(73434, uint256S("0xc20028725396af331dd7ea14e239f9c942d2b81699d5e738037c63d583f851e1") )
(47937, uint256S("0x4106d0de8aa1389afcbf75a5318e1dc688b37d769bd89400e12492fcc8bfe060") )	(62729, uint256S("0x1baa1009360c63121c5f7d07e524f7e19c809120b389ff3cc4ba71cd3386a568") )	(73500, uint256S("0x9493db2a0c4c71519e602d1a9ae4f53737890c18a980ecd177d54ba1774a444a") )
(47989, uint256S("0x00db0940b014bc25d00f027992488a71237fbd343d2dcf4343a866cadd5a5a03") )	(62761, uint256S("0x3ac8aeaed57e316a651e70a6aceb530359d7ee955140f7748a5be42f1f776936") )	(73501, uint256S("0x8068dd57e868fe98b75ab4eb5b9d8f294a218667a4d1d9d38f196cdd0fd5e885") )
(48078, uint256S("0xbe290cf2113c77a98f260c834dec060d51e4134b45dd4f7eabf9f6d6e44e0dad") )	(62825, uint256S("0x50edd9cdb933af9e905c028d7a8ad6e32f3e96df9ca028d5dd3fee814fa64330") )	(73511, uint256S("0xd01e865a59ba793488986dc236b4c88e499e4949dbf653f143752d610208a27a") )
(48103, uint256S("0xd24ec714423c8f158dfe170220070bbec3dab5920612932a53a7d0190bc8af52") )	(62876, uint256S("0xc48a094431e830d7843096cc13505bd01d73250c914d4afbffe743992d564b76") )	(73529, uint256S("0xe109ee6ee9073382187e7f1bd9c21f4af9318b9a3fc984aeb86d2c129eb39154") )
(48115, uint256S("0x13436e939933907d2f04e2d6d926c8bac014ec086bc9d1759f3108d69dedc26d") )	(63089, uint256S("0x197d46e80a81834f3de4cf1d92818acad0a5262e1843bc80c25bbc561dbaffb9") )	(73565, uint256S("0x1a2d2d96e8c03fcee23990161a247a0b8b440b7540afe72534a24c2db83d7d80") )
(48455, uint256S("0x332dc077ef12583f2e39762a20c5a9440d53874c7ee434c3bbec9f288f58bb61") )	(63121, uint256S("0xf7fc7a2a63303dc99fcbe051a18c565e91c0b7c58173ed049216c1e3f2cc7692") )	(73601, uint256S("0x13c39a7693d40ed77418a3983001bb7e7d7698c5813334bd7fdbfbbb95a1e3b9") )
(48499, uint256S("0xdae0379f644ba793f30562bb076f971a02cfb5aebe113f8de6dd986e964de4f9") )	(63243, uint256S("0x7418b4afdfe4f5dfed14fc7ad3f6a439222eec2fa9d090e6dbca90f663b94f1b") )	(73620, uint256S("0xc9a6da0edd9445bf102fa55314a2d5aab4de15475dc49e066e5784b0558058df") )
(48543, uint256S("0x0ace1812b4e8b61eb7435c2441be5888103748e787d2c1e4b9c3dc69c9ccf4a8") )	(63375, uint256S("0xc85fbf49e374c7d5b626feec1bb50004daee520215c63bb829a1deeace26a942") )	(73661, uint256S("0xba7f4898da93c84aa31251dbdf7e0c0f0c5e5e557f852800ce857b5863a1722d") )
(48560, uint256S("0xeb608b048ff7890eef3177d1c903e0da4e3fd233083df310a3268cd2fdb732b2") )	(63393, uint256S("0x5527e0fc38e61aed5186d3dfcd6bc8dd18edf684cb980dd4fb02ea6392cbeba4") )	(73842, uint256S("0x4902a61b4c133f7ad27b2fc5c93c6d738f7c1366207105c47ff089a8d9353534") )
(48612, uint256S("0xfe9d0f94ffbd5dafea2a8f28b09524a0b6ea5216b63b87f4bbe8445f925d29f0") )	(63435, uint256S("0xc444d60633a57a06c15dd73c49cbb9b8136e2e862033a8646c8fba9410700fa6") )	(73861, uint256S("0x9d2500b9375f918796c0c1e64a94e4cc66d3d06d32219f7ccf9f651c202f285e") )
(48663, uint256S("0x993410cbcf8cf1c7a5105b72d16b15157a894a855a77a447de68c7072ecb65f4") )	(63477, uint256S("0x3f546bfe66dcb91f9e93ba19ab9b4a0e0d5bb8ab47c3257904459b0036de4d1f") )	(74114, uint256S("0x219e8a52b72288ef2fee5d375769e01261600d75c4428984c17c3e64d221ee95") )
(48669, uint256S("0x116433e15547ea5f56db39f70ec2b076194ebe153e06900c4f508e7a4e38cf07") )	(63539, uint256S("0xe74685ae03430437a22b6e3edc552a4594c844984c252ccfd81fba2398a293f6") )	(74167, uint256S("0xe4bde6e86ae6a95407f3abcc6605acbd490e305fcde2ba360c277781ff745223") )
(49090, uint256S("0xcbcd3176660df148ff1b31de011408b636558379aa083f53a9272fbcd0dc6fc4") )	(63593, uint256S("0x48fbf6a2974cffb1c52bf047084b9ccd8bf1b1b5d15e517caeb50a769a1a4354") )	(74243, uint256S("0x49755ff8bc8e5e44ce136b9ca0cbb29bba5d0b6145c4a1a5f1a02e6a1c35226b") )
(49140, uint256S("0x86ab1b61ef998bc37856806c263d4a03a02336d2c8d25851e6566031c93612d8") )	(64055, uint256S("0xa16168ff836a24a7636a70415af72d13d53475e1b0ee15411fbd29b0b73a4ae0") )	(74257, uint256S("0x2d24e29bbe2d3b9836d8bfb7e8eb43552bbb0a525d488f72e28db233e3ab8d9f") )
(49221, uint256S("0xf9d5f775b77bb9c8e823899ed130206dab8001b7b70412e662e9ee86a656b8a5") )	(64110, uint256S("0xc1a938e3e1e9f576cda04b121017758f555d5231a2429708d0b270f9ad6364e0") )	(74307, uint256S("0xb29d6cb6a68fb77370b6baef4acf852a3c5b99acec4934e677d40bb2fa02ba7b") )
(49416, uint256S("0x61b0944eedef54ce9b7553578e1c6a343e0852e3152c18dea5b7d0a7efc6b806") )	(64117, uint256S("0x01dbff361d2f18fdbe39587e2b1a182d1f3a5158227e25b71e578f391112f4fc") )	(74340, uint256S("0x7f7da9682587e41bbbe5cbfc55c2f0e5a28c8110e671febd6bebdb990917847d") )
(49531, uint256S("0xc689631f9f572fdc61f7afef2029d0a583d348ac5f1cdd7284fd64f2109b8028") )	(64126, uint256S("0x70d48305ff678e14cfdb1905cdfe1aa460d3ed3e88a482125f23ae74e531c120") )	(74350, uint256S("0xee742dad6339260ce6e7293d1cc40a68b65e1c0b88cf9f517d510434f2ef7cea") )
(49596, uint256S("0xe0d603ace37d03d610c5d371989999c033888a1f3f4b7c44abc7526268ae0ab7") )	(64207, uint256S("0x894d7590c4585c055ae2951cf010ec64758691ead1ce9ae26c645d3d74a59b32") )	(74368, uint256S("0xd8d33963a0146e40eac3ff86c1554f16afba61e4d077b4c39c03399afa726d92") )
(49625, uint256S("0x8d29b4596c8a3860163844dae91b2eac78501c5ba85f64f31b5c08d0a51003a0") )	(64304, uint256S("0xd11726f6c18ec7e9030f0a08e51b6c90adb85cfda704784f6d4497a50c5e1134") )	(74443, uint256S("0x64a1407247e31b277a980e0789677d6860db325388438add9a189c1a902221f5") )
(49657, uint256S("0xfb51186e7f0350c470ba5f3cca39dfe5b4614136a17e4be7ab8664cb11ad2d2b") )	(64505, uint256S("0x2ed0c021f4612ad4baf0650a600ba3c2ec0dbe64cff25cb72bdf8ba48a67271b") )	(74579, uint256S("0x23a4184316815969cd17d719cb7baf370e54c6c50ecef632696d28b319297f4a") )
(49675, uint256S("0xd0d2b71caf63590b370177d335a3fff68490eadd5faa39753529038498e401fb") )	(64541, uint256S("0xb6fb8008ac9ce53b6aa6c5bff4d38da85fa4113fef09e97056006ba9b4ff6567") )	(74868, uint256S("0x9878a7bd861d0a001491ac137a819590543921e453ad12733a84f92ca9108935") )
(49706, uint256S("0xd5b42c88328238e611778c86761dfee5e84ec54bd997bd71126f760867385f1e") )	(64613, uint256S("0xefd945b798fd54a019c2bcd109162bd0d595d13ee13c97fa232345373d807362") )	(74881, uint256S("0x46e4a5b983dbc18f315a1fbd6c2e3dd0e6dcb8a0490cc1c9a0fc9712a7c7860e") )
(49796, uint256S("0xd96dca0c7d38fffa2a7d387634bdfeb69e06073856cce3e35e529f52c4681541") )	(64630, uint256S("0x4d9bdd7dd3e1d967a5e7e553ae7be9c43709ba9f47e33bc50cea4928954ccaa1") )	(74889, uint256S("0xa5b81c0eb15ce59ea669f1a01e732a1d4db02376c7e08905e85f89b32f191076") )
(49815, uint256S("0x6634d47e9fddcf2751ea00a70aadf9e3fe5fdaceab3bf748debea6384c84e981") )	(64643, uint256S("0xeb1e9dc07aa366857a03166d5b42dcacaf7fae4a985ecf13e7d91eaf12a6f778") )	(75006, uint256S("0x7015001456432ff551185703b003d6b398e6e7ac9b5e54cb90763666a88b9dbb") )
(49998, uint256S("0x03f90525df6e9b4db234a0e10c9f8bd1e45a790e97c2920c8b778d0933bf3dbc") )	(64705, uint256S("0xbf69d7527d944597e61484b3c60d239a087c52a84eb79bd9cc700833cd970208") )	(75066, uint256S("0xa1828d5f3bac9fa1cffa1c7ac487fb532a0f965e4cfa3a2a75f692addc57cc62") )
(50194, uint256S("0x7b81c22add7ee0a61e5b3d9ab346b59ed3d68d507eeb0d766c607d16cf1abc57") )	(64747, uint256S("0x940a95b9dac0b505acd28f58c8e320555eaefac03c83e937728e86c4ec3552e2") )	(75071, uint256S("0xbc878473b318b226daf7898b144be98380d6a1a3852e40e99144ebf92557138c") )
(50255, uint256S("0x266c7f578680209bbd6341a7fa3c92f814a529b41bf3e15979e0f6d32a2219ec") )	(64797, uint256S("0x2078a370ef6acea5ee4439ed85104d66493130c0c366210647238caa4831de7d") )	(75123, uint256S("0xccdb1d8383bcda82725257a4475d9cd09519ec140436242c6695898cf7896a94") )
(50258, uint256S("0xe464f464c56bd670b8634d963cf2b71b04c1fc9b1f978baf3914d495ba177098") )	(64823, uint256S("0x7e0f35eb8d98feac3c0ae093c18fba290ecdbd12a0a2f0fbd28021c0433503f9") )	(75125, uint256S("0x9ddc7f7004f6252fc825ce503349625c4f48614456cc0b548aa1e1cf17c34045") )
(50323, uint256S("0xa4afd9314604c391e8913980c82b44eb182aa4ff7d30ad23056267b070cfc3d3") )	(64832, uint256S("0x99fdc62d08f054082e839aaad9fe1f9aebbcb342655752d81c9ad6d1e1697825") )	(75130, uint256S("0xbe7def36d544ac43b8ee5e2a04885f967e45ef012001365bd426a10956581109") )
(50370, uint256S("0x81ec5308f9248d3b399908704cfddd4f2ca8ed89e4a402212d9d549a6a888da0") )	(64872, uint256S("0xc5b6ad42d031ad9a3d2402019a28d37043e52331f7995f97e8b4c01be72756ce") )	(75136, uint256S("0xe6cb602c63a113aae9f38030e6fd08f8d272eca6ec611b665b6706bf83c681da") )
(50384, uint256S("0xe2375526d29312689b3b0acfe03bc35de0c7731f7abfad0e4a9b4e527ab94929") )	(64968, uint256S("0x44747591af78630128f3c4acad1480e25038f08ebb2efc33ba7181eb373b3e58") )	(75167, uint256S("0x2fed29c5fe1351c8e21a6b3aa2a888d4fd25af1ad974fb0673ca79f698de6e10") )
(50434, uint256S("0x4e14a0746a233c9139c7f40a83515f0bf3930d49127127a6ee61d522bb0ea65a") )	(64969, uint256S("0xb21b336cc746ea262c995ee2152725b53d92e394b2456dad35e4318414c05f93") )	(75431, uint256S("0xd4de7ac65514dda62824c0fd9eaf0b8a315e557ef108d7d5adb11895b2a9ef79") )
(50474, uint256S("0xfd006313da92cc37b0718a1266873ac2f7f6b48e037072097e2204e34e9802e3") )	(65036, uint256S("0x9c71e56f6e8ba2f4f1ffd16280ddc2c5d76d41a2f24c6d711e2b3ceb8dcbafea") )	(75457, uint256S("0x372c7568f03252b6537ad99288b3dd4f0c27705ea9596782adaafee9cb176dee") )
(50510, uint256S("0x90904db14b561b0b82aa203d5c55381c972292e068c4cc2d3747f6ee34962dfb") )	(65051, uint256S("0xbae6f2394b543c47cf23ee5d98fe02c578fdf1d5a95ecfd1bd7a6d2655bbd0da") )	(75484, uint256S("0xd10fc92606cc75094cb2dbf35245b09bcf1b05a683df943e001324aed04ac9d0") )
(50527, uint256S("0x5e7bb62d1e2df1daca4164a7533b1e2d6ee1c2a6c5b2979f9befa7d22cf6501b") )	(65131, uint256S("0xf98a5cd9c37ca18e2c9f47bcbc7ca11484821a271c97a3a92e77822fd72dd3f5") )	(75590, uint256S("0x64832e5b3fb648729eb8f205607568ac22f81cdf31e8c01c2392a215985999b7") )
(50636, uint256S("0x42fe266082eacc771252122eb0c42bab015c7e7c35fd65489a41520b3e16b32f") )	(65205, uint256S("0x22f30c317f5f99bafbc64a66cbde76f5b8fa052b19c1c3e1adb3088113b1d690") )	(75713, uint256S("0xd585a1447d7a412d0e997699e3b56127bb24ea9d47ac04ce2ac17b193f8900c0") )
(50650, uint256S("0xa78cc8f7a54a1ca9cc814df3de8107ea98d0f631c1353e5bc4e4df377636e05f") )	(65356, uint256S("0x7532435a73e17546e588d0f520e70b6d8d8d5fc24ba68158f58882b3fd6c4c4c") )	(75719, uint256S("0x262f16513cc188c9879272111e792d3485b7fb5e1cf0dc8a5d566654d15b45f1") )
(50702, uint256S("0x44536a25a21a4dddf06bb56e6cca1fdd9617eb373fe8d739ad2a7379f032d70d") )	(65457, uint256S("0xb95b2f1d392447acdd28d13bd98228717c2dfc09b97f203d8456a7e32b92aba5") )	(75720, uint256S("0xb2c84aeddcfe60f23b42edc2f6ee154e7b7448d519059f4ac2cac0ae08e6aef5") )
(50797, uint256S("0x377b686d718da3f6f94785c54c3f0b502a82cf642196cce94ad720b16fb8ef50") )	(65458, uint256S("0x83633d7096478561620664f8190d113265b49d3398db184d1e28a073b2951145") )	(75743, uint256S("0xe243987960c4e4017ffb6882436c2608544379058a512a7a28140e6a91588d7a") )
(50982, uint256S("0x923398f8f25250e37b821800d6dc1a5982e1bb47f4474814de4ceadf0c805ae4") )	(65473, uint256S("0xfb16b704a113755028d7b1df2c15157c6757bc11f4372bd1f3b675a63d71a790") )	(75763, uint256S("0x26601210e5598aa78c16ade970fb4a3ee3c2b80fbaa224b7530619316aa17cf3") )
(51090, uint256S("0x31975a4efc43a5c00e4111d87c83ff653f9e6cfb83d36a30241e1edf2bbe3f64") )	(65533, uint256S("0xb1ee7b113ef339613dc9118e034099349d34e1c5a91fe24d42befdd729fe125c") )	(75782, uint256S("0xce9608a3a0f9a53659be113733913c9159912d5879009eb463ba06cbdcac260e") )
(51157, uint256S("0x18da534167e278719cdc182a03c10cbf6f2228c90c4f1725a4ac797036beef0b") )	(65555, uint256S("0x8cd2a0ff78b340c9a96be6d0f18827980afa1eb704f2aace34ea1918f27d5be6") )	(75965, uint256S("0x369fc8082b9512c61a31cdbb7c284e57f0078b67662e71a8755ccd931a6fbc71") )
(51158, uint256S("0x5c8c62559e6ce7258b8de6056139276240ddfefdd0943caec1490b7edf6840e8") )	(65602, uint256S("0x1927f3aa4dd0973afdda7c49431ba8aa01b764397a805e3d7d52e39450dcbe2f") )	(75984, uint256S("0x14bf8f8160d4d3c879cff78523e709db08daaf9b7506412cda8061d4ba765c83") )
(51283, uint256S("0xbebae0ef2f9569e0f93a58e7fe03eaa9ff53efb0423152d2c1f4334e6b49b98a") )	(65606, uint256S("0x7ae736a3377974e5032c292c214923b33d6a218b72010224954a2bb923ee4b9a") )	(75989, uint256S("0x1d5f0c03da4b3ce89df84905e7b7d77983e07a79c996b01561c34d49b0868c7c") )
(51398, uint256S("0xd17e1b40d798704a528487e6decf1e0f714ba4cb5551034f1621c73f230eecc1") )	(65720, uint256S("0x738d880a5e4eee6b4f7f7cf3aa3714f6ee22ec1c83b6cd19a803ea41ef62bc81") )	(75996, uint256S("0x7853ef3781d18248247dd0d82169ac53512c79910eafc1149869d1513f3319fd") )
(51528, uint256S("0x12604fd9e1547acd168df64fc18069a1ec2a3698a837dfa6febf9492e5d2969a") )	(65787, uint256S("0xa9852ba6afa4211885c90897b6cd235fdfb22e078304957cfdb0cd3ca734631b") )	(76119, uint256S("0x76b5e13cec706c48aedf7e45d40f9ecf459ce81bd4eb56ce8d9381fade24ac61") )
(51720, uint256S("0xf07cea984f33a8997f1b5fd67200ad4aa5ddcf3c6c3dc28879a48738e25bac04") )	(65827, uint256S("0xdfe7631c2af246dde09294c248712d074b70c69e44e165912a920d5964a2ebfd") )	(80975, uint256S("0xf8f2d75b78218b98770b1a44a382597c747f3461ef05c6339508559c3fe433ea") )
(51753, uint256S("0x00e888e9af9e8f61f97030afa178217b2fc3322bd98d08700766c83184779e40") )	(65831, uint256S("0xce6e7cff3e7716d7490db106deb3c5de0ca7486ce77dda8853cc7507147b13e1") )	(82488, uint256S("0x660509501aa1c39571747d2012da4a7939882569b77de446d6c19eebce133bc3") )
(51762, uint256S("0x49d40990bc39b93808f0cbd7252d1dc852b26d0f60e84fd91d8dc49ae5da0171") )	(65833, uint256S("0xcbd7abe82fa539e044ca31198012ea6ea9048049540aeb18a51f6ee553215b5d") )	(95054, uint256S("0xda9aa893024b8c5470698b8847a537987b3725f3b74d76cd18e94298cb1a22b9") )
(51786, uint256S("0x8e5a46fa08eab321d243a7047ed2554f28674e4ef77b4763f16617c1c8229e16") )	(65961, uint256S("0xf043c979165502cb393202ee5b0d1028aec488349b87b6ff19195cae9722d2de") )	(110179, uint256S("0xf310083863c42504c229ce9ad19a41e24f163e463bec610c9b8017aa648a5055") )
(51876, uint256S("0xd340cc551582b20144d9f4c823699690750f216336dd6868c6dc04d8a58f562b") )	(66014, uint256S("0x9336ff714a8c72529e3a31fd9c46a89b17ae24f7bc2924d56c398e3aff4ac336") )	(135253, uint256S("0xb64d93fb4de0ece5f7856332c63a8879b20ed5df026e1f4988e8966a03198f43") )
(52098, uint256S("0x946a3639eb366ad1e966b0a56e53e56e3f87f40970b34ad4b35750e7d304660b") )	(66115, uint256S("0xe75fa60e17baf229e487c85d4baa108e9c7774882d02af9d69f3d5402d42e7c4") )	(147964, uint256S("0xf19f09b406bfad23524d8425c18627284f04224c692a37b87ba1e33eeff20365") )
(52281, uint256S("0x504809474d4fa6946e09d3887845831041dff9e5f2cd3d4f164cd1d663c4245a") )	(66212, uint256S("0x0393fc539632a53c81200fc53f0c9b6f9d6ceb40bede082ec5e42fbdcb25777e") )	(180512, uint256S("0xf7470f93d48d68f56654f040bbafd062b67f9a5b4bd39c4c9894613831af9a69") )
(52400, uint256S("0x85375b929b8be105b31dd17a4cc93f634029a769de459eb1ac9cd69fd415e632") )	(66392, uint256S("0x348bfbd2fb250e586605f7a52fb24a731ff4d7263224b833346b95900fd5e51e") )	(185005, uint256S("0xd361b6c4bc0a5f1e0cc5dadde8bb22aad8b9fcba00d7208a2f45ea4a875ad66d") )
(52558, uint256S("0x1152cd7f6a4dd6dd448cc0a96fb89e394218ba6fa510783e5b4ea63a18149489") )	(66418, uint256S("0xed5cd95499e4f1fb814e50d82845199456fce2457ac2acf2a0c85cbcc84b8056") )	(205281, uint256S("0xf373f61dd9cc805e3529dcf232b018cb489b98c17c803ce5946fc52c5a26e778") )
(52592, uint256S("0xcd85a63dfffb02c5cee7e31081e6af5742dc01d526c56ca6f3d43488c7902f83") )	(66449, uint256S("0xa3f9c2d9731f2b410f1fcb3a202b83ead5932a7d00dfe1453116cf457f75feb7") )	(217630, uint256S("0x4e7b298caf3f18cd60a9c19bb23b37f430b96b17f21dda366f177a878d2bc5b8") )
(52593, uint256S("0x81178e9940fb4ecfb3c754ea6090efb468f8fab81fac861fec09054c6c2a7064") )	(66453, uint256S("0xb1ca406e3ace0c35c986ea8edb9ca4388436fd3e25e73f354e0d28286b5b3979") )	(220904, uint256S("0xb6f1e14d3964958503e2731332e4724aead01474076d50434b216b21dc3f4b27") )
(242477, uint256S("0xa71f84f9012ab622484fad63fff0b72244a6f6a343af30c3e86650e1534bf71c"))
    ;
// BIP30 exceptions for (testNet)
static std::map<int, uint256> BIP30ExceptionsRegTestNet =
    boost::assign::map_list_of
(0, uint256S("0x0000000000000000000000000000000000000000000000000000000000000000"))
    ;

#define MICRO 0.000001
#define MILLI 0.001

/**
 * An extra transaction can be added to a package, as long as it only has one
 * ancestor and is no larger than this. Not really any reason to make this
 * configurable as it doesn't materially change DoS parameters.
 */
static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;
/** Maximum kilobytes for transactions to store for processing during reorg */
static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;
/** Time to wait between writing blocks/block index to disk. */
static constexpr std::chrono::hours DATABASE_WRITE_INTERVAL{1};
/** Time to wait between flushing chainstate to disk. */
static constexpr std::chrono::hours DATABASE_FLUSH_INTERVAL{24};
/** Maximum age of our tip for us to be considered current for fee estimation */
static constexpr std::chrono::hours MAX_FEE_ESTIMATION_TIP_AGE{3};
const std::vector<std::string> CHECKLEVEL_DOC {
    "level 0 reads the blocks from disk",
    "level 1 verifies block validity",
    "level 2 verifies undo data",
    "level 3 checks disconnection of tip blocks",
    "level 4 tries to reconnect the blocks",
    "each level includes the checks of the previous levels",
};

bool CBlockIndexWorkComparator::operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {
    // First sort by most total work, ...
    if (pa->nChainWork > pb->nChainWork) return false;
    if (pa->nChainWork < pb->nChainWork) return true;

    // ... then by earliest time received, ...
    if (pa->nSequenceId < pb->nSequenceId) return false;
    if (pa->nSequenceId > pb->nSequenceId) return true;

    // Use pointer address as tie breaker (should only happen with blocks
    // loaded from disk, as those all have id 0).
    if (pa < pb) return false;
    if (pa > pb) return true;

    // Identical blocks.
    return false;
}

/**
 * Mutex to guard access to validation specific variables, such as reading
 * or changing the chainstate.
 *
 * This may also need to be locked when updating the transaction pool, e.g. on
 * AcceptToMemoryPool. See CTxMemPool::cs comment for details.
 *
 * The transaction pool has a separate lock to allow reading from it and the
 * chainstate at the same time.
 */
RecursiveMutex cs_main;

CBlockIndex *pindexBestHeader = nullptr;
Mutex g_best_block_mutex;
std::condition_variable g_best_block_cv;
uint256 g_best_block;
bool g_parallel_script_checks{false};
bool fRequireStandard = true;
bool fCheckBlockIndex = false;
bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;
int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;

uint256 hashAssumeValid;
arith_uint256 nMinimumChainWork;


CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);

// Internal stuff
namespace {
    CBlockIndex* pindexBestInvalid = nullptr;
} // namespace

// Internal stuff from blockstorage ...
extern RecursiveMutex cs_LastBlockFile;
extern std::vector<CBlockFileInfo> vinfoBlockFile;
extern int nLastBlockFile;
extern bool fCheckForPruning;
extern std::set<CBlockIndex*> setDirtyBlockIndex;
extern std::set<int> setDirtyFileInfo;
void FlushBlockFile(bool fFinalize = false, bool finalize_undo = false);
// ... TODO move fully to blockstorage

CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash) const
{
    AssertLockHeld(cs_main);
    BlockMap::const_iterator it = m_block_index.find(hash);
    return it == m_block_index.end() ? nullptr : it->second;
}

CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)
{
    AssertLockHeld(cs_main);

    // Find the latest block common to locator and chain - we expect that
    // locator.vHave is sorted descending by height.
    for (const uint256& hash : locator.vHave) {
        CBlockIndex* pindex = LookupBlockIndex(hash);
        if (pindex) {
            if (chain.Contains(pindex))
                return pindex;
            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {
                return chain.Tip();
            }
        }
    }
    return chain.Genesis();
}

std::unique_ptr<CBlockTreeDB> pblocktree;

namespace particl {
    std::map<COutPoint, uint256> mapStakeSeen;
    std::list<COutPoint> listStakeSeen;
    static constexpr size_t MAX_STAKE_SEEN_SIZE = 1000;


} // namespace particl

extern bool AddNodeHeader(NodeId node_id, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);
extern void RemoveNodeHeader(const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);
extern void RemoveNonReceivedHeaderFromNodes(BlockMap::iterator mi) EXCLUSIVE_LOCKS_REQUIRED(cs_main);


bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,
                       const CCoinsViewCache& inputs, unsigned int flags, bool cacheSigStore,
                       bool cacheFullScriptStore, PrecomputedTransactionData& txdata,
                       std::vector<CScriptCheck>* pvChecks = nullptr)
                       EXCLUSIVE_LOCKS_REQUIRED(cs_main);

bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)
{
    AssertLockHeld(cs_main);
    assert(active_chain_tip); // TODO: Make active_chain_tip a reference

    // By convention a negative value for flags indicates that the
    // current network-enforced consensus rules should be used. In
    // a future soft-fork scenario that would mean checking which
    // rules would be enforced for the next block and setting the
    // appropriate flags. At the present time no soft-forks are
    // scheduled, so no flags are set.
    flags = std::max(flags, 0);

    // CheckFinalTx() uses active_chain_tip.Height()+1 to evaluate
    // nLockTime because when IsFinalTx() is called within
    // CBlock::AcceptBlock(), the height of the block *being*
    // evaluated is what is used. Thus if we want to know if a
    // transaction can be part of the *next* block, we need to call
    // IsFinalTx() with one more than active_chain_tip.Height().
    const int nBlockHeight = active_chain_tip->nHeight + 1;

    // BIP113 requires that time-locked transactions have nLockTime set to
    // less than the median time of the previous block they're contained in.
    // When the next block is created its previous block will be the current
    // chain tip, so we use that to calculate the median time passed to
    // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.
    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)
                             ? active_chain_tip->GetMedianTimePast()
                             : GetAdjustedTime();

    return IsFinalTx(tx, nBlockHeight, nBlockTime);
}


bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)
{
    AssertLockHeld(cs_main);
    assert(lp);
    // If there are relative lock times then the maxInputBlock will be set
    // If there are no relative lock times, the LockPoints don't depend on the chain
    if (lp->maxInputBlock) {
        // Check whether ::ChainActive() is an extension of the block at which the LockPoints
        // calculation was valid.  If not LockPoints are no longer valid
        if (!active_chain.Contains(lp->maxInputBlock)) {
            return false;
        }
    }

    // LockPoints still valid
    return true;
}

bool CheckSequenceLocks(CBlockIndex* tip,
                        const CCoinsView& coins_view,
                        const CTransaction& tx,
                        int flags,
                        LockPoints* lp,
                        bool useExistingLockPoints)
{
    assert(tip != nullptr);

    CBlockIndex index;
    index.pprev = tip;
    // CheckSequenceLocks() uses active_chainstate.m_chain.Height()+1 to evaluate
    // height based locks because when SequenceLocks() is called within
    // ConnectBlock(), the height of the block *being*
    // evaluated is what is used.
    // Thus if we want to know if a transaction can be part of the
    // *next* block, we need to use one more than active_chainstate.m_chain.Height()
    index.nHeight = tip->nHeight + 1;

    std::pair<int, int64_t> lockPair;
    if (useExistingLockPoints) {
        assert(lp);
        lockPair.first = lp->height;
        lockPair.second = lp->time;
    }
    else {
        std::vector<int> prevheights;
        prevheights.resize(tx.vin.size());
        for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {
            const CTxIn& txin = tx.vin[txinIndex];
            Coin coin;
            if (!coins_view.GetCoin(txin.prevout, coin)) {
                return error("%s: Missing input", __func__);
            }
            if (coin.nHeight == MEMPOOL_HEIGHT) {
                // Assume all mempool transaction confirm in the next block
                prevheights[txinIndex] = tip->nHeight + 1;
            } else {
                prevheights[txinIndex] = coin.nHeight;
            }
        }
        lockPair = CalculateSequenceLocks(tx, flags, prevheights, index);
        if (lp) {
            lp->height = lockPair.first;
            lp->time = lockPair.second;
            // Also store the hash of the block with the highest height of
            // all the blocks which have sequence locked prevouts.
            // This hash needs to still be on the chain
            // for these LockPoint calculations to be valid
            // Note: It is impossible to correctly calculate a maxInputBlock
            // if any of the sequence locked inputs depend on unconfirmed txs,
            // except in the special case where the relative lock time/height
            // is 0, which is equivalent to no sequence lock. Since we assume
            // input height of tip+1 for mempool txs and test the resulting
            // lockPair from CalculateSequenceLocks against tip+1.  We know
            // EvaluateSequenceLocks will fail if there was a non-zero sequence
            // lock on a mempool input, so we can use the return value of
            // CheckSequenceLocks to indicate the LockPoints validity
            int maxInputHeight = 0;
            for (const int height : prevheights) {
                // Can ignore mempool inputs since we'll fail if they had non-zero locks
                if (height != tip->nHeight+1) {
                    maxInputHeight = std::max(maxInputHeight, height);
                }
            }
            lp->maxInputBlock = tip->GetAncestor(maxInputHeight);
        }
    }
    return EvaluateSequenceLocks(index, lockPair);
}

// Returns the script flags which should be checked for a given block
static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);

static void LimitMempoolSize(CTxMemPool& pool, CCoinsViewCache& coins_cache, size_t limit, std::chrono::seconds age)
    EXCLUSIVE_LOCKS_REQUIRED(pool.cs, ::cs_main)
{
    int expired = pool.Expire(GetTime<std::chrono::seconds>() - age);
    if (expired != 0) {
        LogPrint(BCLog::MEMPOOL, "Expired %i transactions from the memory pool\n", expired);
    }

    std::vector<COutPoint> vNoSpendsRemaining;
    pool.TrimToSize(limit, &vNoSpendsRemaining);
    for (const COutPoint& removed : vNoSpendsRemaining)
        coins_cache.Uncache(removed);
}

static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_LOCKS_REQUIRED(cs_main)
{
    AssertLockHeld(cs_main);
    if (active_chainstate.IsInitialBlockDownload())
        return false;
    if (active_chainstate.m_chain.Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))
        return false;
    if (active_chainstate.m_chain.Height() < pindexBestHeader->nHeight - 1)
        return false;
    return true;
}

void CChainState::MaybeUpdateMempoolForReorg(
    DisconnectedBlockTransactions& disconnectpool,
    bool fAddToMempool)
{
    if (!m_mempool) return;

    AssertLockHeld(cs_main);
    AssertLockHeld(m_mempool->cs);
    std::vector<uint256> vHashUpdate;
    // disconnectpool's insertion_order index sorts the entries from
    // oldest to newest, but the oldest entry will be the last tx from the
    // latest mined block that was disconnected.
    // Iterate disconnectpool in reverse, so that we add transactions
    // back to the mempool starting with the earliest transaction that had
    // been previously seen in a block.
    auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();
    while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {
        // ignore validation errors in resurrected transactions
        if (!fAddToMempool || (*it)->IsCoinBase() || (*it)->IsCoinStake() ||
            AcceptToMemoryPool(
                *this, *m_mempool, *it, true /* bypass_limits */).m_result_type !=
                    MempoolAcceptResult::ResultType::VALID) {
            // If the transaction doesn't make it in to the mempool, remove any
            // transactions that depend on it (which would now be orphans).
            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);
        } else if (m_mempool->exists((*it)->GetHash())) {
            vHashUpdate.push_back((*it)->GetHash());
        }
        ++it;
    }
    disconnectpool.queuedTx.clear();
    // AcceptToMemoryPool/addUnchecked all assume that new mempool entries have
    // no in-mempool children, which is generally not true when adding
    // previously-confirmed transactions back to the mempool.
    // UpdateTransactionsFromBlock finds descendants of any transactions in
    // the disconnectpool that were added back and cleans up the mempool state.
    m_mempool->UpdateTransactionsFromBlock(vHashUpdate);

    // We also need to remove any now-immature transactions
    m_mempool->removeForReorg(*this, STANDARD_LOCKTIME_VERIFY_FLAGS);
    // Re-limit mempool size, in case we added any transactions
    LimitMempoolSize(
        *m_mempool,
        this->CoinsTip(),
        gArgs.GetArg("-maxmempool", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,
        std::chrono::hours{gArgs.GetArg("-mempoolexpiry", DEFAULT_MEMPOOL_EXPIRY)});
}

/**
* Checks to avoid mempool polluting consensus critical paths since cached
* signature and script validity results will be reused if we validate this
* transaction again during block validation.
* */
static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state,
                const CCoinsViewCache& view, const CTxMemPool& pool,
                unsigned int flags, PrecomputedTransactionData& txdata, CCoinsViewCache& coins_tip)
                EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)
{
    AssertLockHeld(cs_main);
    AssertLockHeld(pool.cs);

    assert(!tx.IsCoinBase() && !tx.IsCoinStake());
    for (const CTxIn& txin : tx.vin) {
        const Coin& coin = view.AccessCoin(txin.prevout);

        // This coin was checked in PreChecks and MemPoolAccept
        // has been holding cs_main since then.
        Assume(!coin.IsSpent());
        if (coin.IsSpent()) return false;

        // If the Coin is available, there are 2 possibilities:
        // it is available in our current ChainstateActive UTXO set,
        // or it's a UTXO provided by a transaction in our mempool.
        // Ensure the scriptPubKeys in Coins from CoinsView are correct.
        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);
        if (txFrom) {
            assert(txFrom->GetHash() == txin.prevout.hash);
            assert(txFrom->vout.size() > txin.prevout.n);
            assert(txFrom->vout[txin.prevout.n] == coin.out);
        } else {
            const Coin& coinFromUTXOSet = coins_tip.AccessCoin(txin.prevout);
            assert(!coinFromUTXOSet.IsSpent());
            assert(coinFromUTXOSet.out == coin.out);
        }
    }

    // Call CheckInputScripts() to cache signature and script validity against current tip consensus rules.
    return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);
}

namespace {

class MemPoolAccept
{
public:
    explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),
        m_limit_ancestors(gArgs.GetArg("-limitancestorcount", DEFAULT_ANCESTOR_LIMIT)),
        m_limit_ancestor_size(gArgs.GetArg("-limitancestorsize", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),
        m_limit_descendants(gArgs.GetArg("-limitdescendantcount", DEFAULT_DESCENDANT_LIMIT)),
        m_limit_descendant_size(gArgs.GetArg("-limitdescendantsize", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {
    }

    // We put the arguments we're handed into a struct, so we can pass them
    // around easier.
    struct ATMPArgs {
        const CChainParams& m_chainparams;
        const int64_t m_accept_time;
        const bool m_bypass_limits;
        /*
         * Return any outpoints which were not previously present in the coins
         * cache, but were added as a result of validating the tx for mempool
         * acceptance. This allows the caller to optionally remove the cache
         * additions if the associated transaction ends up being rejected by
         * the mempool.
         */
        std::vector<COutPoint>& m_coins_to_uncache;
        const bool m_test_accept;
        /** Whether we allow transactions to replace mempool transactions by BIP125 rules. If false,
         * any transaction spending the same inputs as a transaction in the mempool is considered
         * a conflict. */
        const bool m_allow_bip125_replacement{true};
    };

    // Single transaction acceptance
    MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);

    /**
    * Multiple transaction acceptance. Transactions may or may not be interdependent,
    * but must not conflict with each other. Parents must come before children if any
    * dependencies exist.
    */
    PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);

private:
    // All the intermediate state that gets passed between the various levels
    // of checking a given transaction.
    struct Workspace {
        explicit Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}
        std::set<uint256> m_conflicts;
        CTxMemPool::setEntries m_all_conflicting;
        CTxMemPool::setEntries m_ancestors;
        std::unique_ptr<CTxMemPoolEntry> m_entry;
        std::list<CTransactionRef> m_replaced_transactions;

        bool m_replacement_transaction;
        CAmount m_base_fees;
        CAmount m_modified_fees;
        CAmount m_conflicting_fees;
        size_t m_conflicting_size;

        const CTransactionRef& m_ptx;
        const uint256& m_hash;
        TxValidationState m_state;
    };

    // Run the policy checks on a given transaction, excluding any script checks.
    // Looks up inputs, calculates feerate, considers replacement, evaluates
    // package limits, etc. As this function can be invoked for "free" by a peer,
    // only tests that are fast should be done here (to avoid CPU DoS).
    bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);

    // Run the script checks using our policy flags. As this can be slow, we should
    // only invoke this on transactions that have otherwise passed policy checks.
    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);

    // Re-run the script checks, using consensus flags, and try to cache the
    // result in the scriptcache. This should be done after
    // PolicyScriptChecks(). This requires that all inputs either be in our
    // utxo set or in the mempool.
    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);

    // Try to add the transaction to the mempool, removing any conflicts first.
    // Returns true if the transaction is in the mempool after any size
    // limiting is performed, false otherwise.
    bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);

    // Compare a package's feerate against minimum allowed.
    bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)
    {
        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg("-maxmempool", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);
        if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "mempool min fee not met", strprintf("%d < %d", package_fee, mempoolRejectFee));
        }

        if (package_fee < ::minRelayTxFee.GetFee(package_size)) {
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "min relay fee not met", strprintf("%d < %d", package_fee, ::minRelayTxFee.GetFee(package_size)));
        }
        return true;
    }

private:
    CTxMemPool& m_pool;
    CCoinsViewCache m_view;
    CCoinsViewMemPool m_viewmempool;
    CCoinsView m_dummy;

    CChainState& m_active_chainstate;

    // The package limits in effect at the time of invocation.
    const size_t m_limit_ancestors;
    const size_t m_limit_ancestor_size;
    // These may be modified while evaluating a transaction (eg to account for
    // in-mempool conflicts; see below).
    size_t m_limit_descendants;
    size_t m_limit_descendant_size;
};

bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)
{
    const CTransactionRef& ptx = ws.m_ptx;
    const CTransaction& tx = *ws.m_ptx;
    const uint256& hash = ws.m_hash;

    // Copy/alias what we need out of args
    const int64_t nAcceptTime = args.m_accept_time;
    const bool bypass_limits = args.m_bypass_limits;
    std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;

    // Alias what we need out of ws
    TxValidationState& state = ws.m_state;
    std::set<uint256>& setConflicts = ws.m_conflicts;
    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;
    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;
    std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;
    bool& fReplacementTransaction = ws.m_replacement_transaction;
    CAmount& nModifiedFees = ws.m_modified_fees;
    CAmount& nConflictingFees = ws.m_conflicting_fees;
    size_t& nConflictingSize = ws.m_conflicting_size;

    if (!CheckTransaction(tx, state)) {
        return false; // state filled in by CheckTransaction
    }

    // Coinbase/coinstake is only valid in a block, not as a loose transaction
    if (tx.IsCoinBase() || tx.IsCoinStake())
        return state.Invalid(TxValidationResult::TX_CONSENSUS, "coinbase/coinstake");

    // PoS: refuse transactions with pre-PoS versions
    if(m_active_chainstate.m_chain.Tip()->nHeight >= args.m_chainparams.GetConsensus().nLastPowHeight && tx.nVersion <= POW_TX_VERSION)
        return state.Invalid(TxValidationResult::TX_CONSENSUS, "tx with pre-PoS version");

    if (tx.nVersion > 1 && (int64_t)tx.nTime > GetAdjustedTime()){
        return state.Invalid(TxValidationResult::TX_CONSENSUS, "bad-tx-transaction-timestamp-in-future");
    }

    // enforce transaction version 3
    if (m_active_chainstate.m_chain.Tip()->nHeight >= args.m_chainparams.GetConsensus().nLastPowHeight && (IsProtocolV00(tx.nTime) ? 3 : 1) > tx.nVersion){
        return state.Invalid(TxValidationResult::TX_CONSENSUS, "bad-tx-mp-transaction-version");
    }

    // Rather not work on nonstandard transactions (unless -testnet/-regtest)
    std::string reason;
    if (fRequireStandard && !IsStandardTx(tx, reason))
        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, reason);

    // Do not work on transactions that are too small.
    // A transaction with 1 segwit input and 1 P2WPHK output has non-witness size of 82 bytes.
    // Transactions smaller than this are not relayed to mitigate CVE-2017-12842 by not relaying
    // 64-byte transactions.
    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) < MIN_STANDARD_TX_NONWITNESS_SIZE)
        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, "tx-size-small");

    // Only accept nLockTime-using transactions that can be mined in the next
    // block; we don't want our mempool filled up with transactions that can't
    // be mined yet.
    if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))
        return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, "non-final");

    if (m_pool.exists(GenTxid(true, tx.GetWitnessHash()))) {
        // Exact transaction already exists in the mempool.
        return state.Invalid(TxValidationResult::TX_CONFLICT, "txn-already-in-mempool");
    } else if (m_pool.exists(GenTxid(false, tx.GetHash()))) {
        // Transaction with the same non-witness data but different witness (same txid, different
        // wtxid) already exists in the mempool.
        return state.Invalid(TxValidationResult::TX_CONFLICT, "txn-same-nonwitness-data-in-mempool");
    }

    // Check for conflicts with in-memory transactions
    for (const CTxIn &txin : tx.vin)
    {
        const CTransaction* ptxConflicting = m_pool.GetConflictTx(txin.prevout);
        if (ptxConflicting) {
            if (!args.m_allow_bip125_replacement) {
                // Transaction conflicts with a mempool tx, but we're not allowing replacements.
                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "bip125-replacement-disallowed");
            }
            if (!setConflicts.count(ptxConflicting->GetHash()))
            {
                // Allow opt-out of transaction replacement by setting
                // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.
                //
                // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by
                // non-replaceable transactions. All inputs rather than just one
                // is for the sake of multi-party protocols, where we don't
                // want a single party to be able to disable replacement.
                //
                // Transactions that don't explicitly signal replaceability are
                // *not* replaceable with the current logic, even if one of their
                // unconfirmed ancestors signals replaceability. This diverges
                // from BIP125's inherited signaling description (see CVE-2021-31876).
                // Applications relying on first-seen mempool behavior should
                // check all unconfirmed ancestors; otherwise an opt-in ancestor
                // might be replaced, causing removal of this descendant.
                bool fReplacementOptOut = true;
                for (const CTxIn &_txin : ptxConflicting->vin)
                {
                    if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE)
                    {
                        fReplacementOptOut = false;
                        break;
                    }
                }
                if (fReplacementOptOut) {
                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "txn-mempool-conflict");
                }

                setConflicts.insert(ptxConflicting->GetHash());
            }
        }
    }

    LockPoints lp;
    m_view.SetBackend(m_viewmempool);

    const CCoinsViewCache& coins_cache = m_active_chainstate.CoinsTip();
    // do all inputs exist?
    for (const CTxIn& txin : tx.vin) {
        if (!coins_cache.HaveCoinInCache(txin.prevout)) {
            coins_to_uncache.push_back(txin.prevout);
        }

        // Note: this call may add txin.prevout to the coins cache
        // (coins_cache.cacheCoins) by way of FetchCoin(). It should be removed
        // later (via coins_to_uncache) if this tx turns out to be invalid.
        if (!m_view.HaveCoin(txin.prevout)) {
            // Are inputs missing because we already have the tx?
            for (size_t out = 0; out < tx.vout.size(); out++) {
                // Optimistically just do efficient check of cache for outputs
                if (coins_cache.HaveCoinInCache(COutPoint(hash, out))) {
                    return state.Invalid(TxValidationResult::TX_CONFLICT, "txn-already-known");
                }
            }
            // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet
            return state.Invalid(TxValidationResult::TX_MISSING_INPUTS, "bad-txns-inputs-missingorspent");
        }
    }

    // This is const, but calls into the back end CoinsViews. The CCoinsViewDB at the bottom of the
    // hierarchy brings the best block into scope. See CCoinsViewDB::GetBestBlock().
    m_view.GetBestBlock();

    // we have all inputs cached now, so switch back to dummy (to protect
    // against bugs where we pull more inputs from disk that miss being added
    // to coins_to_uncache)
    m_view.SetBackend(m_dummy);

    // Only accept BIP68 sequence locked transactions that can be mined in the next
    // block; we don't want our mempool filled up with transactions that can't
    // be mined yet.
    // Pass in m_view which has all of the relevant inputs cached. Note that, since m_view's
    // backend was removed, it no longer pulls coins from the mempool.
    if (!CheckSequenceLocks(m_active_chainstate.m_chain.Tip(), m_view, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))
        return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, "non-BIP68-final");

    if (!Consensus::CheckTxInputs(tx, state, m_view, m_active_chainstate.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {
        return false; // state filled in by CheckTxInputs
    }

    // Check for non-standard pay-to-script-hash in inputs
    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);
    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {
        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, "bad-txns-nonstandard-inputs");
    }

    // Check for non-standard witnesses.
    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view))
        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, "bad-witness-nonstandard");

    int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);

    // nModifiedFees includes any fee deltas from PrioritiseTransaction
    nModifiedFees = ws.m_base_fees;
    m_pool.ApplyDelta(hash, nModifiedFees);

    // Keep track of transactions that spend a coinbase, which we re-scan
    // during reorgs to ensure COINBASE_MATURITY is still met.
    bool fSpendsCoinbase = false;
    for (const CTxIn &txin : tx.vin) {
        const Coin &coin = m_view.AccessCoin(txin.prevout);
        if (coin.IsCoinBase() || coin.IsCoinStake()) {
            fSpendsCoinbase = true;
            break;
        }
    }

    entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, m_active_chainstate.m_chain.Height(),
            fSpendsCoinbase, nSigOpsCost, lp));
    unsigned int nSize = entry->GetTxSize();

    if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)
        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, "bad-txns-too-many-sigops",
                strprintf("%d", nSigOpsCost));

    // No transactions are allowed below minRelayTxFee except from disconnected
    // blocks
    if (!bypass_limits && !CheckFeeRate(nSize, nModifiedFees, state)) return false;

    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(setConflicts);
    // Calculate in-mempool ancestors, up to a limit.
    if (setConflicts.size() == 1) {
        // In general, when we receive an RBF transaction with mempool conflicts, we want to know whether we
        // would meet the chain limits after the conflicts have been removed. However, there isn't a practical
        // way to do this short of calculating the ancestor and descendant sets with an overlay cache of
        // changed mempool entries. Due to both implementation and runtime complexity concerns, this isn't
        // very realistic, thus we only ensure a limited set of transactions are RBF'able despite mempool
        // conflicts here. Importantly, we need to ensure that some transactions which were accepted using
        // the below carve-out are able to be RBF'ed, without impacting the security the carve-out provides
        // for off-chain contract systems (see link in the comment below).
        //
        // Specifically, the subset of RBF transactions which we allow despite chain limits are those which
        // conflict directly with exactly one other transaction (but may evict children of said transaction),
        // and which are not adding any new mempool dependencies. Note that the "no new mempool dependencies"
        // check is accomplished later, so we don't bother doing anything about it here, but if BIP 125 is
        // amended, we may need to move that check to here instead of removing it wholesale.
        //
        // Such transactions are clearly not merging any existing packages, so we are only concerned with
        // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are
        // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed
        // to.
        //
        // To check these we first check if we meet the RBF criteria, above, and increment the descendant
        // limits by the direct conflict and its descendants (as these are recalculated in
        // CalculateMempoolAncestors by assuming the new transaction being added is a new descendant, with no
        // removals, of each parent's existing dependent set). The ancestor count limits are unmodified (as
        // the ancestor limits should be the same for both our new transaction and any conflicts).
        // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes
        // into force here (as we're only adding a single transaction).
        assert(setIterConflicting.size() == 1);
        CTxMemPool::txiter conflict = *setIterConflicting.begin();

        m_limit_descendants += 1;
        m_limit_descendant_size += conflict->GetSizeWithDescendants();
    }

    std::string errString;
    if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {
        setAncestors.clear();
        // If CalculateMemPoolAncestors fails second time, we want the original error string.
        std::string dummy_err_string;
        // Contracting/payment channels CPFP carve-out:
        // If the new transaction is relatively small (up to 40k weight)
        // and has at most one ancestor (ie ancestor limit of 2, including
        // the new transaction), allow it if its parent has exactly the
        // descendant limit descendants.
        //
        // This allows protocols which rely on distrusting counterparties
        // being able to broadcast descendants of an unconfirmed transaction
        // to be secure by simply only having two immediately-spendable
        // outputs - one for each counterparty. For more info on the uses for
        // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html
        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||
                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "too-long-mempool-chain", errString);
        }
    }

    // A transaction that spends outputs that would be replaced by it is invalid. Now
    // that we have the set of all ancestors we can detect this
    // pathological case by making sure setConflicts and setAncestors don't
    // intersect.
    for (CTxMemPool::txiter ancestorIt : setAncestors)
    {
        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();
        if (setConflicts.count(hashAncestor))
        {
            return state.Invalid(TxValidationResult::TX_CONSENSUS, "bad-txns-spends-conflicting-tx",
                    strprintf("%s spends conflicting transaction %s",
                        hash.ToString(),
                        hashAncestor.ToString()));
        }
    }

    // Check if it's economically rational to mine this transaction rather
    // than the ones it replaces.
    nConflictingFees = 0;
    nConflictingSize = 0;
    uint64_t nConflictingCount = 0;

    // If we don't hold the lock allConflicting might be incomplete; the
    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee
    // mempool consistency for us.
    fReplacementTransaction = setConflicts.size();
    if (fReplacementTransaction)
    {
        CFeeRate newFeeRate(nModifiedFees, nSize);
        std::set<uint256> setConflictsParents;
        const int maxDescendantsToVisit = 100;
        for (const auto& mi : setIterConflicting) {
            // Don't allow the replacement to reduce the feerate of the
            // mempool.
            //
            // We usually don't want to accept replacements with lower
            // feerates than what they replaced as that would lower the
            // feerate of the next block. Requiring that the feerate always
            // be increased is also an easy-to-reason about way to prevent
            // DoS attacks via replacements.
            //
            // We only consider the feerates of transactions being directly
            // replaced, not their indirect descendants. While that does
            // mean high feerate children are ignored when deciding whether
            // or not to replace, we do require the replacement to pay more
            // overall fees too, mitigating most cases.
            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());
            if (newFeeRate <= oldFeeRate)
            {
                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "insufficient fee",
                        strprintf("rejecting replacement %s; new feerate %s <= old feerate %s",
                            hash.ToString(),
                            newFeeRate.ToString(),
                            oldFeeRate.ToString()));
            }

            for (const CTxIn &txin : mi->GetTx().vin)
            {
                setConflictsParents.insert(txin.prevout.hash);
            }

            nConflictingCount += mi->GetCountWithDescendants();
        }
        // This potentially overestimates the number of actual descendants
        // but we just want to be conservative to avoid doing too much
        // work.
        if (nConflictingCount <= maxDescendantsToVisit) {
            // If not too many to replace, then calculate the set of
            // transactions that would have to be evicted
            for (CTxMemPool::txiter it : setIterConflicting) {
                m_pool.CalculateDescendants(it, allConflicting);
            }
            for (CTxMemPool::txiter it : allConflicting) {
                nConflictingFees += it->GetModifiedFee();
                nConflictingSize += it->GetTxSize();
            }
        } else {
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "too many potential replacements",
                    strprintf("rejecting replacement %s; too many potential replacements (%d > %d)\n",
                        hash.ToString(),
                        nConflictingCount,
                        maxDescendantsToVisit));
        }

        for (unsigned int j = 0; j < tx.vin.size(); j++)
        {
            // We don't want to accept replacements that require low
            // feerate junk to be mined first. Ideally we'd keep track of
            // the ancestor feerates and make the decision based on that,
            // but for now requiring all new inputs to be confirmed works.
            //
            // Note that if you relax this to make RBF a little more useful,
            // this may break the CalculateMempoolAncestors RBF relaxation,
            // above. See the comment above the first CalculateMempoolAncestors
            // call for more info.
            if (!setConflictsParents.count(tx.vin[j].prevout.hash))
            {
                // Rather than check the UTXO set - potentially expensive -
                // it's cheaper to just check if the new input refers to a
                // tx that's in the mempool.
                if (m_pool.exists(tx.vin[j].prevout.hash)) {
                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "replacement-adds-unconfirmed",
                            strprintf("replacement %s adds unconfirmed input, idx %d",
                                hash.ToString(), j));
                }
            }
        }

        // The replacement must pay greater fees than the transactions it
        // replaces - if we did the bandwidth used by those conflicting
        // transactions would not be paid for.
        if (nModifiedFees < nConflictingFees)
        {
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "insufficient fee",
                    strprintf("rejecting replacement %s, less fees than conflicting txs; %s < %s",
                        hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));
        }

        // Finally in addition to paying more fees than the conflicts the
        // new transaction must pay for its own bandwidth.
        CAmount nDeltaFees = nModifiedFees - nConflictingFees;
        if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))
        {
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "insufficient fee",
                    strprintf("rejecting replacement %s, not enough additional fees to relay; %s < %s",
                        hash.ToString(),
                        FormatMoney(nDeltaFees),
                        FormatMoney(::incrementalRelayFee.GetFee(nSize))));
        }
    }
    return true;
}

bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)
{
    const CTransaction& tx = *ws.m_ptx;
    TxValidationState& state = ws.m_state;

    constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;

    // Check input scripts and signatures.
    // This is done last to help prevent CPU exhaustion denial-of-service attacks.
    if (!CheckInputScripts(tx, state, m_view, scriptVerifyFlags, true, false, txdata)) {
        // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we
        // need to turn both off, and compare against just turning off CLEANSTACK
        // to see if the failure is specifically due to witness validation.
        TxValidationState state_dummy; // Want reported failures to be from first CheckInputScripts
        if (!tx.HasWitness() && CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&
                !CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {
            // Only the witness is missing, so the transaction itself may be fine.
            state.Invalid(TxValidationResult::TX_WITNESS_STRIPPED,
                    state.GetRejectReason(), state.GetDebugMessage());
        }
        return false; // state filled in by CheckInputScripts
    }

    return true;
}

bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)
{
    const CTransaction& tx = *ws.m_ptx;
    const uint256& hash = ws.m_hash;
    TxValidationState& state = ws.m_state;
    const CChainParams& chainparams = args.m_chainparams;

    // Check again against the current block tip's script verification
    // flags to cache our script execution flags. This is, of course,
    // useless if the next block has different script flags from the
    // previous one, but because the cache tracks script flags for us it
    // will auto-invalidate and we'll just have a few blocks of extra
    // misses on soft-fork activation.
    //
    // This is also useful in case of bugs in the standard flags that cause
    // transactions to pass as valid when they're actually invalid. For
    // instance the STRICTENC flag was incorrectly allowing certain
    // CHECKSIG NOT scripts to pass, even though they were invalid.
    //
    // There is a similar check in CreateNewBlock() to prevent creating
    // invalid blocks (using TestBlockValidity), however allowing such
    // transactions into the mempool can be exploited as a DoS attack.
    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus());
    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, m_active_chainstate.CoinsTip())) {
        return error("%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s",
                __func__, hash.ToString(), state.ToString());
    }

    return true;
}

bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)
{
    const CTransaction& tx = *ws.m_ptx;
    const uint256& hash = ws.m_hash;
    TxValidationState& state = ws.m_state;
    const bool bypass_limits = args.m_bypass_limits;

    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;
    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;
    const CAmount& nModifiedFees = ws.m_modified_fees;
    const CAmount& nConflictingFees = ws.m_conflicting_fees;
    const size_t& nConflictingSize = ws.m_conflicting_size;
    const bool fReplacementTransaction = ws.m_replacement_transaction;
    std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;

    // Remove conflicting transactions from the mempool
    for (CTxMemPool::txiter it : allConflicting)
    {
        LogPrint(BCLog::MEMPOOL, "replacing tx %s with %s for %s additional fees, %d delta bytes\n",
                it->GetTx().GetHash().ToString(),
                hash.ToString(),
                FormatMoney(nModifiedFees - nConflictingFees),
                (int)entry->GetTxSize() - (int)nConflictingSize);
        ws.m_replaced_transactions.push_back(it->GetSharedTx());
    }
    m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);

    // This transaction should only count for fee estimation if:
    // - it isn't a BIP 125 replacement transaction (may not be widely supported)
    // - it's not being re-added during a reorg which bypasses typical mempool fee limits
    // - the node is not behind
    // - the transaction is not dependent on any other transactions in the mempool
    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);

    // Store transaction in memory
    m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);

    // trim mempool and check if tx was trimmed
    if (!bypass_limits) {
        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg("-maxmempool", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg("-mempoolexpiry", DEFAULT_MEMPOOL_EXPIRY)});
        if (!m_pool.exists(hash))
            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, "mempool full");
    }
    return true;
}

MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)
{
    AssertLockHeld(cs_main);
    LOCK(m_pool.cs); // mempool "read lock" (held through GetMainSignals().TransactionAddedToMempool())

    Workspace ws(ptx);

    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);

    // Only compute the precomputed transaction data if we need to verify
    // scripts (ie, other policy checks pass). We perform the inexpensive
    // checks first and avoid hashing and signature verification unless those
    // checks pass, to mitigate CPU exhaustion denial-of-service attacks.
    PrecomputedTransactionData txdata;

    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);

    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);

    // Tx was accepted, but not added
    if (args.m_test_accept) {
        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);
    }

    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);

    GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());

    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);
}

PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)
{
    AssertLockHeld(cs_main);

    // These context-free package limits can be done before taking the mempool lock.
    PackageValidationState package_state;
    if (!CheckPackage(txns, package_state)) return PackageMempoolAcceptResult(package_state, {});

    std::vector<Workspace> workspaces{};
    workspaces.reserve(txns.size());
    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),
                   [](const auto& tx) { return Workspace(tx); });
    std::map<const uint256, const MempoolAcceptResult> results;

    LOCK(m_pool.cs);

    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.
    for (Workspace& ws : workspaces) {
        if (!PreChecks(args, ws)) {
            package_state.Invalid(PackageValidationResult::PCKG_TX, "transaction failed");
            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.
            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));
            return PackageMempoolAcceptResult(package_state, std::move(results));
        }
        // Make the coins created by this transaction available for subsequent transactions in the
        // package to spend. Since we already checked conflicts in the package and we don't allow
        // replacements, we don't need to track the coins spent. Note that this logic will need to be
        // updated if package replace-by-fee is allowed in the future.
        assert(!args.m_allow_bip125_replacement);
        m_viewmempool.PackageAddTransaction(ws.m_ptx);
    }

    for (Workspace& ws : workspaces) {
        PrecomputedTransactionData txdata;
        if (!PolicyScriptChecks(args, ws, txdata)) {
            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.
            package_state.Invalid(PackageValidationResult::PCKG_TX, "transaction failed");
            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));
            return PackageMempoolAcceptResult(package_state, std::move(results));
        }
        if (args.m_test_accept) {
            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are
            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).
            results.emplace(ws.m_ptx->GetWitnessHash(),
                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));
        }
    }

    return PackageMempoolAcceptResult(package_state, std::move(results));
}

} // anon namespace

/** (try to) add transaction to memory pool with a specified acceptance time **/
static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,
                                                      CChainState& active_chainstate,
                                                      const CTransactionRef &tx, int64_t nAcceptTime,
                                                      bool bypass_limits, bool test_accept)
                                                      EXCLUSIVE_LOCKS_REQUIRED(cs_main)
{
    std::vector<COutPoint> coins_to_uncache;
    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,
                                   test_accept, /* m_allow_bip125_replacement */ true };

    const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);
    if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {
        // Remove coins that were not present in the coins cache before calling
        // AcceptSingleTransaction(); this is to prevent memory DoS in case we receive a large
        // number of invalid transactions that attempt to overrun the in-memory coins cache
        // (`CCoinsViewCache::cacheCoins`).

        for (const COutPoint& hashTx : coins_to_uncache)
            active_chainstate.CoinsTip().Uncache(hashTx);
    }
    // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits
    BlockValidationState state_dummy;
    active_chainstate.FlushStateToDisk(state_dummy, FlushStateMode::PERIODIC);
    return result;
}

MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,
                                       bool bypass_limits, bool test_accept)
{
    return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);
}

PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,
                                                   const Package& package, bool test_accept)
{
    AssertLockHeld(cs_main);
    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).
    assert(!package.empty());
    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));

    std::vector<COutPoint> coins_to_uncache;
    const CChainParams& chainparams = Params();
    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,
                                   test_accept, /* m_allow_bip125_replacement */ false };
    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);

    // Uncache coins pertaining to transactions that were not submitted to the mempool.
    for (const COutPoint& hashTx : coins_to_uncache) {
        active_chainstate.CoinsTip().Uncache(hashTx);
    }
    return result;
}

CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)
{
    LOCK(cs_main);

    if (block_index) {
        CBlock block;
        if (ReadBlockFromDisk(block, block_index, consensusParams)) {
            for (const auto& tx : block.vtx) {
                if (tx->GetHash() == hash) {
                    hashBlock = block_index->GetBlockHash();
                    return tx;
                }
            }
        }
        return nullptr;
    }
    if (mempool) {
        CTransactionRef ptx = mempool->get(hash);
        if (ptx) return ptx;
    }
    if (g_txindex) {
        CTransactionRef tx;
        if (g_txindex->FindTx(hash, hashBlock, tx)) return tx;
    }
    return nullptr;
}

CAmount GetBlockValue(int nHeight, const CAmount& nFees)
{
    CAmount nSubsidy;

    //genesis block case
    if(nHeight == 0){
        nSubsidy = 33 * COIN;
        return nSubsidy + nFees;
    }else if(nHeight >= 1 && nHeight <= 2000){
        nSubsidy = 500000 * COIN;
        return nSubsidy + nFees;
    }else if(nHeight >2000){
        return nFees;
    }

    return nFees;
    
}

// Miner's coin stake is rewarded based on coin age spent (coin-days)
CAmount GetProofOfStakeReward(int64_t nCoinAge, const CAmount& nFees)
{
    // some scary rounding dirty trick here for leap / non-leap years
    // CoinAge=365 -> nSubsidy=9993
    // CoinAge=366 -> nSubsidy=10020
    CAmount nSubsidy = 0;

    if (gArgs.GetBoolArg("-printcreation", false))
        LogPrintf("GetProofOfStakeReward(): nSubsidy=%s nCoinAge=%s nFees=%s\n", FormatMoney(nSubsidy).c_str(), nCoinAge, FormatMoney(nFees));

    return nSubsidy + nFees;
}

CAmount GetProofOfStakeReward(int64_t nCoinAge, const CAmount& nFees, double fInflationAdjustment)  //UpdateMe  
{
    // some scary rounding dirty trick here for leap / non-leap years
    // CoinAge=365 -> nSubsidy=9993
    // CoinAge=366 -> nSubsidy=10020
    fInflationAdjustment = 0;
    CAmount nSubsidy = 0 ;

    
    if (gArgs.GetBoolArg("-printcreation", false))
        LogPrintf("GetProofOfStakeReward(): nSubsidy=%s nCoinAge=%s nFees=%s fInflationAdjustment=%s\n", FormatMoney(nSubsidy).c_str(), nCoinAge, FormatMoney(nFees), fInflationAdjustment);


    return nSubsidy + nFees;
}

CAmount GetBlockSubsidy(int nHeight, Consensus::Params const& consensusParams) //UpdateMe  
{
    return GetBlockValue(nHeight, 0);
}

CoinsViews::CoinsViews(
    std::string ldb_name,
    size_t cache_size_bytes,
    bool in_memory,
    bool should_wipe) : m_dbview(
                            gArgs.GetDataDirNet() / ldb_name, cache_size_bytes, in_memory, should_wipe),
                        m_catcherview(&m_dbview) {}

void CoinsViews::InitCache()
{
    m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);
}

CChainState::CChainState(CTxMemPool* mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)
    : m_mempool(mempool),
      m_params(::Params()),
      m_blockman(blockman),
      m_from_snapshot_blockhash(from_snapshot_blockhash) {}

void CChainState::InitCoinsDB(
    size_t cache_size_bytes,
    bool in_memory,
    bool should_wipe,
    std::string leveldb_name)
{
    if (m_from_snapshot_blockhash) {
        leveldb_name += "_" + m_from_snapshot_blockhash->ToString();
    }

    m_coins_views = std::make_unique<CoinsViews>(
        leveldb_name, cache_size_bytes, in_memory, should_wipe);
}

void CChainState::InitCoinsCache(size_t cache_size_bytes)
{
    assert(m_coins_views != nullptr);
    m_coinstip_cache_size_bytes = cache_size_bytes;
    m_coins_views->InitCache();
}

// Note that though this is marked const, we may end up modifying `m_cached_finished_ibd`, which
// is a performance-related implementation detail. This function must be marked
// `const` so that `CValidationInterface` clients (which are given a `const CChainState*`)
// can call it.
//
bool CChainState::IsInitialBlockDownload() const
{
    // Optimization: pre-test latch before taking the lock.
    if (m_cached_finished_ibd.load(std::memory_order_relaxed))
        return false;

    LOCK(cs_main);
    if (m_cached_finished_ibd.load(std::memory_order_relaxed))
        return false;
    if (fImporting || fReindex)
        return true;
    if (m_chain.Tip() == nullptr)
        return true;
    if (m_chain.Tip()->nChainWork < nMinimumChainWork)
        return true;
    if (m_chain.Tip()->GetBlockTime() < (GetTime() - nMaxTipAge))
        return true;
    LogPrintf("Leaving InitialBlockDownload (latching to false)\n");
    m_cached_finished_ibd.store(true, std::memory_order_relaxed);
    return false;
}

static void AlertNotify(const std::string& strMessage)
{
    uiInterface.NotifyAlertChanged();
#if HAVE_SYSTEM
    std::string strCmd = gArgs.GetArg("-alertnotify", "");
    if (strCmd.empty()) return;

    // Alert text should be plain ascii coming from a trusted source, but to
    // be safe we first strip anything not in safeChars, then add single quotes around
    // the whole string before passing it to the shell:
    std::string singleQuote("'");
    std::string safeStatus = SanitizeString(strMessage);
    safeStatus = singleQuote+safeStatus+singleQuote;
    boost::replace_all(strCmd, "%s", safeStatus);

    std::thread t(runCommand, strCmd);
    t.detach(); // thread runs free
#endif
}

void CChainState::CheckForkWarningConditions()
{
    AssertLockHeld(cs_main);

    // Before we get past initial download, we cannot reliably alert about forks
    // (we assume we don't get stuck on a fork before finishing our initial sync)
    if (IsInitialBlockDownload()) {
        return;
    }

    if (pindexBestInvalid && pindexBestInvalid->nChainWork > m_chain.Tip()->nChainWork + (GetBlockProof(*m_chain.Tip()) * 6)) {
        LogPrintf("%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\nChain state database corruption likely.\n", __func__);
        SetfLargeWorkInvalidChainFound(true);
    } else {
        SetfLargeWorkInvalidChainFound(false);
    }
}

// Called both upon regular invalid block discovery *and* InvalidateBlock
void CChainState::InvalidChainFound(CBlockIndex* pindexNew)
{
    if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)
        pindexBestInvalid = pindexNew;
    if (pindexBestHeader != nullptr && pindexBestHeader->GetAncestor(pindexNew->nHeight) == pindexNew) {
        pindexBestHeader = m_chain.Tip();
    }

    LogPrintf("%s: invalid block=%s  height=%d  log2_work=%f  date=%s\n", __func__,
      pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,
      log(pindexNew->nChainWork.getdouble())/log(2.0), FormatISO8601DateTime(pindexNew->GetBlockTime()));
    CBlockIndex *tip = m_chain.Tip();
    assert (tip);
    LogPrintf("%s:  current best=%s  height=%d  log2_work=%f  date=%s\n", __func__,
      tip->GetBlockHash().ToString(), m_chain.Height(), log(tip->nChainWork.getdouble())/log(2.0),
      FormatISO8601DateTime(tip->GetBlockTime()));
    CheckForkWarningConditions();
}

// Same as InvalidChainFound, above, except not called directly from InvalidateBlock,
// which does its own setBlockIndexCandidates management.
void CChainState::InvalidBlockFound(CBlockIndex* pindex, const BlockValidationState& state)
{
    if (state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {
        pindex->nStatus |= BLOCK_FAILED_VALID;
        m_blockman.m_failed_blocks.insert(pindex);
        setDirtyBlockIndex.insert(pindex);
        setBlockIndexCandidates.erase(pindex);
        InvalidChainFound(pindex);
    }
}

void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txundo, int nHeight)
{
    // mark inputs spent
    if (!tx.IsCoinBase()) {
        txundo.vprevout.reserve(tx.vin.size());
        for (const CTxIn &txin : tx.vin) {
            txundo.vprevout.emplace_back();
            bool is_spent = inputs.SpendCoin(txin.prevout, &txundo.vprevout.back());
            assert(is_spent);
        }
    }
    // add outputs
    AddCoins(inputs, tx, nHeight);
}

void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)
{
    CTxUndo txundo;
    UpdateCoins(tx, inputs, txundo, nHeight);
}

bool CScriptCheck::operator()() {
    const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;
    const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;
    return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);
}

int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)
{
    AssertLockHeld(cs_main);
    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());
    return pindexPrev->nHeight + 1;
}


static CuckooCache::cache<uint256, SignatureCacheHasher> g_scriptExecutionCache;
static CSHA256 g_scriptExecutionCacheHasher;

void InitScriptExecutionCache() {
    // Setup the salted hasher
    uint256 nonce = GetRandHash();
    // We want the nonce to be 64 bytes long to force the hasher to process
    // this chunk, which makes later hash computations more efficient. We
    // just write our 32-byte entropy twice to fill the 64 bytes.
    g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);
    g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);
    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,
    // setup_bytes creates the minimum possible cache (2 elements).
    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg("-maxsigcachesize", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);
    size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);
    LogPrintf("Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\n",
            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);
}

/**
 * Check whether all of this transaction's input scripts succeed.
 *
 * This involves ECDSA signature checks so can be computationally intensive. This function should
 * only be called after the cheap sanity checks in CheckTxInputs passed.
 *
 * If pvChecks is not nullptr, script checks are pushed onto it instead of being performed inline. Any
 * script checks which are not necessary (eg due to script execution cache hits) are, obviously,
 * not pushed onto pvChecks/run.
 *
 * Setting cacheSigStore/cacheFullScriptStore to false will remove elements from the corresponding cache
 * which are matched. This is useful for checking blocks where we will likely never need the cache
 * entry again.
 *
 * Note that we may set state.reason to NOT_STANDARD for extra soft-fork flags in flags, block-checking
 * callers should probably reset it to CONSENSUS in such cases.
 *
 * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp
 */
bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,
                       const CCoinsViewCache& inputs, unsigned int flags, bool cacheSigStore,
                       bool cacheFullScriptStore, PrecomputedTransactionData& txdata,
                       std::vector<CScriptCheck>* pvChecks)
{
    if (tx.IsCoinBase()) return true;

    if (pvChecks) {
        pvChecks->reserve(tx.vin.size());
    }

    // First check if script executions have been cached with the same
    // flags. Note that this assumes that the inputs provided are
    // correct (ie that the transaction hash which is in tx's prevouts
    // properly commits to the scriptPubKey in the inputs view of that
    // transaction).
    uint256 hashCacheEntry;
    CSHA256 hasher = g_scriptExecutionCacheHasher;
    hasher.Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());
    AssertLockHeld(cs_main); //TODO: Remove this requirement by making CuckooCache not require external locks
    if (g_scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {
        return true;
    }

    if (!txdata.m_spent_outputs_ready) {
        std::vector<CTxOut> spent_outputs;
        spent_outputs.reserve(tx.vin.size());

        for (const auto& txin : tx.vin) {
            const COutPoint& prevout = txin.prevout;
            const Coin& coin = inputs.AccessCoin(prevout);
            assert(!coin.IsSpent());
            spent_outputs.emplace_back(coin.out);
        }
        txdata.Init(tx, std::move(spent_outputs));
    }
    assert(txdata.m_spent_outputs.size() == tx.vin.size());

    for (unsigned int i = 0; i < tx.vin.size(); i++) {

        // We very carefully only pass in things to CScriptCheck which
        // are clearly committed to by tx' witness hash. This provides
        // a sanity check that our caching is not introducing consensus
        // failures through additional data in, eg, the coins being
        // spent being checked as a part of CScriptCheck.

        // Verify signature
        CScriptCheck check(txdata.m_spent_outputs[i], tx, i, flags, cacheSigStore, &txdata);
        if (pvChecks) {
            pvChecks->push_back(CScriptCheck());
            check.swap(pvChecks->back());
        } else if (!check()) {
            if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {
                // Check whether the failure was caused by a
                // non-mandatory script verification check, such as
                // non-standard DER encodings or non-null dummy
                // arguments; if so, ensure we return NOT_STANDARD
                // instead of CONSENSUS to avoid downstream users
                // splitting the network between upgraded and
                // non-upgraded nodes by banning CONSENSUS-failing
                // data providers.
                CScriptCheck check2(txdata.m_spent_outputs[i], tx, i,
                        flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);
                if (check2())
                    return state.Invalid(TxValidationResult::TX_NOT_STANDARD, strprintf("non-mandatory-script-verify-flag (%s)", ScriptErrorString(check.GetScriptError())));
            }
            // MANDATORY flag failures correspond to
            // TxValidationResult::TX_CONSENSUS. Because CONSENSUS
            // failures are the most serious case of validation
            // failures, we may need to consider using
            // RECENT_CONSENSUS_CHANGE for any script failure that
            // could be due to non-upgraded nodes which we may want to
            // support, to avoid splitting the network (but this
            // depends on the details of how net_processing handles
            // such errors).
            return state.Invalid(TxValidationResult::TX_CONSENSUS, strprintf("mandatory-script-verify-flag-failed (%s)", ScriptErrorString(check.GetScriptError())));
        }
    }

    if (cacheFullScriptStore && !pvChecks) {
        // We executed all of the provided scripts, and were told to
        // cache the result. Do so now.
        g_scriptExecutionCache.insert(hashCacheEntry);
    }

    return true;
}

bool AbortNode(BlockValidationState& state, const std::string& strMessage, const bilingual_str& userMessage)
{
    AbortNode(strMessage, userMessage);
    return state.Error(strMessage);
}

/**
 * Restore the UTXO in a Coin at a given COutPoint
 * @param undo The Coin to be restored.
 * @param view The coins view to which to apply the changes.
 * @param out The out point that corresponds to the tx input.
 * @return A DisconnectResult as an int
 */
int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)
{
    bool fClean = true;

    if (view.HaveCoin(out)) fClean = false; // overwriting transaction output

    if (undo.nHeight == 0) {
        // Missing undo metadata (height and coinbase). Older versions included this
        // information only in undo records for the last spend of a transactions'
        // outputs. This implies that it must be present for some other output of the same tx.
        const Coin& alternate = AccessByTxid(view, out.hash);
        if (!alternate.IsSpent()) {
            undo.nHeight = alternate.nHeight;
            undo.fCoinBase = alternate.fCoinBase;
            undo.fCoinStake = alternate.fCoinStake; 
            undo.nTime = alternate.nTime;           
        } else {
            return DISCONNECT_FAILED; // adding output for transaction without known metadata
        }
    }
    // If the coin already exists as an unspent coin in the cache, then the
    // possible_overwrite parameter to AddCoin must be set to true. We have
    // already checked whether an unspent coin exists above using HaveCoin, so
    // we don't need to guess. When fClean is false, an unspent coin already
    // existed and it is an overwrite.
    view.AddCoin(out, std::move(undo), !fClean);

    return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;
}

/** Undo the effects of this block (with given index) on the UTXO set represented by coins.
 *  When FAILED is returned, view is left in an indeterminate state. */
DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)
{
    bool fClean = true;

    CBlockUndo blockUndo;
    if (!UndoReadFromDisk(blockUndo, pindex)) {
        error("DisconnectBlock(): failure reading undo data");
        return DISCONNECT_FAILED;
    }

    if (blockUndo.vtxundo.size() + 1 != block.vtx.size()) {
        error("DisconnectBlock(): block and undo data inconsistent");
        return DISCONNECT_FAILED;
    }

    // undo transactions in reverse order
    bool pos_offset = block.IsProofOfStake();
    for (int i = block.vtx.size() - 1; i >= pos_offset; i--) {
        const CTransaction &tx = *(block.vtx[i]);
        uint256 hash = tx.GetHash();
        bool is_coinbase = tx.IsCoinBase();
        bool is_coinstake = tx.IsCoinStake();

        // Check that all outputs are available and match the outputs in the block itself
        // exactly.
        for (size_t o = 0; o < tx.vout.size(); o++) {
            if (!tx.vout[o].scriptPubKey.IsUnspendable()) {
                COutPoint out(hash, o);
                Coin coin;
                bool is_spent = view.SpendCoin(out, &coin);
                if (!is_spent || tx.vout[o] != coin.out || pindex->nHeight != coin.nHeight || is_coinbase != coin.fCoinBase || is_coinstake != coin.fCoinStake) {
                    fClean = false; // transaction output mismatch
                }
            }
        }

        // restore inputs
        if (i > 0) { // not coinbases
            CTxUndo &txundo = blockUndo.vtxundo[i-1];
            if (txundo.vprevout.size() != tx.vin.size()) {
                error("DisconnectBlock(): transaction and undo data inconsistent");
                return DISCONNECT_FAILED;
            }
            for (unsigned int j = tx.vin.size(); j-- > 0;) {
                const COutPoint &out = tx.vin[j].prevout;
                int res = ApplyTxInUndo(std::move(txundo.vprevout[j]), view, out);
                if (res == DISCONNECT_FAILED) return DISCONNECT_FAILED;
                fClean = fClean && res != DISCONNECT_UNCLEAN;
            }
            // At this point, all of txundo.vprevout should have been moved out.
        }
    }

    // move best block pointer to prevout block
    view.SetBestBlock(pindex->pprev->GetBlockHash());

    return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;
}

static CCheckQueue<CScriptCheck> scriptcheckqueue(128);

void StartScriptCheckWorkerThreads(int threads_num)
{
    scriptcheckqueue.StartWorkerThreads(threads_num);
}

void StopScriptCheckWorkerThreads()
{
    scriptcheckqueue.StopWorkerThreads();
}

/**
 * Threshold condition checker that triggers when unknown versionbits are seen on the network.
 */
class WarningBitsConditionChecker : public AbstractThresholdConditionChecker
{
private:
    int bit;

public:
    explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}

    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }
    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }
    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }
    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }

    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override
    {
        return pindex->nHeight >= params.MinBIP9WarningHeight &&
               ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&
               ((pindex->nVersion >> bit) & 1) != 0 &&
               ((g_versionbitscache.ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;
    }
};

static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);

static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)
{
    unsigned int flags = SCRIPT_VERIFY_NONE;

    // BIP16 didn't become active until Apr 1 2012 (on mainnet, and
    // retroactively applied to testnet)
    // However, only one historical block violated the P2SH rules (on both
    // mainnet and testnet), so for simplicity, always leave P2SH
    // on except for the one violating block.
    if (consensusparams.BIP16Exception.IsNull() || // no bip16 exception on this chain
        pindex->phashBlock == nullptr || // this is a new candidate block, eg from TestBlockValidity()
        *pindex->phashBlock != consensusparams.BIP16Exception) // this block isn't the historical exception
    {
        flags |= SCRIPT_VERIFY_P2SH;
    }

    // Enforce WITNESS rules whenever P2SH is in effect (and the segwit
    // deployment is defined).
    if (flags & SCRIPT_VERIFY_P2SH && DeploymentEnabled(consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {
        flags |= SCRIPT_VERIFY_WITNESS;
    }

    // Enforce the DERSIG (BIP66) rule
    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {
        flags |= SCRIPT_VERIFY_DERSIG;
    }

    // Enforce CHECKLOCKTIMEVERIFY (BIP65)
    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CLTV)) {
        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;
    }

    // Enforce CHECKSEQUENCEVERIFY (BIP112)
    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CSV)) {
        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;
    }

    // Enforce Taproot (BIP340-BIP342)
    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {
        flags |= SCRIPT_VERIFY_TAPROOT;
    }

    // Enforce BIP147 NULLDUMMY (activated simultaneously with segwit)
    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {
        flags |= SCRIPT_VERIFY_NULLDUMMY;
    }

    return flags;
}



static int64_t nTimeCheck = 0;
static int64_t nTimeForks = 0;
static int64_t nTimeVerify = 0;
static int64_t nTimeConnect = 0;
static int64_t nTimeIndex = 0;
static int64_t nTimeCallbacks = 0;
static int64_t nTimeTotal = 0;
static int64_t nBlocksTotal = 0;

/** Apply the effects of this block (with given index) on the UTXO set represented by coins.
 *  Validity checks that depend on the UTXO set are also done; ConnectBlock()
 *  can fail if those validity checks fail (among other reasons). */
bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state, CBlockIndex* pindex,
                               CCoinsViewCache& view, bool fJustCheck)
{
    AssertLockHeld(cs_main);
    assert(pindex);
    assert(*pindex->phashBlock == block.GetHash());
    int64_t nTimeStart = GetTimeMicros();

    if (pindex->nStakeModifier == 0 && pindex->nStakeModifierChecksum == 0 && !PoSContextualBlockChecks(block, state, pindex, fJustCheck))
        return error("%s: Failed PoS check %s", __func__, state.ToString());

    // Check it again in case a previous version let a bad block in
    // NOTE: We don't currently (re-)invoke ContextualCheckBlock() or
    // ContextualCheckBlockHeader() here. This means that if we add a new
    // consensus rule that is enforced in one of those two functions, then we
    // may have let in a block that violates the rule prior to updating the
    // software, and we would NOT be enforcing the rule here. Fully solving
    // upgrade from one software version to the next after a consensus rule
    // change is potentially tricky and issue-specific (see NeedsRedownload()
    // for one approach that was used for BIP 141 deployment).
    // Also, currently the rule against blocks more than 2 hours in the future
    // is enforced in ContextualCheckBlockHeader(); we wouldn't want to
    // re-enforce that rule here (at least until we make it impossible for
    // GetAdjustedTime() to go backward).
    if (!CheckBlock(block, state, m_params.GetConsensus(), !fJustCheck, !fJustCheck)) {
        if (state.GetResult() == BlockValidationResult::BLOCK_MUTATED) {
            // We don't write down blocks to disk if they may have been
            // corrupted, so this should be impossible unless we're having hardware
            // problems.
            return AbortNode(state, "Corrupt block found indicating potential hardware failure; shutting down");
        }
        return error("%s: Consensus::CheckBlock: %s", __func__, state.ToString());
    }

    bool fProofOfWork = block.IsProofOfWork();
    bool fProofOfStake = block.IsProofOfStake();

    if (!fProofOfWork && !fProofOfStake) {
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-block-type");
    }

    if (fProofOfWork && (pindex->nHeight > m_params.GetConsensus().nLastPowHeight)) {
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "pow-ended");
    }

    // verify that the view's current state corresponds to the previous block
    uint256 hashPrevBlock = pindex->pprev == nullptr ? uint256() : pindex->pprev->GetBlockHash();
    assert(hashPrevBlock == view.GetBestBlock());

    nBlocksTotal++;

    // Special case for the genesis block, skipping connection of its transactions
    // (its coinbase is unspendable)
    if (block.GetHash() == m_params.GetConsensus().hashGenesisBlock) {
        if (!fJustCheck)
            view.SetBestBlock(pindex->GetBlockHash());
        return true;
    }

    bool fScriptChecks = true;
    if (!hashAssumeValid.IsNull()) {
        // We've been configured with the hash of a block which has been externally verified to have a valid history.
        // A suitable default value is included with the software and updated from time to time.  Because validity
        //  relative to a piece of software is an objective fact these defaults can be easily reviewed.
        // This setting doesn't force the selection of any particular chain but makes validating some faster by
        //  effectively caching the result of part of the verification.
        BlockMap::const_iterator  it = m_blockman.m_block_index.find(hashAssumeValid);
        if (it != m_blockman.m_block_index.end()) {
            if (it->second->GetAncestor(pindex->nHeight) == pindex &&
                pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&
                pindexBestHeader->nChainWork >= nMinimumChainWork) {
                // This block is a member of the assumed verified chain and an ancestor of the best header.
                // Script verification is skipped when connecting blocks under the
                // assumevalid block. Assuming the assumevalid block is valid this
                // is safe because block merkle hashes are still computed and checked,
                // Of course, if an assumed valid block is invalid due to false scriptSigs
                // this optimization would allow an invalid chain to be accepted.
                // The equivalent time check discourages hash power from extorting the network via DOS attack
                //  into accepting an invalid block through telling users they must manually set assumevalid.
                //  Requiring a software change or burying the invalid block, regardless of the setting, makes
                //  it hard to hide the implication of the demand.  This also avoids having release candidates
                //  that are hardly doing any signature verification at all in testing without having to
                //  artificially set the default assumed verified block further back.
                // The test against nMinimumChainWork prevents the skipping when denied access to any chain at
                //  least as good as the expected chain.
                fScriptChecks = (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, m_params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);
            }
        }
    }

    int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;
    LogPrint(BCLog::BENCH, "    - Sanity checks: %.2fms [%.2fs (%.2fms/blk)]\n", MILLI * (nTime1 - nTimeStart), nTimeCheck * MICRO, nTimeCheck * MILLI / nBlocksTotal);

    // Do not allow blocks that contain transactions which 'overwrite' older transactions,
    // unless those are already completely spent.
    // If such overwrites are allowed, coinbases and transactions depending upon those
    // can be duplicated to remove the ability to spend the first instance -- even after
    // being sent to another address.
    // See BIP30, CVE-2012-1909, and http://r6.ca/blog/20120206T005236Z.html for more information.
    // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool
    // already refuses previously-known transaction ids entirely.
    // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.
    // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the
    // two in the chain that violate it. This prevents exploiting the issue against nodes during their
    // initial block download.
    bool fEnforceBIP30 = true;

    MapBIP30Exceptions& exceptions = gArgs.GetBoolArg("-regtest", false) ? BIP30ExceptionsRegTestNet : gArgs.GetBoolArg("-testnet", false) ? BIP30ExceptionsTestNet : BIP30Exceptions;
    if (exceptions.count(pindex->nHeight)){
        fEnforceBIP30 = !(pindex->GetBlockHash() == exceptions[pindex->nHeight]) ;
    }

    // Once BIP34 activated it was not possible to create new duplicate coinbases and thus other than starting
    // with the 2 existing duplicate coinbase pairs, not possible to create overwriting txs.  But by the
    // time BIP34 activated, in each of the existing pairs the duplicate coinbase had overwritten the first
    // before the first had been spent.  Since those coinbases are sufficiently buried it's no longer possible to create further
    // duplicate transactions descending from the known pairs either.
    // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.

    // BIP34 requires that a block at height X (block X) has its coinbase
    // scriptSig start with a CScriptNum of X (indicated height X).  The above
    // logic of no longer requiring BIP30 once BIP34 activates is flawed in the
    // case that there is a block X before the BIP34 height of 227,931 which has
    // an indicated height Y where Y is greater than X.  The coinbase for block
    // X would also be a valid coinbase for block Y, which could be a BIP30
    // violation.  An exhaustive search of all mainnet coinbases before the
    // BIP34 height which have an indicated height greater than the block height
    // reveals many occurrences. The 3 lowest indicated heights found are
    // 209,921, 490,897, and 1,983,702 and thus coinbases for blocks at these 3
    // heights would be the first opportunity for BIP30 to be violated.

    // The search reveals a great many blocks which have an indicated height
    // greater than 1,983,702, so we simply remove the optimization to skip
    // BIP30 checking for blocks at height 1,983,702 or higher.  Before we reach
    // that block in another 25 years or so, we should take advantage of a
    // future consensus change to do a new and improved version of BIP34 that
    // will actually prevent ever creating any duplicate coinbases in the
    // future.
    static constexpr int BIP34_IMPLIES_BIP30_LIMIT = 6070875; //  6,070,875 ~ 25 years

    // There is no potential to create a duplicate coinbase at block 209,921
    // because this is still before the BIP34 height and so explicit BIP30
    // checking is still active.

    // The final case is block 176,684 which has an indicated height of
    // 490,897. Unfortunately, this issue was not discovered until about 2 weeks
    // before block 490,897 so there was not much opportunity to address this
    // case other than to carefully analyze it and determine it would not be a
    // problem. Block 490,897 was, in fact, mined with a different coinbase than
    // block 176,684, but it is important to note that even if it hadn't been or
    // is remined on an alternate fork with a duplicate coinbase, we would still
    // not run into a BIP30 violation.  This is because the coinbase for 176,684
    // is spent in block 185,956 in transaction
    // d4f7fbbf92f4a3014a230b2dc70b8058d02eb36ac06b4a0736d9d60eaa9e8781.  This
    // spending transaction can't be duplicated because it also spends coinbase
    // 0328dd85c331237f18e781d692c92de57649529bd5edf1d01036daea32ffde29.  This
    // coinbase has an indicated height of over 4.2 billion, and wouldn't be
    // duplicatable until that height, and it's currently impossible to create a
    // chain that long. Nevertheless we may wish to consider a future soft fork
    // which retroactively prevents block 490,897 from creating a duplicate
    // coinbase. The two historical BIP30 violations often provide a confusing
    // edge case when manipulating the UTXO and it would be simpler not to have
    // another edge case to deal with.

    // testnet4 has no blocks before the BIP34 height with indicated heights
    // post BIP34 before approximately height 486,000,000 and presumably will
    // be reset before it reaches block 6,070,875 and starts doing unnecessary
    // BIP30 checking again.
    assert(pindex->pprev);
    CBlockIndex* pindexBIP34height = pindex->pprev->GetAncestor(m_params.GetConsensus().BIP34Height);

    //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.
    fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == m_params.GetConsensus().BIP34Hash));

    // TODO: Remove BIP30 checking from block height 6,070,875 on, once we have a
    // consensus change that ensures coinbases at those heights can not
    // duplicate earlier coinbases.
    if (fEnforceBIP30 || pindex->nHeight >= BIP34_IMPLIES_BIP30_LIMIT) {
        for (const auto& tx : block.vtx) {
            for (size_t o = 0; o < tx->vout.size(); o++) {
                if (view.HaveCoin(COutPoint(tx->GetHash(), o))) {
                    LogPrintf("ERROR: ConnectBlock(): tried to overwrite transaction\n");
                    return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-txns-BIP30");
                }
            }
        }
    }

    // Enforce BIP68 (sequence locks)
    int nLockTimeFlags = 0;
    if (DeploymentActiveAt(*pindex, m_params.GetConsensus(), Consensus::DEPLOYMENT_CSV)) {
        nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;
    }

    // Get the script flags for this block
    unsigned int flags = GetBlockScriptFlags(pindex, m_params.GetConsensus());

    int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;
    LogPrint(BCLog::BENCH, "    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\n", MILLI * (nTime2 - nTime1), nTimeForks * MICRO, nTimeForks * MILLI / nBlocksTotal);

    CBlockUndo blockundo;

    // Precomputed transaction data pointers must not be invalidated
    // until after `control` has run the script checks (potentially
    // in multiple threads). Preallocate the vector size so a new allocation
    // doesn't invalidate pointers into the vector, and keep txsdata in scope
    // for as long as `control`.
    CCheckQueueControl<CScriptCheck> control(fScriptChecks && g_parallel_script_checks ? &scriptcheckqueue : nullptr);
    std::vector<PrecomputedTransactionData> txsdata(block.vtx.size());

    std::vector<int> prevheights;
    CAmount nFees = 0;
    CAmount nValueIn = 0;
    CAmount nValueOut = 0;
    CAmount nStakeReward = 0;
    int nInputs = 0;
    int64_t nSigOpsCost = 0;
    blockundo.vtxundo.reserve(block.vtx.size() - 1);
    for (unsigned int i = 0; i < block.vtx.size(); i++)
    {
        const CTransaction &tx = *(block.vtx[i]);

        nInputs += tx.vin.size();

        if (tx.IsCoinBase())
            nValueOut += tx.GetValueOut();
        else
        {
            CAmount txfee = 0;
            TxValidationState tx_state;
            if (!Consensus::CheckTxInputs(tx, tx_state, view, pindex->nHeight, txfee)) {
                // Any transaction validation failure in ConnectBlock is a block consensus failure
                state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,
                            tx_state.GetRejectReason(), tx_state.GetDebugMessage());
                return error("%s: Consensus::CheckTxInputs: %s, %s", __func__, tx.GetHash().ToString(), state.ToString());
            }

            int64_t nTxValueIn = view.GetValueIn(tx);
            int64_t nTxValueOut = tx.GetValueOut();
            nValueIn += nTxValueIn;
            nValueOut += nTxValueOut;
            if (tx.IsCoinStake())
                nStakeReward = nTxValueOut - nTxValueIn;
            else
                nFees += nTxValueIn - nTxValueOut;

            if (!MoneyRange(nFees)) {
                LogPrintf("ERROR: %s: accumulated fee in the block out of range.\n", __func__);
                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-txns-accumulated-fee-outofrange");
            }

            // Check that transaction is BIP68 final
            // BIP68 lock checks (as opposed to nLockTime checks) must
            // be in ConnectBlock because they require the UTXO set
            prevheights.resize(tx.vin.size());
            for (size_t j = 0; j < tx.vin.size(); j++) {
                prevheights[j] = view.AccessCoin(tx.vin[j].prevout).nHeight;
            }

            if (!SequenceLocks(tx, nLockTimeFlags, prevheights, *pindex)) {
                LogPrintf("ERROR: %s: contains a non-BIP68-final transaction\n", __func__);
                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-txns-nonfinal");
            }
        }

        // GetTransactionSigOpCost counts 3 types of sigops:
        // * legacy (always)
        // * p2sh (when P2SH enabled in flags and excludes coinbase)
        // * witness (when witness enabled in flags and excludes coinbase)
        nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);
        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST) {
            LogPrintf("ERROR: ConnectBlock(): too many sigops\n");
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-blk-sigops");
        }

        if (!tx.IsCoinBase())
        {
            std::vector<CScriptCheck> vChecks;
            bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */
            TxValidationState tx_state;
            if (fScriptChecks && !CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], g_parallel_script_checks ? &vChecks : nullptr)) {
                // Any transaction validation failure in ConnectBlock is a block consensus failure
                state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,
                              tx_state.GetRejectReason(), tx_state.GetDebugMessage());
                return error("ConnectBlock(): CheckInputScripts on %s failed with %s",
                    tx.GetHash().ToString(), state.ToString());
            }
            control.Add(vChecks);
        }

        CTxUndo undoDummy;
        if (i > 0) {
            blockundo.vtxundo.push_back(CTxUndo());
        }
        UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);
    }
    int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;
    LogPrint(BCLog::BENCH, "      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\n", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);

    //! subsidy checks
    if (block.IsProofOfWork()) {

        CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, m_params.GetConsensus());
        if (block.vtx[0]->GetValueOut() > blockReward) {
            LogPrintf("ERROR: ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\n", block.vtx[0]->GetValueOut(), blockReward);
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cb-amount");
        }

    }
    else if (block.IsProofOfStake())
    {
        // PoSV: coinstake tx earns reward instead of paying fee
        uint64_t nCoinAge = GetCoinAge(this, *block.vtx[1], m_params.GetConsensus());
        if (!nCoinAge)
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-posv-coinage");

        CAmount nCalculatedStakeReward = 0;

            nCalculatedStakeReward = GetProofOfStakeReward(nCoinAge, nFees);

        if (nStakeReward > nCalculatedStakeReward || block.vtx[0]->GetValueOut() != 0) {
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-posv-amount");
        }
    }

    // PoSV: track money supply and mint amount info
    pindex->nMint = nValueOut - nValueIn + nFees;
    pindex->nMoneySupply = (pindex->pprev? pindex->pprev->nMoneySupply : 0) + nValueOut - nValueIn;

    if (!control.Wait()) {
        LogPrintf("ERROR: %s: CheckQueue failed\n", __func__);
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "block-validation-failed");
    }
    int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;
    LogPrint(BCLog::BENCH, "    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs (%.2fms/blk)]\n", nInputs - 1, MILLI * (nTime4 - nTime2), nInputs <= 1 ? 0 : MILLI * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * MICRO, nTimeVerify * MILLI / nBlocksTotal);

    if (fJustCheck)
        return true;

    if (!WriteUndoDataForBlock(blockundo, state, pindex, m_params)) {
        return false;
    }

    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {
        pindex->RaiseValidity(BLOCK_VALID_SCRIPTS);
        setDirtyBlockIndex.insert(pindex);
    }

    assert(pindex->phashBlock);
    // add this block to the view's block chain
    view.SetBestBlock(pindex->GetBlockHash());

    int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;
    LogPrint(BCLog::BENCH, "    - Index writing: %.2fms [%.2fs (%.2fms/blk)]\n", MILLI * (nTime5 - nTime4), nTimeIndex * MICRO, nTimeIndex * MILLI / nBlocksTotal);

    int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;
    LogPrint(BCLog::BENCH, "    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\n", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);

    return true;
}

CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()
{
    return this->GetCoinsCacheSizeState(
        m_coinstip_cache_size_bytes,
        gArgs.GetArg("-maxmempool", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);
}

CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(
    size_t max_coins_cache_size_bytes,
    size_t max_mempool_size_bytes)
{
    const int64_t nMempoolUsage = m_mempool ? m_mempool->DynamicMemoryUsage() : 0;
    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();
    int64_t nTotalSpace =
        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);

    //! No need to periodic flush if at least this much space still available.
    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB
    int64_t large_threshold =
        std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE_BYTES);

    if (cacheSize > nTotalSpace) {
        LogPrintf("Cache size (%s) exceeds total space (%s)\n", cacheSize, nTotalSpace);
        return CoinsCacheSizeState::CRITICAL;
    } else if (cacheSize > large_threshold) {
        return CoinsCacheSizeState::LARGE;
    }
    return CoinsCacheSizeState::OK;
}

bool CChainState::FlushStateToDisk(
    BlockValidationState &state,
    FlushStateMode mode,
    int nManualPruneHeight)
{
    LOCK(cs_main);
    assert(this->CanFlushToDisk());
    static std::chrono::microseconds nLastWrite{0};
    static std::chrono::microseconds nLastFlush{0};
    std::set<int> setFilesToPrune;
    bool full_flush_completed = false;

    const size_t coins_count = CoinsTip().GetCacheSize();
    const size_t coins_mem_usage = CoinsTip().DynamicMemoryUsage();

    try {
    {
        bool fFlushForPrune = false;
        bool fDoFullFlush = false;

        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState();
        LOCK(cs_LastBlockFile);
        if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {
            // make sure we don't prune above the blockfilterindexes bestblocks
            // pruning is height-based
            int last_prune = m_chain.Height(); // last height we can prune
            ForEachBlockFilterIndex([&](BlockFilterIndex& index) {
               last_prune = std::max(1, std::min(last_prune, index.GetSummary().best_block_height));
            });

            if (nManualPruneHeight > 0) {
                LOG_TIME_MILLIS_WITH_CATEGORY("find files to prune (manual)", BCLog::BENCH);

                m_blockman.FindFilesToPruneManual(setFilesToPrune, std::min(last_prune, nManualPruneHeight), m_chain.Height());
            } else {
                LOG_TIME_MILLIS_WITH_CATEGORY("find files to prune", BCLog::BENCH);

                m_blockman.FindFilesToPrune(setFilesToPrune, m_params.PruneAfterHeight(), m_chain.Height(), last_prune, IsInitialBlockDownload());
                fCheckForPruning = false;
            }
            if (!setFilesToPrune.empty()) {
                fFlushForPrune = true;
                if (!fHavePruned) {
                    pblocktree->WriteFlag("prunedblockfiles", true);
                    fHavePruned = true;
                }
            }
        }
        const auto nNow = GetTime<std::chrono::microseconds>();
        // Avoid writing/flushing immediately after startup.
        if (nLastWrite.count() == 0) {
            nLastWrite = nNow;
        }
        if (nLastFlush.count() == 0) {
            nLastFlush = nNow;
        }
        // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).
        bool fCacheLarge = mode == FlushStateMode::PERIODIC && cache_state >= CoinsCacheSizeState::LARGE;
        // The cache is over the limit, we have to write now.
        bool fCacheCritical = mode == FlushStateMode::IF_NEEDED && cache_state >= CoinsCacheSizeState::CRITICAL;
        // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.
        bool fPeriodicWrite = mode == FlushStateMode::PERIODIC && nNow > nLastWrite + DATABASE_WRITE_INTERVAL;
        // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage.
        bool fPeriodicFlush = mode == FlushStateMode::PERIODIC && nNow > nLastFlush + DATABASE_FLUSH_INTERVAL;
        // Combine all conditions that result in a full cache flush.
        fDoFullFlush = (mode == FlushStateMode::ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;
        // Write blocks and block index to disk.
        if (fDoFullFlush || fPeriodicWrite) {
            // Depend on nMinDiskSpace to ensure we can write block index
            if (!CheckDiskSpace(gArgs.GetBlocksDirPath())) {
                return AbortNode(state, "Disk space is too low!", _("Disk space is too low!"));
            }
            {
                LOG_TIME_MILLIS_WITH_CATEGORY("write block and undo data to disk", BCLog::BENCH);

                // First make sure all block and undo data is flushed to disk.
                FlushBlockFile();
            }

            // Then update all block file information (which may refer to block and undo files).
            {
                LOG_TIME_MILLIS_WITH_CATEGORY("write block index to disk", BCLog::BENCH);

                std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;
                vFiles.reserve(setDirtyFileInfo.size());
                for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {
                    vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));
                    setDirtyFileInfo.erase(it++);
                }
                std::vector<const CBlockIndex*> vBlocks;
                vBlocks.reserve(setDirtyBlockIndex.size());
                for (std::set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {
                    vBlocks.push_back(*it);
                    setDirtyBlockIndex.erase(it++);
                }
                if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {
                    return AbortNode(state, "Failed to write to block index database");
                }
            }
            // Finally remove any pruned files
            if (fFlushForPrune) {
                LOG_TIME_MILLIS_WITH_CATEGORY("unlink pruned files", BCLog::BENCH);

                UnlinkPrunedFiles(setFilesToPrune);
            }
            nLastWrite = nNow;
        }
        // Flush best chain related state. This can only be done if the blocks / block index write was also done.
        if (fDoFullFlush && !CoinsTip().GetBestBlock().IsNull()) {
            LOG_TIME_SECONDS(strprintf("write coins cache to disk (%d coins, %.2fkB)",
                coins_count, coins_mem_usage / 1000));

            // Typical Coin structures on disk are around 48 bytes in size.
            // Pushing a new one to the database can cause it to be written
            // twice (once in the log, and once in the tables). This is already
            // an overestimation, as most will delete an existing entry or
            // overwrite one. Still, use a conservative safety factor of 2.
            if (!CheckDiskSpace(gArgs.GetDataDirNet(), 48 * 2 * 2 * CoinsTip().GetCacheSize())) {
                return AbortNode(state, "Disk space is too low!", _("Disk space is too low!"));
            }
            // Flush the chainstate (which may refer to block index entries).
            if (!CoinsTip().Flush())
                return AbortNode(state, "Failed to write to coin database");
            nLastFlush = nNow;
            full_flush_completed = true;
        }
    }
    if (full_flush_completed) {
        // Update best block in wallet (so we can detect restored wallets).
        GetMainSignals().ChainStateFlushed(m_chain.GetLocator());
    }
    } catch (const std::runtime_error& e) {
        return AbortNode(state, std::string("System error while flushing: ") + e.what());
    }
    return true;
}

void CChainState::ForceFlushStateToDisk()
{
    BlockValidationState state;
    if (!this->FlushStateToDisk(state, FlushStateMode::ALWAYS)) {
        LogPrintf("%s: failed to flush state (%s)\n", __func__, state.ToString());
    }
}

void CChainState::PruneAndFlush()
{
    BlockValidationState state;
    fCheckForPruning = true;
    if (!this->FlushStateToDisk(state, FlushStateMode::NONE)) {
        LogPrintf("%s: failed to flush state (%s)\n", __func__, state.ToString());
    }
}

static void DoWarning(const bilingual_str& warning)
{
    static bool fWarned = false;
    SetMiscWarning(warning);
    if (!fWarned) {
        AlertNotify(warning.original);
        fWarned = true;
    }
}

/** Private helper function that concatenates warning messages. */
static void AppendWarning(bilingual_str& res, const bilingual_str& warn)
{
    if (!res.empty()) res += Untranslated(", ");
    res += warn;
}

void CChainState::UpdateTip(const CBlockIndex* pindexNew)
{
    // New best block
    if (m_mempool) {
        m_mempool->AddTransactionsUpdated(1);
    }

    {
        LOCK(g_best_block_mutex);
        g_best_block = pindexNew->GetBlockHash();
        g_best_block_cv.notify_all();
    }

    bilingual_str warning_messages;
    if (!this->IsInitialBlockDownload()) {
        const CBlockIndex* pindex = pindexNew;
        for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {
            WarningBitsConditionChecker checker(bit);
            ThresholdState state = checker.GetStateFor(pindex, m_params.GetConsensus(), warningcache[bit]);
            if (state == ThresholdState::ACTIVE || state == ThresholdState::LOCKED_IN) {
                const bilingual_str warning = strprintf(_("Unknown new rules activated (versionbit %i)"), bit);
                if (state == ThresholdState::ACTIVE) {
                    DoWarning(warning);
                } else {
                    AppendWarning(warning_messages, warning);
                }
            }
        }
    }
    LogPrintf("%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\n", __func__,
      pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,
      log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,
      FormatISO8601DateTime(pindexNew->GetBlockTime()),
      GuessVerificationProgress(m_params.TxData(), pindexNew), this->CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), this->CoinsTip().GetCacheSize(),
      !warning_messages.empty() ? strprintf(" warning='%s'", warning_messages.original) : "");
}

/** Disconnect m_chain's tip.
  * After calling, the mempool will be in an inconsistent state, with
  * transactions from disconnected blocks being added to disconnectpool.  You
  * should make the mempool consistent again by calling MaybeUpdateMempoolForReorg.
  * with cs_main held.
  *
  * If disconnectpool is nullptr, then no disconnected transactions are added to
  * disconnectpool (note that the caller is responsible for mempool consistency
  * in any case).
  */
bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool)
{
    AssertLockHeld(cs_main);
    if (m_mempool) AssertLockHeld(m_mempool->cs);

    CBlockIndex *pindexDelete = m_chain.Tip();
    assert(pindexDelete);
    // Read block from disk.
    std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();
    CBlock& block = *pblock;
    if (!ReadBlockFromDisk(block, pindexDelete, m_params.GetConsensus())) {
        return error("DisconnectTip(): Failed to read block");
    }
    // Apply the block atomically to the chain state.
    int64_t nStart = GetTimeMicros();
    {
        CCoinsViewCache view(&CoinsTip());
        assert(view.GetBestBlock() == pindexDelete->GetBlockHash());
        if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)
            return error("DisconnectTip(): DisconnectBlock %s failed", pindexDelete->GetBlockHash().ToString());
        bool flushed = view.Flush();
        assert(flushed);
    }
    LogPrint(BCLog::BENCH, "- Disconnect block: %.2fms\n", (GetTimeMicros() - nStart) * MILLI);
    // Write the chain state to disk, if necessary.
    if (!FlushStateToDisk(state, FlushStateMode::IF_NEEDED)) {
        return false;
    }

    if (disconnectpool && m_mempool) {
        // Save transactions to re-add to mempool at end of reorg
        for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {
            disconnectpool->addTransaction(*it);
        }
        while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {
            // Drop the earliest entry, and remove its children from the mempool.
            auto it = disconnectpool->queuedTx.get<insertion_order>().begin();
            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);
            disconnectpool->removeEntry(it);
        }
    }

    m_chain.SetTip(pindexDelete->pprev);

    UpdateTip(pindexDelete->pprev);
    // Let wallets know transactions went from 1-confirmed to
    // 0-confirmed or conflicted:
    GetMainSignals().BlockDisconnected(pblock, pindexDelete);
    return true;
}

static int64_t nTimeReadFromDisk = 0;
static int64_t nTimeConnectTotal = 0;
static int64_t nTimeFlush = 0;
static int64_t nTimeChainState = 0;
static int64_t nTimePostConnect = 0;

struct PerBlockConnectTrace {
    CBlockIndex* pindex = nullptr;
    std::shared_ptr<const CBlock> pblock;
    PerBlockConnectTrace() {}
};
/**
 * Used to track blocks whose transactions were applied to the UTXO state as a
 * part of a single ActivateBestChainStep call.
 *
 * This class is single-use, once you call GetBlocksConnected() you have to throw
 * it away and make a new one.
 */
class ConnectTrace {
private:
    std::vector<PerBlockConnectTrace> blocksConnected;

public:
    explicit ConnectTrace() : blocksConnected(1) {}

    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {
        assert(!blocksConnected.back().pindex);
        assert(pindex);
        assert(pblock);
        blocksConnected.back().pindex = pindex;
        blocksConnected.back().pblock = std::move(pblock);
        blocksConnected.emplace_back();
    }

    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {
        // We always keep one extra block at the end of our list because
        // blocks are added after all the conflicted transactions have
        // been filled in. Thus, the last entry should always be an empty
        // one waiting for the transactions from the next block. We pop
        // the last entry here to make sure the list we return is sane.
        assert(!blocksConnected.back().pindex);
        blocksConnected.pop_back();
        return blocksConnected;
    }
};

/**
 * Connect a new block to m_chain. pblock is either nullptr or a pointer to a CBlock
 * corresponding to pindexNew, to bypass loading it again from disk.
 *
 * The block is added to connectTrace if connection succeeds.
 */
bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool)
{
    AssertLockHeld(cs_main);
    if (m_mempool) AssertLockHeld(m_mempool->cs);

    assert(pindexNew->pprev == m_chain.Tip());
    // Read block from disk.
    int64_t nTime1 = GetTimeMicros();
    std::shared_ptr<const CBlock> pthisBlock;
    if (!pblock) {
        std::shared_ptr<CBlock> pblockNew = std::make_shared<CBlock>();
        if (!ReadBlockFromDisk(*pblockNew, pindexNew, m_params.GetConsensus())) {
            return AbortNode(state, "Failed to read block");
        }
        pthisBlock = pblockNew;
    } else {
        pthisBlock = pblock;
    }
    const CBlock& blockConnecting = *pthisBlock;
    // Apply the block atomically to the chain state.
    int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;
    int64_t nTime3;
    LogPrint(BCLog::BENCH, "  - Load block from disk: %.2fms [%.2fs]\n", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);
    {
        CCoinsViewCache view(&CoinsTip());
        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view);
        if (pindexNew->nFlags & CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE) {
            state.nFlags |= CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE;
        }
        GetMainSignals().BlockChecked(blockConnecting, state);
        if (!rv) {
            if (state.IsInvalid())
                InvalidBlockFound(pindexNew, state);
            return error("%s: ConnectBlock %s failed, %s", __func__, pindexNew->GetBlockHash().ToString(), state.ToString());
        }
        nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;
        assert(nBlocksTotal > 0);
        LogPrint(BCLog::BENCH, "  - Connect total: %.2fms [%.2fs (%.2fms/blk)]\n", (nTime3 - nTime2) * MILLI, nTimeConnectTotal * MICRO, nTimeConnectTotal * MILLI / nBlocksTotal);
        bool flushed = view.Flush();
        assert(flushed);
    }
    int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;
    LogPrint(BCLog::BENCH, "  - Flush: %.2fms [%.2fs (%.2fms/blk)]\n", (nTime4 - nTime3) * MILLI, nTimeFlush * MICRO, nTimeFlush * MILLI / nBlocksTotal);
    // Write the chain state to disk, if necessary.
    if (!FlushStateToDisk(state, FlushStateMode::IF_NEEDED)) {
        return false;
    }
    int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;
    LogPrint(BCLog::BENCH, "  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\n", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);
    // Remove conflicting transactions from the mempool.;
    if (m_mempool) {
        m_mempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);
        disconnectpool.removeForBlock(blockConnecting.vtx);
    }
    // Update m_chain & related variables.
    m_chain.SetTip(pindexNew);
    UpdateTip(pindexNew);

    int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;
    LogPrint(BCLog::BENCH, "  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\n", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);
    LogPrint(BCLog::BENCH, "- Connect block: %.2fms [%.2fs (%.2fms/blk)]\n", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);

    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));
    return true;
}

/**
 * Return the tip of the chain with the most work in it, that isn't
 * known to be invalid (it's however far from certain to be valid).
 */
CBlockIndex* CChainState::FindMostWorkChain() {
    do {
        CBlockIndex *pindexNew = nullptr;

        // Find the best candidate header.
        {
            std::set<CBlockIndex*, CBlockIndexWorkComparator>::reverse_iterator it = setBlockIndexCandidates.rbegin();
            if (it == setBlockIndexCandidates.rend())
                return nullptr;
            pindexNew = *it;
        }

        // Check whether all blocks on the path between the currently active chain and the candidate are valid.
        // Just going until the active chain is an optimization, as we know all blocks in it are valid already.
        CBlockIndex *pindexTest = pindexNew;
        bool fInvalidAncestor = false;
        while (pindexTest && !m_chain.Contains(pindexTest)) {
            assert(pindexTest->HaveTxsDownloaded() || pindexTest->nHeight == 0);

            // Pruned nodes may have entries in setBlockIndexCandidates for
            // which block files have been deleted.  Remove those as candidates
            // for the most work chain if we come across them; we can't switch
            // to a chain unless we have all the non-active-chain parent blocks.
            bool fFailedChain = pindexTest->nStatus & BLOCK_FAILED_MASK;
            bool fMissingData = !(pindexTest->nStatus & BLOCK_HAVE_DATA);
            if (fFailedChain || fMissingData) {
                // Candidate chain is not usable (either invalid or missing data)
                if (fFailedChain && (pindexBestInvalid == nullptr || pindexNew->nChainWork > pindexBestInvalid->nChainWork))
                    pindexBestInvalid = pindexNew;
                CBlockIndex *pindexFailed = pindexNew;
                // Remove the entire chain from the set.
                while (pindexTest != pindexFailed) {
                    if (fFailedChain) {

                        if (pindexTest->nFlags & CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE)
                            pindexFailed->nFlags |= CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE;

                        pindexFailed->nStatus |= BLOCK_FAILED_CHILD;
                    } else if (fMissingData) {
                        // If we're missing data, then add back to m_blocks_unlinked,
                        // so that if the block arrives in the future we can try adding
                        // to setBlockIndexCandidates again.
                        m_blockman.m_blocks_unlinked.insert(
                            std::make_pair(pindexFailed->pprev, pindexFailed));
                    }
                    setBlockIndexCandidates.erase(pindexFailed);
                    pindexFailed = pindexFailed->pprev;
                }
                setBlockIndexCandidates.erase(pindexTest);
                fInvalidAncestor = true;
                break;
            }
            pindexTest = pindexTest->pprev;
        }
        if (!fInvalidAncestor)
            return pindexNew;
    } while(true);
}

/** Delete all entries in setBlockIndexCandidates that are worse than the current tip. */
void CChainState::PruneBlockIndexCandidates() {
    // Note that we can't delete the current block itself, as we may need to return to it later in case a
    // reorganization to a better block fails.
    std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();
    while (it != setBlockIndexCandidates.end() && setBlockIndexCandidates.value_comp()(*it, m_chain.Tip())) {
        setBlockIndexCandidates.erase(it++);
    }
    // Either the current tip or a successor of it we're working towards is left in setBlockIndexCandidates.
    assert(!setBlockIndexCandidates.empty());
}

/**
 * Try to make some progress towards making pindexMostWork the active block.
 * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.
 *
 * @returns true unless a system error occurred
 */
bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)
{
    AssertLockHeld(cs_main);
    if (m_mempool) AssertLockHeld(m_mempool->cs);

    const CBlockIndex* pindexOldTip = m_chain.Tip();
    const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);

    // Disconnect active blocks which are no longer in the best chain.
    bool fBlocksDisconnected = false;
    DisconnectedBlockTransactions disconnectpool;
    while (m_chain.Tip() && m_chain.Tip() != pindexFork) {
        if (!DisconnectTip(state, &disconnectpool)) {
            // This is likely a fatal error, but keep the mempool consistent,
            // just in case. Only remove from the mempool in this case.
            MaybeUpdateMempoolForReorg(disconnectpool, false);

            // If we're unable to disconnect a block during normal operation,
            // then that is a failure of our local system -- we should abort
            // rather than stay on a less work chain.
            AbortNode(state, "Failed to disconnect block; see debug.log for details");
            return false;
        }
        fBlocksDisconnected = true;
    }

    // Build list of new blocks to connect (in descending height order).
    std::vector<CBlockIndex*> vpindexToConnect;
    bool fContinue = true;
    int nHeight = pindexFork ? pindexFork->nHeight : -1;
    while (fContinue && nHeight != pindexMostWork->nHeight) {
        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need
        // a few blocks along the way.
        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);
        vpindexToConnect.clear();
        vpindexToConnect.reserve(nTargetHeight - nHeight);
        CBlockIndex* pindexIter = pindexMostWork->GetAncestor(nTargetHeight);
        while (pindexIter && pindexIter->nHeight != nHeight) {
            vpindexToConnect.push_back(pindexIter);
            pindexIter = pindexIter->pprev;
        }
        nHeight = nTargetHeight;

        // Connect new blocks.
        for (CBlockIndex* pindexConnect : reverse_iterate(vpindexToConnect)) {
            if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace, disconnectpool)) {
                if (state.IsInvalid()) {
                    // The block violates a consensus rule.
                    if (state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {
                        InvalidChainFound(vpindexToConnect.front());
                    }
                    if (!state.m_preserve_state) {
                        auto pchainman = state.m_chainman;
                        auto ppeerman = state.m_peerman;
                        state = BlockValidationState();
                        state.m_chainman = pchainman;
                        state.m_peerman = ppeerman;
                    }
                    fInvalidFound = true;
                    fContinue = false;
                    break;
                } else {
                    // A system error occurred (disk space, database error, ...).
                    // Make the mempool consistent with the current tip, just in case
                    // any observers try to use it before shutdown.
                    MaybeUpdateMempoolForReorg(disconnectpool, false);
                    return false;
                }
            } else {
                PruneBlockIndexCandidates();
                if (!pindexOldTip || m_chain.Tip()->nChainWork > pindexOldTip->nChainWork) {
                    // We're in a better position than we were. Return temporarily to release the lock.
                    fContinue = false;
                    break;
                }
            }
        }
    }

    if (fBlocksDisconnected) {
        // If any blocks were disconnected, disconnectpool may be non empty.  Add
        // any disconnected transactions back to the mempool.
        MaybeUpdateMempoolForReorg(disconnectpool, true);
    }
    if (m_mempool) m_mempool->check(*this);

    CheckForkWarningConditions();

    return true;
}

static SynchronizationState GetSynchronizationState(bool init)
{
    if (!init) return SynchronizationState::POST_INIT;
    if (::fReindex) return SynchronizationState::INIT_REINDEX;
    return SynchronizationState::INIT_DOWNLOAD;
}

static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {
    bool fNotify = false;
    bool fInitialBlockDownload = false;
    static CBlockIndex* pindexHeaderOld = nullptr;
    CBlockIndex* pindexHeader = nullptr;
    {
        LOCK(cs_main);
        pindexHeader = pindexBestHeader;

        if (pindexHeader != pindexHeaderOld) {
            fNotify = true;
            fInitialBlockDownload = chainstate.IsInitialBlockDownload();
            pindexHeaderOld = pindexHeader;
        }
    }
    // Send block tip changed notifications without cs_main
    if (fNotify) {
        uiInterface.NotifyHeaderTip(GetSynchronizationState(fInitialBlockDownload), pindexHeader);
    }
    return fNotify;
}

static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {
    AssertLockNotHeld(cs_main);

    if (GetMainSignals().CallbacksPending() > 10) {
        SyncWithValidationInterfaceQueue();
    }
}

bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr<const CBlock> pblock)
{
    // Note that while we're often called here from ProcessNewBlock, this is
    // far from a guarantee. Things in the P2P/RPC will often end up calling
    // us in the middle of ProcessNewBlock - do not assume pblock is set
    // sanely for performance or correctness!
    AssertLockNotHeld(cs_main);

    // ABC maintains a fair degree of expensive-to-calculate internal state
    // because this function periodically releases cs_main so that it does not lock up other threads for too long
    // during large connects - and to allow for e.g. the callback queue to drain
    // we use m_cs_chainstate to enforce mutual exclusion so that only one caller may execute this function at a time
    LOCK(m_cs_chainstate);

    CBlockIndex *pindexMostWork = nullptr;
    CBlockIndex *pindexNewTip = nullptr;
    int nStopAtHeight = gArgs.GetArg("-stopatheight", DEFAULT_STOPATHEIGHT);
    do {
        // Block until the validation queue drains. This should largely
        // never happen in normal operation, however may happen during
        // reindex, causing memory blowup if we run too far ahead.
        // Note that if a validationinterface callback ends up calling
        // ActivateBestChain this may lead to a deadlock! We should
        // probably have a DEBUG_LOCKORDER test for this in the future.
        LimitValidationInterfaceQueue();

        std::vector<uint256> connected_blocks;
        {
            LOCK(cs_main);
            // Lock transaction pool for at least as long as it takes for connectTrace to be consumed
            LOCK(MempoolMutex());
            CBlockIndex* starting_tip = m_chain.Tip();
            bool blocks_connected = false;
            do {
                // We absolutely may not unlock cs_main until we've made forward progress
                // (with the exception of shutdown due to hardware issues, low disk space, etc).
                ConnectTrace connectTrace; // Destructed before cs_main is unlocked

                if (pindexMostWork == nullptr) {
                    pindexMostWork = FindMostWorkChain();
                }

                // Whether we have anything to do at all.
                if (pindexMostWork == nullptr || pindexMostWork == m_chain.Tip()) {
                    break;
                }

                bool fInvalidFound = false;
                std::shared_ptr<const CBlock> nullBlockPtr;
                if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace)) {
                    // A system error occurred
                    return false;
                }
                blocks_connected = true;

                if (fInvalidFound) {
                    // Wipe cache, we may need another branch now.
                    pindexMostWork = nullptr;
                }
                pindexNewTip = m_chain.Tip();

                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {
                    assert(trace.pblock && trace.pindex);
                    connected_blocks.push_back(trace.pblock->GetHash());
                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex);
                }
            } while (!m_chain.Tip() || (starting_tip && CBlockIndexWorkComparator()(m_chain.Tip(), starting_tip)));
            if (!blocks_connected) return true;

            const CBlockIndex* pindexFork = m_chain.FindFork(starting_tip);
            bool fInitialDownload = IsInitialBlockDownload();

            // Notify external listeners about the new tip.
            // Enqueue while holding cs_main to ensure that UpdatedBlockTip is called in the order in which blocks are connected
            if (pindexFork != pindexNewTip) {
                // Notify ValidationInterface subscribers
                GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);

                // Always notify the UI if a new block tip was connected
                uiInterface.NotifyBlockTip(GetSynchronizationState(fInitialDownload), pindexNewTip);
            }
        }
        // When we reach this point, we switched to a new tip (stored in pindexNewTip).

        if (nStopAtHeight && pindexNewTip && pindexNewTip->nHeight >= nStopAtHeight) StartShutdown();

        // We check shutdown only after giving ActivateBestChainStep a chance to run once so that we
        // never shutdown before connecting the genesis block during LoadChainTip(). Previously this
        // caused an assert() failure during shutdown in such cases as the UTXO DB flushing checks
        // that the best block hash is non-null.
        if (ShutdownRequested()) break;
    } while (pindexNewTip != pindexMostWork);
    CheckBlockIndex();

    // Write changes periodically to disk, after relay.
    if (!FlushStateToDisk(state, FlushStateMode::PERIODIC)) {
        return false;
    }

    return true;
}

bool CChainState::PreciousBlock(BlockValidationState& state, CBlockIndex* pindex)
{
    {
        LOCK(cs_main);
        if (pindex->nChainWork < m_chain.Tip()->nChainWork) {
            // Nothing to do, this block is not at the tip.
            return true;
        }
        if (m_chain.Tip()->nChainWork > nLastPreciousChainwork) {
            // The chain has been extended since the last call, reset the counter.
            nBlockReverseSequenceId = -1;
        }
        nLastPreciousChainwork = m_chain.Tip()->nChainWork;
        setBlockIndexCandidates.erase(pindex);
        pindex->nSequenceId = nBlockReverseSequenceId;
        if (nBlockReverseSequenceId > std::numeric_limits<int32_t>::min()) {
            // We can't keep reducing the counter if somebody really wants to
            // call preciousblock 2**31-1 times on the same set of tips...
            nBlockReverseSequenceId--;
        }
        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && pindex->HaveTxsDownloaded()) {
            setBlockIndexCandidates.insert(pindex);
            PruneBlockIndexCandidates();
        }
    }

    return ActivateBestChain(state, std::shared_ptr<const CBlock>());
}

bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pindex)
{
    // Genesis block can't be invalidated
    assert(pindex);
    if (pindex->nHeight == 0) return false;

    CBlockIndex* to_mark_failed = pindex;
    bool pindex_was_in_chain = false;
    int disconnected = 0;

    // We do not allow ActivateBestChain() to run while InvalidateBlock() is
    // running, as that could cause the tip to change while we disconnect
    // blocks.
    LOCK(m_cs_chainstate);

    // We'll be acquiring and releasing cs_main below, to allow the validation
    // callbacks to run. However, we should keep the block index in a
    // consistent state as we disconnect blocks -- in particular we need to
    // add equal-work blocks to setBlockIndexCandidates as we disconnect.
    // To avoid walking the block index repeatedly in search of candidates,
    // build a map once so that we can look up candidate blocks by chain
    // work as we go.
    std::multimap<const arith_uint256, CBlockIndex *> candidate_blocks_by_work;

    {
        LOCK(cs_main);
        for (const auto& entry : m_blockman.m_block_index) {
            CBlockIndex *candidate = entry.second;
            // We don't need to put anything in our active chain into the
            // multimap, because those candidates will be found and considered
            // as we disconnect.
            // Instead, consider only non-active-chain blocks that have at
            // least as much work as where we expect the new tip to end up.
            if (!m_chain.Contains(candidate) &&
                    !CBlockIndexWorkComparator()(candidate, pindex->pprev) &&
                    candidate->IsValid(BLOCK_VALID_TRANSACTIONS) &&
                    candidate->HaveTxsDownloaded()) {
                candidate_blocks_by_work.insert(std::make_pair(candidate->nChainWork, candidate));
            }
        }
    }

    // Disconnect (descendants of) pindex, and mark them invalid.
    while (true) {
        if (ShutdownRequested()) break;

        // Make sure the queue of validation callbacks doesn't grow unboundedly.
        LimitValidationInterfaceQueue();

        LOCK(cs_main);
        // Lock for as long as disconnectpool is in scope to make sure MaybeUpdateMempoolForReorg is
        // called after DisconnectTip without unlocking in between
        LOCK(MempoolMutex());
        if (!m_chain.Contains(pindex)) break;
        pindex_was_in_chain = true;
        CBlockIndex *invalid_walk_tip = m_chain.Tip();

        // ActivateBestChain considers blocks already in m_chain
        // unconditionally valid already, so force disconnect away from it.
        DisconnectedBlockTransactions disconnectpool;
        bool ret = DisconnectTip(state, &disconnectpool);
        // DisconnectTip will add transactions to disconnectpool.
        // Adjust the mempool to be consistent with the new tip, adding
        // transactions back to the mempool if disconnecting was successful,
        // and we're not doing a very deep invalidation (in which case
        // keeping the mempool up to date is probably futile anyway).
        MaybeUpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);
        if (!ret) return false;
        assert(invalid_walk_tip->pprev == m_chain.Tip());

        // We immediately mark the disconnected blocks as invalid.
        // This prevents a case where pruned nodes may fail to invalidateblock
        // and be left unable to start as they have no tip candidates (as there
        // are no blocks that meet the "have data and are not invalid per
        // nStatus" criteria for inclusion in setBlockIndexCandidates).
        invalid_walk_tip->nStatus |= BLOCK_FAILED_VALID;
        setDirtyBlockIndex.insert(invalid_walk_tip);
        setBlockIndexCandidates.erase(invalid_walk_tip);
        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);
        if (invalid_walk_tip->pprev == to_mark_failed && (to_mark_failed->nStatus & BLOCK_FAILED_VALID)) {
            // We only want to mark the last disconnected block as BLOCK_FAILED_VALID; its children
            // need to be BLOCK_FAILED_CHILD instead.
            to_mark_failed->nStatus = (to_mark_failed->nStatus ^ BLOCK_FAILED_VALID) | BLOCK_FAILED_CHILD;
            setDirtyBlockIndex.insert(to_mark_failed);
        }

        // Add any equal or more work headers to setBlockIndexCandidates
        auto candidate_it = candidate_blocks_by_work.lower_bound(invalid_walk_tip->pprev->nChainWork);
        while (candidate_it != candidate_blocks_by_work.end()) {
            if (!CBlockIndexWorkComparator()(candidate_it->second, invalid_walk_tip->pprev)) {
                setBlockIndexCandidates.insert(candidate_it->second);
                candidate_it = candidate_blocks_by_work.erase(candidate_it);
            } else {
                ++candidate_it;
            }
        }

        // Track the last disconnected block, so we can correct its BLOCK_FAILED_CHILD status in future
        // iterations, or, if it's the last one, call InvalidChainFound on it.
        to_mark_failed = invalid_walk_tip;
    }

    CheckBlockIndex();

    {
        LOCK(cs_main);
        if (m_chain.Contains(to_mark_failed)) {
            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.
            return false;
        }

        // Mark pindex (or the last disconnected block) as invalid, even when it never was in the main chain
        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;
        setDirtyBlockIndex.insert(to_mark_failed);
        setBlockIndexCandidates.erase(to_mark_failed);
        m_blockman.m_failed_blocks.insert(to_mark_failed);

        // If any new blocks somehow arrived while we were disconnecting
        // (above), then the pre-calculation of what should go into
        // setBlockIndexCandidates may have missed entries. This would
        // technically be an inconsistency in the block index, but if we clean
        // it up here, this should be an essentially unobservable error.
        // Loop back over all block index entries and add any missing entries
        // to setBlockIndexCandidates.
        BlockMap::iterator it = m_blockman.m_block_index.begin();
        while (it != m_blockman.m_block_index.end()) {
            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, m_chain.Tip())) {
                setBlockIndexCandidates.insert(it->second);
            }
            it++;
        }

        InvalidChainFound(to_mark_failed);
    }

    // Only notify about a new block tip if the active chain was modified.
    if (pindex_was_in_chain) {
        uiInterface.NotifyBlockTip(GetSynchronizationState(IsInitialBlockDownload()), to_mark_failed->pprev);
    }
    return true;
}

void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {
    AssertLockHeld(cs_main);

    int nHeight = pindex->nHeight;

    // Remove the invalidity flag from this block and all its descendants.
    BlockMap::iterator it = m_blockman.m_block_index.begin();
    while (it != m_blockman.m_block_index.end()) {
        if (!it->second->IsValid() && it->second->GetAncestor(nHeight) == pindex) {
            it->second->nStatus &= ~BLOCK_FAILED_MASK;
            it->second->nFlags &= ~(CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE );
            setDirtyBlockIndex.insert(it->second);
            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && setBlockIndexCandidates.value_comp()(m_chain.Tip(), it->second)) {
                setBlockIndexCandidates.insert(it->second);
            }
            if (it->second == pindexBestInvalid) {
                // Reset invalid block marker if it was pointing to one of those.
                pindexBestInvalid = nullptr;
            }
            m_blockman.m_failed_blocks.erase(it->second);
        }
        it++;
    }

    // Remove the invalidity flag from all ancestors too.
    while (pindex != nullptr) {
        if (pindex->nStatus & BLOCK_FAILED_MASK) {
            pindex->nStatus &= ~BLOCK_FAILED_MASK;
            setDirtyBlockIndex.insert(pindex);
            m_blockman.m_failed_blocks.erase(pindex);
        }
        pindex = pindex->pprev;
    }
}

CBlockIndex* BlockManager::AddToBlockIndex(const CBlockHeader& block)
{
    AssertLockHeld(cs_main);

    // Check for duplicate
    uint256 hash = block.GetHash();
    BlockMap::iterator it = m_block_index.find(hash);
    if (it != m_block_index.end())
        return it->second;

    // Construct new block index object
    CBlockIndex* pindexNew = new CBlockIndex(block);

    // We assign the sequence id to blocks only when the full data is available,
    // to avoid miners withholding blocks but broadcasting headers, to get a
    // competitive advantage.
    pindexNew->nSequenceId = 0;
    BlockMap::iterator mi = m_block_index.insert(std::make_pair(hash, pindexNew)).first;

    pindexNew->phashBlock = &((*mi).first);
    BlockMap::iterator miPrev = m_block_index.find(block.hashPrevBlock);
    if (miPrev != m_block_index.end())
    {
        pindexNew->pprev = (*miPrev).second;
        pindexNew->nHeight = pindexNew->pprev->nHeight + 1;
        pindexNew->BuildSkip();
    }

    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + GetBlockProof(*pindexNew);
    pindexNew->RaiseValidity(BLOCK_VALID_TREE);
    if (pindexBestHeader == nullptr || pindexBestHeader->nChainWork < pindexNew->nChainWork)
        pindexBestHeader = pindexNew;

    setDirtyBlockIndex.insert(pindexNew);

    return pindexNew;
}

/** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */
void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos)
{
    pindexNew->nTx = block.vtx.size();
    pindexNew->nChainTx = 0;
    pindexNew->nFile = pos.nFile;
    pindexNew->nDataPos = pos.nPos;
    pindexNew->nUndoPos = 0;
    pindexNew->nStatus |= BLOCK_HAVE_DATA;
    if (DeploymentActiveAt(*pindexNew, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {
        pindexNew->nStatus |= BLOCK_OPT_WITNESS;
    }
    pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);
    setDirtyBlockIndex.insert(pindexNew);

    if (pindexNew->pprev == nullptr || pindexNew->pprev->HaveTxsDownloaded()) {
        // If pindexNew is the genesis block or all parents are BLOCK_VALID_TRANSACTIONS.
        std::deque<CBlockIndex*> queue;
        queue.push_back(pindexNew);

        // Recursively process any descendant blocks that now may be eligible to be connected.
        while (!queue.empty()) {
            CBlockIndex *pindex = queue.front();
            queue.pop_front();
            pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;
            {
                LOCK(cs_nBlockSequenceId);
                pindex->nSequenceId = nBlockSequenceId++;
            }

            if (m_chain.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, m_chain.Tip())) {
                setBlockIndexCandidates.insert(pindex);
            }
            std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> range = m_blockman.m_blocks_unlinked.equal_range(pindex);
            while (range.first != range.second) {
                std::multimap<CBlockIndex*, CBlockIndex*>::iterator it = range.first;
                queue.push_back(it->second);
                range.first++;
                m_blockman.m_blocks_unlinked.erase(it);
            }
        }
    } else {
        if (pindexNew->pprev && pindexNew->pprev->IsValid(BLOCK_VALID_TREE)) {
            m_blockman.m_blocks_unlinked.insert(std::make_pair(pindexNew->pprev, pindexNew));
        }
    }
}

static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)
{

    // Check timestamp
    if (block.IsProofOfWork() &&
        block.GetBlockTime() > particl::FutureDrift(GetAdjustedTime()))
        return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, "time-too-new", "block timestamp too far in the future");

    // Check proof of work matches claimed amount
    if (block.IsProofOfWork() && !CheckProofOfWork(block.GetPoWHash(), block.nBits, consensusParams))
        return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, "bad-pow", "proof of work failed");

    return true; 
}

bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)
{
    // These are checks that are independent of context.

    if (block.fChecked)
        return true;

    // Check that the header is valid (particularly PoW).  This is mostly
    // redundant with the call in AcceptBlockHeader.
    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))
        return false;

    // Signet only: check block solution
    if (consensusParams.signet_blocks && fCheckPOW && !CheckSignetBlockSolution(block, consensusParams)) {
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-signet-blksig", "signet block signature validation failure");
    }

    // Check the merkle root.
    if (fCheckMerkleRoot) {
        bool mutated;
        uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);
        if (block.hashMerkleRoot != hashMerkleRoot2)
            return state.Invalid(BlockValidationResult::BLOCK_MUTATED, "bad-txnmrklroot", "hashMerkleRoot mismatch");

        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences
        // of transactions in a block without affecting the merkle root of a block,
        // while still invalidating it.
        if (mutated)
            return state.Invalid(BlockValidationResult::BLOCK_MUTATED, "bad-txns-duplicate", "duplicate transaction");
    }

    // All potential-corruption validation must be done before we do any
    // transaction validation, as otherwise we may mark the header as invalid
    // because we receive the wrong transactions for it.
    // Note that witness malleability is checked in ContextualCheckBlock, so no
    // checks that use witness data may be performed here.

    // Size limits
    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-blk-length", "size limits failed");

    // First transaction must be coinbase, the rest must not be
    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cb-missing", "first tx is not coinbase");
    }

    for (unsigned int i = 1; i < block.vtx.size(); i++) {
        if (block.vtx[i]->IsCoinBase()) {
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cb-multiple", "more than one coinbase");
        }
    }
    
    // Second transaction must be coinstake, the rest must not be
    if (block.IsProofOfStake() && (block.vtx.empty() || !block.vtx[1]->IsCoinStake()))
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cs-missing", "second tx is not coinstake");

    // Only the second transaction can be the optional coinstake
    for (unsigned int i = 2; i < block.vtx.size(); i++)
        if (block.IsProofOfStake() && block.vtx[i]->IsCoinStake())
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cs-missing", "coinstake in wrong position");

    // First coinbase output should be empty if proof-of-stake block
    if (block.IsProofOfStake() && !block.vtx[0]->vout[0].IsEmpty())
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cb-notempty", "coinbase output not empty in PoS block");

    // Check coinstake timestamp
    if (block.IsProofOfStake() && !CheckCoinStakeTimestamp(block.GetBlockTime(), block.vtx[1]->nTime ? (int64_t)block.vtx[1]->nTime : block.GetBlockTime()))
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cs-time", "coinstake timestamp violation");

    // Check transactions
    // Must check for duplicate inputs (see CVE-2018-17144)
    for (const auto& tx : block.vtx) {
        TxValidationState tx_state;
        if (!CheckTransaction(*tx, tx_state)) {
            // CheckBlock() does context-free validation checks. The only
            // possible failures are consensus failures.
            assert(tx_state.GetResult() == TxValidationResult::TX_CONSENSUS);
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, tx_state.GetRejectReason(),
                                 strprintf("Transaction check failed (tx hash %s) %s", tx->GetHash().ToString(), tx_state.GetDebugMessage()));
        }
        
        // POS: check transaction timestamp
        if (block.IsProofOfStake() && block.GetBlockTime() < (int64_t)tx->nTime)
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-tx-time", "block timestamp earlier than transaction timestamp");

        // enforce transaction version 3
        if (block.IsProofOfStake() && (IsProtocolV00(block.nTime) ? 3 : 1) > tx->nVersion){
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-tx-transaction-version");
        }
    }
    unsigned int nSigOps = 0;
    for (const auto& tx : block.vtx)
    {
        nSigOps += GetLegacySigOpCount(*tx);
    }
    if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-blk-sigops", "out-of-bounds SigOpCount");

    // check block signature
    if (block.IsProofOfStake() && !CheckBlockSignature(block)) {
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-blk-sign", "bad block signature");
    }

    if (fCheckPOW && fCheckMerkleRoot)
        block.fChecked = true;

    return true;
}

void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)
{
    int commitpos = GetWitnessCommitmentIndex(block);
    static const std::vector<unsigned char> nonce(32, 0x00);
    if (commitpos != NO_WITNESS_COMMITMENT && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT) && !block.vtx[0]->HasWitness()) {
        CMutableTransaction tx(*block.vtx[0]);
        tx.vin[0].scriptWitness.stack.resize(1);
        tx.vin[0].scriptWitness.stack[0] = nonce;
        block.vtx[0] = MakeTransactionRef(std::move(tx));
    }
}

std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)
{
    std::vector<unsigned char> commitment;
    int commitpos = GetWitnessCommitmentIndex(block);
    std::vector<unsigned char> ret(32, 0x00);
    if (DeploymentEnabled(consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {
        if (commitpos == NO_WITNESS_COMMITMENT) {
            uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);
            CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);
            CTxOut out;
            out.nValue = 0;
            out.scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);
            out.scriptPubKey[0] = OP_RETURN;
            out.scriptPubKey[1] = 0x24;
            out.scriptPubKey[2] = 0xaa;
            out.scriptPubKey[3] = 0x21;
            out.scriptPubKey[4] = 0xa9;
            out.scriptPubKey[5] = 0xed;
            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);
            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());
            CMutableTransaction tx(*block.vtx[0]);
            tx.vout.push_back(out);
            block.vtx[0] = MakeTransactionRef(std::move(tx));
        }
    }
    UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);
    return commitment;
}

CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)
{
    const MapCheckpoints& checkpoints = data.mapCheckpoints;

    for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))
    {
        const uint256& hash = i.second;
        CBlockIndex* pindex = LookupBlockIndex(hash);
        if (pindex) {
            return pindex;
        }
    }
    return nullptr;
}

/** Context-dependent validity checks.
 *  By "context", we mean only the previous block headers, but not the UTXO
 *  set; UTXO-related validity checks are done in ConnectBlock().
 *  NOTE: This function is not currently invoked by ConnectBlock(), so we
 *  should consider upgrade issues if we change which consensus rules are
 *  enforced in this function (eg by adding a new consensus rule). See comment
 *  in ConnectBlock().
 *  Note that -reindex-chainstate skips the validation that happens here!
 */
static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidationState& state, BlockManager& blockman, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)
{
    assert(pindexPrev != nullptr);
    const int nHeight = pindexPrev->nHeight + 1;

    // Check proof of work
    const Consensus::Params& consensusParams = params.GetConsensus();
    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))
        return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, "bad-diffbits", "incorrect proof of work/stake");

    // Check against checkpoints
    if (fCheckpointsEnabled) {
        // Don't accept any forks from the main chain prior to last checkpoint.
        // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our
        // BlockIndex().
        CBlockIndex* pcheckpoint = blockman.GetLastCheckpoint(params.Checkpoints());
        if (pcheckpoint && nHeight < pcheckpoint->nHeight) {
            LogPrintf("ERROR: %s: forked chain older than last checkpoint (height %d)\n", __func__, nHeight);
            return state.Invalid(BlockValidationResult::BLOCK_CHECKPOINT, "bad-fork-prior-to-checkpoint");
        }
    }

    // Check timestamp against prev
    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())
        return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, "time-too-old", "block's timestamp is too early");

    // Check timestamp
    if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)
        return state.Invalid(BlockValidationResult::BLOCK_TIME_FUTURE, "time-too-new", "block timestamp too far in the future");

    // Reject blocks with outdated version
    if ((block.nVersion < 2 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB)) ||
        (block.nVersion < 3 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_DERSIG)) ||
        (block.nVersion < 4 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLTV))) {
            return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, strprintf("bad-version(0x%08x)", block.nVersion),
                                 strprintf("rejected nVersion=0x%08x block", block.nVersion));
    }

    return true;
}

/** NOTE: This function is not currently invoked by ConnectBlock(), so we
 *  should consider upgrade issues if we change which consensus rules are
 *  enforced in this function (eg by adding a new consensus rule). See comment
 *  in ConnectBlock().
 *  Note that -reindex-chainstate skips the validation that happens here!
 */
static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)
{
    const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;

    // Enforce BIP113 (Median Time Past).
    int nLockTimeFlags = 0;
    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV)) {
        assert(pindexPrev != nullptr);
        nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;
    }

    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)
                              ? pindexPrev->GetMedianTimePast()
                              : block.GetBlockTime();

    // Check that all transactions are finalized
    for (const auto& tx : block.vtx) {
        if (!IsFinalTx(*tx, nHeight, nLockTimeCutoff)) {
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-txns-nonfinal", "non-final transaction");
        }
    }

    // Enforce rule that the coinbase starts with serialized block height
    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB))
    {
        CScript expect = CScript() << nHeight;
        if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||
            !std::equal(expect.begin(), expect.end(), block.vtx[0]->vin[0].scriptSig.begin())) {
            return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-cb-height", "block height mismatch in coinbase");
        }
    }

    // Validation for witness commitments.
    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the
    //   coinbase (where 0x0000....0000 is used instead).
    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness reserved value (unconstrained).
    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).
    // * There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are
    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are
    //   multiple, the last one is used.
    bool fHaveWitness = false;
    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {
        int commitpos = GetWitnessCommitmentIndex(block);
        if (commitpos != NO_WITNESS_COMMITMENT) {
            bool malleated = false;
            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);
            // The malleation check is ignored; as the transaction tree itself
            // already does not permit it, it is impossible to trigger in the
            // witness tree.
            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {
                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, "bad-witness-nonce-size", strprintf("%s : invalid witness reserved value size", __func__));
            }
            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);
            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {
                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, "bad-witness-merkle-match", strprintf("%s : witness merkle commitment mismatch", __func__));
            }
            fHaveWitness = true;
        }
    }

    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam
    if (!fHaveWitness) {
      for (const auto& tx : block.vtx) {
            if (tx->HasWitness()) {
                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, "unexpected-witness", strprintf("%s : unexpected witness data found", __func__));
            }
        }
    }

    // After the coinbase witness reserved value and commitment are verified,
    // we can check if the block weight passes (before we've checked the
    // coinbase witness, it would be possible for the weight to be too
    // large by filling up the coinbase witness, which doesn't change
    // the block hash, so we couldn't mark the block as permanently
    // failed).
    if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-blk-weight", strprintf("%s : weight limit failed", __func__));
    }

    return true;
}

// Verify hash target and signature of coinstake tx
bool VerifyHashTarget(CChainState* active_chainstate, BlockValidationState& state, CBlockIndex* pindexPrev, const CBlock& block, uint256& hashProof)
{
    AssertLockHeld(cs_main);

    bool fValid;
    const uint256 hash = block.GetHash();
    if (hash != Params().GetConsensus().hashGenesisBlock) {
        if (block.IsProofOfStake()) {
            fValid = true;
            if (!CheckProofOfStake(active_chainstate, state, pindexPrev, block.vtx[1], block.nBits, hashProof, block.nTime)) {
                fValid = false;
                if (gArgs.GetBoolArg("-debug", false) && gArgs.GetBoolArg("-printcoinstake", false)){
                LogPrintf("WARNING: VerifyHashTarget(): check proof-of-stake failed for block %s\n", hash.ToString());
                }
            } 
            LogPrint(BCLog::POS, "%s : hashProof %s / nBits %08x\n", __func__, hashProof.ToString(), block.nBits);
            return fValid;
        }
    }
    

    return true;
}

bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested)
{
    AssertLockHeld(cs_main);
    // Check for duplicate
    uint256 hash = block.GetHash();
    BlockMap::iterator miSelf = m_block_index.find(hash);
    if (hash != chainparams.GetConsensus().hashGenesisBlock) {
        if (miSelf != m_block_index.end()) {
            // Block header is already known.
            CBlockIndex* pindex = miSelf->second;
            if (ppindex)
                *ppindex = pindex;
            if (pindex->nStatus & BLOCK_FAILED_MASK) {
                LogPrintf("ERROR: %s: block %s is marked invalid\n", __func__, hash.ToString());
                return state.Invalid(BlockValidationResult::BLOCK_CACHED_INVALID, "duplicate");
            }
            return true;
        }

        if (!CheckBlockHeader(block, state, chainparams.GetConsensus())) {
            LogPrint(BCLog::VALIDATION, "%s: Consensus::CheckBlockHeader: %s, %s\n", __func__, hash.ToString(), state.ToString());
            return false;
        }

        // Get prev block index
        CBlockIndex* pindexPrev = nullptr;
        BlockMap::iterator mi = m_block_index.find(block.hashPrevBlock);
        if (mi == m_block_index.end()) {
            LogPrintf("ERROR: %s: prev block not found\n", __func__);
            return state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, "prev-blk-not-found");
        }
        pindexPrev = (*mi).second;
        if (pindexPrev->nStatus & BLOCK_FAILED_MASK) {
            LogPrintf("ERROR: %s: prev block invalid\n", __func__);
            return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, "bad-prevblk");
        }
        if (!ContextualCheckBlockHeader(block, state, *this, chainparams, pindexPrev, GetAdjustedTime()))
            return error("%s: Consensus::ContextualCheckBlockHeader: %s, %s", __func__, hash.ToString(), state.ToString());

        /* Determine if this block descends from any block which has been found
         * invalid (m_failed_blocks), then mark pindexPrev and any blocks between
         * them as failed. For example:
         *
         *                D3
         *              /
         *      B2 - C2
         *    /         \
         *  A             D2 - E2 - F2
         *    \
         *      B1 - C1 - D1 - E1
         *
         * In the case that we attempted to reorg from E1 to F2, only to find
         * C2 to be invalid, we would mark D2, E2, and F2 as BLOCK_FAILED_CHILD
         * but NOT D3 (it was not in any of our candidate sets at the time).
         *
         * In any case D3 will also be marked as BLOCK_FAILED_CHILD at restart
         * in LoadBlockIndex.
         */
        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {
            // The above does not mean "invalid": it checks if the previous block
            // hasn't been validated up to BLOCK_VALID_SCRIPTS. This is a performance
            // optimization, in the common case of adding a new block to the tip,
            // we don't need to iterate over the failed blocks list.
            for (const CBlockIndex* failedit : m_failed_blocks) {
                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {
                    assert(failedit->nStatus & BLOCK_FAILED_VALID);
                    CBlockIndex* invalid_walk = pindexPrev;
                    while (invalid_walk != failedit) {
                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;
                        setDirtyBlockIndex.insert(invalid_walk);
                        invalid_walk = invalid_walk->pprev;
                    }
                    LogPrintf("ERROR: %s: prev block invalid\n", __func__);
                    return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, "bad-prevblk");
                }
            }
        }
    }
    bool force_accept = true;
    if (state.nodeId >= 0 &&
        state.m_chainman->HaveActiveChainstate() &&
        !state.m_chainman->ActiveChainstate().IsInitialBlockDownload()) {
        if (!AddNodeHeader(state.nodeId, hash)) {
            LogPrintf("ERROR: %s: DoS limits\n", __func__);
            return state.Invalid(BlockValidationResult::DOS_20, "dos-limits");
        }
        force_accept = false;
    }
    CBlockIndex* pindex = AddToBlockIndex(block);
    if (force_accept) {
        pindex->nFlags |= CBlockIndex::BLOCK_ACCEPTED;
    }

    if (ppindex)
        *ppindex = pindex;

    return true;
}

// Exposed wrapper for AcceptBlockHeader
bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)
{
    state.m_chainman = this;
    AssertLockNotHeld(cs_main);
    {
        LOCK(cs_main);
        for (const CBlockHeader& header : headers) {
            CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast
            bool accepted = m_blockman.AcceptBlockHeader(
                header, state, chainparams, &pindex);
            ActiveChainstate().CheckBlockIndex();

            if (!accepted) {
                return false;
            }
            if (ppindex) {
                *ppindex = pindex;
            }
        }
    }
    if (NotifyHeaderTip(ActiveChainstate())) {
        if (ActiveChainstate().IsInitialBlockDownload() && ppindex && *ppindex) {
            LogPrintf("Synchronizing blockheaders, height: %d (~%.2f%%)\n", (*ppindex)->nHeight, 100.0/((*ppindex)->nHeight+(GetAdjustedTime() - (*ppindex)->GetBlockTime()) / Params().GetConsensus().nPowTargetSpacing) * (*ppindex)->nHeight);
        }
    }
    return true;
}

inline unsigned int StakeEntropyBitFromHash(uint256& hash) {
    return (unsigned int) hash.GetLow64() & 1llu;
}

// These checks can only be done when all previous block have been added.
bool CChainState::PoSContextualBlockChecks(const CBlock& block, BlockValidationState& state, CBlockIndex* pindex, bool fJustCheck)
{
    uint256 hash = block.GetHash();
    uint256 hashtarget = uint256();


    // If this is a reorg, check that it is not too deep 
    int nMaxReorgDepth = Params().GetConsensus().MaxReorganizationDepth; 
    if (this->m_chain.Height() - pindex->nHeight >= nMaxReorgDepth)
        return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, "older-than-maxreorg", "forked chain older than max reorganization depth");        
    
    if (block.IsProofOfStake() && !pindex->IsProofOfStake()){
            pindex->SetProofOfStake();
    }

    // PoSV: get stake entropy bit
    if (!pindex->SetStakeEntropyBit(StakeEntropyBitFromHash(hash))) {
        return error("%s - couldnt get/set stake entropy bit (height %d)\n", __func__, pindex->nHeight);
    }

    // PoSV: compute stake modifier
    uint64_t nStakeModifier = 0;
    bool fGeneratedStakeModifier = false;
    if (!ComputeNextStakeModifier(this, pindex, nStakeModifier, fGeneratedStakeModifier)) {
        return error("%s - couldnt get next stake modifier (height %d)\n", __func__, pindex->nHeight);
    }
    pindex->SetStakeModifier(nStakeModifier, fGeneratedStakeModifier);
    unsigned int nStakeModifierChecksum  = GetStakeModifierChecksum(pindex);

    // PoSV: calculate proofhash value
    uint256 hashProofOfStake = uint256();
    if (!VerifyHashTarget(this, state, pindex->pprev, block, hashProofOfStake)) {
            return error("%s - error calculating hashproof (height %d)\n", __func__, pindex->nHeight);
    }
    pindex->hashProofOfStake = hashtarget;
    pindex->nStakeModifierChecksum = nStakeModifierChecksum;

    if (!CheckStakeModifierCheckpoints(pindex->nHeight, pindex->nStakeModifierChecksum ))
        return error("%s: Rejected by checkpoint height=%d, modifier=0x%016llx checksum=%08x", __func__, pindex->nHeight, nStakeModifier, nStakeModifierChecksum );

    bool fUpdate = !(fJustCheck);
    if (pindex->IsProofOfStake() 
        && !this->IsInitialBlockDownload()
        && !particl::CheckStakeUnique(block, fUpdate)) {
        state.nFlags |= CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE;
    }
        
    if (fJustCheck)
        return true;


    // write everything to index
    if (block.IsProofOfStake())
    {
        if(!pindex->IsProofOfStake())
            pindex->SetProofOfStake();

        pindex->prevoutStake = block.vtx[1]->vin[0].prevout;
        pindex->nStakeTime = block.vtx[1]->nTime;
        if(IsProtocolV01(block.nTime))
            pindex->hashProofOfStake = hashProofOfStake;
    }

    


    setDirtyBlockIndex.insert(pindex);  // queue a write to disk

    return true;

}


/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */
bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock, bool fCheckPoS)
{
    const CBlock& block = *pblock;

    if (fNewBlock) *fNewBlock = false;
    AssertLockHeld(cs_main);

    CBlockIndex *pindexDummy = nullptr;
    CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;

    bool accepted_header = m_blockman.AcceptBlockHeader(block, state, m_params, &pindex, fRequested);
    CheckBlockIndex();

    if (!accepted_header)
        return false;
        
    // We should only accept blocks that can be connected to a prev block with validated PoS
    if (fCheckPoS && pindex->pprev && !pindex->pprev->IsValid(BLOCK_VALID_TRANSACTIONS)) {
        return error("%s: Block(%s) does not connect to any valid known block", __func__, block.GetHash().ToString());
    }

    // Try to process all requested blocks that we don't have, but only
    // process an unrequested block if it's new and has enough work to
    // advance our tip, and isn't too many blocks ahead.
    bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;
    bool fHasMoreOrSameWork = (m_chain.Tip() ? pindex->nChainWork >= m_chain.Tip()->nChainWork : true);
    // Blocks that are too out-of-order needlessly limit the effectiveness of
    // pruning, because pruning will not delete block files that contain any
    // blocks which are too close in height to the tip.  Apply this test
    // regardless of whether pruning is enabled; it should generally be safe to
    // not process unrequested blocks.
    bool fTooFarAhead = (pindex->nHeight > int(m_chain.Height() + MIN_BLOCKS_TO_KEEP));

    // TODO: Decouple this function from the block download logic by removing fRequested
    // This requires some new chain data structure to efficiently look up if a
    // block is in a chain leading to a candidate for best tip, despite not
    // being such a candidate itself.

    // TODO: deal better with return value and error conditions for duplicate
    // and unrequested blocks.
    if (fAlreadyHave) return true;
    if (!fRequested) {  // If we didn't ask for it:
        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned
        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains
        if (fTooFarAhead) return true;        // Block height is too high

        // Protect against DoS attacks from low-work chains.
        // If our tip is behind, a peer could try to send us
        // low-work blocks on a fake chain that we would never
        // request; don't process these.
        if (pindex->nChainWork < nMinimumChainWork) return true;
    }

    if (!CheckBlock(block, state, m_params.GetConsensus()) ||
        !ContextualCheckBlock(block, state, m_params.GetConsensus(), pindex->pprev)) {
        if (state.IsInvalid() && state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {
            pindex->nStatus |= BLOCK_FAILED_VALID;
            setDirtyBlockIndex.insert(pindex);
        }
        return error("%s: %s", __func__, state.ToString());
    }

    // PoSV: check PoS
    if (fCheckPoS && !PoSContextualBlockChecks(block, state, pindex, false)) {
        LogPrint(BCLog::POS, "%s: Failed  on Hash = %s\n",__func__, block.GetHash().ToString());
        pindex->nStatus |= BLOCK_FAILED_VALID;
        setDirtyBlockIndex.insert(pindex);
        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, "bad-pos", "proof of stake is incorrect");
    }


    RemoveNodeHeader(pindex->GetBlockHash());
    pindex->nFlags |= CBlockIndex::BLOCK_ACCEPTED;
    setDirtyBlockIndex.insert(pindex);

    // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW
    // (but if it does not build on our best tip, let the SendMessages loop relay it)
    if (!(state.nFlags &  (CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE))  &&
        !IsInitialBlockDownload() && m_chain.Tip() == pindex->pprev) {
        GetMainSignals().NewPoWValidBlock(pindex, pblock);
        }
    // Write block to history file
    if (fNewBlock) *fNewBlock = true;
    try {
        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, m_chain, m_params, dbp);
        if (blockPos.IsNull()) {
            state.Error(strprintf("%s: Failed to find position to write new block to disk", __func__));
            return false;
        }
        ReceivedBlockTransactions(block, pindex, blockPos);
    } catch (const std::runtime_error& e) {
        return AbortNode(state, std::string("System error: ") + e.what());
    }

    FlushStateToDisk(state, FlushStateMode::NONE);

    CheckBlockIndex();

    return true;
}

bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& block, bool force_processing, bool* new_block, NodeId node_id, PeerManager *peerman)
{
    AssertLockNotHeld(cs_main);

    CBlockIndex *pindex = nullptr;
    {

        if (new_block) *new_block = false;
        BlockValidationState state;
        state.m_chainman = this;
        if (peerman) {
            state.m_peerman = peerman;
        } else {
            state.m_peerman = this->m_peerman;
        }
        if (node_id > -1) {
            state.nodeId = node_id;
        }

        // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.
        // Therefore, the following critical section must include the CheckBlock() call as well.

        LOCK(cs_main);

        // Skipping AcceptBlock() for CheckBlock() failures means that we will never mark a block as invalid if
        // CheckBlock() fails.  This is protective against consensus failure if there are any unknown forms of block
        // malleability that cause CheckBlock() to fail; see e.g. CVE-2012-2459 and
        // https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-February/016697.html.  Because CheckBlock() is
        // not very expensive, the anti-DoS benefits of caching failure (of a definitely-invalid block) are not substantial.
        bool ret = CheckBlock(*block, state, chainparams.GetConsensus());
        if (ret) {
            // Store to disk
            ret = ActiveChainstate().AcceptBlock(block, state, &pindex, force_processing, nullptr, new_block);
        }
        if (!ret) {
            GetMainSignals().BlockChecked(*block, state);
            return error("%s: AcceptBlock FAILED (%s)", __func__, state.ToString());
        }
        if ((block->IsProofOfStake() && pindex) && state.nFlags & CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE) {
            pindex->nFlags |= CBlockIndex::BLOCK_FAILED_DUPLICATE_STAKE;
            setDirtyBlockIndex.insert(pindex);
            LogPrint(BCLog::POS, "%s Marking duplicate stake: %s.\n", __func__, pindex->GetBlockHash().ToString());
            GetMainSignals().BlockChecked(*block, state);
        }
    }

    NotifyHeaderTip(ActiveChainstate());

    BlockValidationState state; // Only used to report errors, not invalidity - ignore it
    state.m_chainman = this;
    if (peerman) {
        state.m_peerman = peerman;
    } else {
        state.m_peerman = this->m_peerman;
    }
    if (!ActiveChainstate().ActivateBestChain(state, block)) {
        return error("%s: ActivateBestChain failed (%s)", __func__, state.ToString());
    }

    return true;
}

bool TestBlockValidity(BlockValidationState& state,
                       const CChainParams& chainparams,
                       CChainState& chainstate,
                       const CBlock& block,
                       CBlockIndex* pindexPrev,
                       bool fCheckPOW,
                       bool fCheckMerkleRoot)
{
    AssertLockHeld(cs_main);
    assert(pindexPrev && pindexPrev == chainstate.m_chain.Tip());
    CCoinsViewCache viewNew(&chainstate.CoinsTip());
    uint256 block_hash(block.GetHash());
    CBlockIndex indexDummy(block);
    indexDummy.pprev = pindexPrev;
    indexDummy.nHeight = pindexPrev->nHeight + 1;
    indexDummy.phashBlock = &block_hash;

    // NOTE: CheckBlockHeader is called by CheckBlock
    if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))
        return error("%s: Consensus::ContextualCheckBlockHeader: %s", __func__, state.ToString());
    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))
        return error("%s: Consensus::CheckBlock: %s", __func__, state.ToString());
    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))
        return error("%s: Consensus::ContextualCheckBlock: %s", __func__, state.ToString());
    if (!chainstate.ConnectBlock(block, state, &indexDummy, viewNew, true)) {
        return false;
    }
    assert(state.IsValid());

    return true;
}

/**
 * BLOCK PRUNING CODE
 */

void BlockManager::PruneOneBlockFile(const int fileNumber)
{
    AssertLockHeld(cs_main);
    LOCK(cs_LastBlockFile);

    for (const auto& entry : m_block_index) {
        CBlockIndex* pindex = entry.second;
        if (pindex->nFile == fileNumber) {
            pindex->nStatus &= ~BLOCK_HAVE_DATA;
            pindex->nStatus &= ~BLOCK_HAVE_UNDO;
            pindex->nFile = 0;
            pindex->nDataPos = 0;
            pindex->nUndoPos = 0;
            setDirtyBlockIndex.insert(pindex);

            // Prune from m_blocks_unlinked -- any block we prune would have
            // to be downloaded again in order to consider its chain, at which
            // point it would be considered as a candidate for
            // m_blocks_unlinked or setBlockIndexCandidates.
            auto range = m_blocks_unlinked.equal_range(pindex->pprev);
            while (range.first != range.second) {
                std::multimap<CBlockIndex *, CBlockIndex *>::iterator _it = range.first;
                range.first++;
                if (_it->second == pindex) {
                    m_blocks_unlinked.erase(_it);
                }
            }
        }
    }

    vinfoBlockFile[fileNumber].SetNull();
    setDirtyFileInfo.insert(fileNumber);
}

void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, int chain_tip_height)
{
    assert(fPruneMode && nManualPruneHeight > 0);

    LOCK2(cs_main, cs_LastBlockFile);
    if (chain_tip_height < 0) {
        return;
    }

    // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)
    unsigned int nLastBlockWeCanPrune = std::min((unsigned)nManualPruneHeight, chain_tip_height - MIN_BLOCKS_TO_KEEP);
    int count = 0;
    for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {
        if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune) {
            continue;
        }
        PruneOneBlockFile(fileNumber);
        setFilesToPrune.insert(fileNumber);
        count++;
    }
    LogPrintf("Prune (Manual): prune_height=%d removed %d blk/rev pairs\n", nLastBlockWeCanPrune, count);
}

/* This function is called from the RPC code for pruneblockchain */
void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeight)
{
    BlockValidationState state;
    if (!active_chainstate.FlushStateToDisk(
            state, FlushStateMode::NONE, nManualPruneHeight)) {
        LogPrintf("%s: failed to flush state (%s)\n", __func__, state.ToString());
    }
}

void BlockManager::FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight, int chain_tip_height, int prune_height, bool is_ibd)
{
    LOCK2(cs_main, cs_LastBlockFile);
    if (chain_tip_height < 0 || nPruneTarget == 0) {
        return;
    }
    if ((uint64_t)chain_tip_height <= nPruneAfterHeight) {
        return;
    }

    unsigned int nLastBlockWeCanPrune = std::min(prune_height, chain_tip_height - static_cast<int>(MIN_BLOCKS_TO_KEEP));
    uint64_t nCurrentUsage = CalculateCurrentUsage();
    // We don't check to prune until after we've allocated new space for files
    // So we should leave a buffer under our target to account for another allocation
    // before the next pruning.
    uint64_t nBuffer = BLOCKFILE_CHUNK_SIZE + UNDOFILE_CHUNK_SIZE;
    uint64_t nBytesToPrune;
    int count = 0;

    if (nCurrentUsage + nBuffer >= nPruneTarget) {
        // On a prune event, the chainstate DB is flushed.
        // To avoid excessive prune events negating the benefit of high dbcache
        // values, we should not prune too rapidly.
        // So when pruning in IBD, increase the buffer a bit to avoid a re-prune too soon.
        if (is_ibd) {
            // Since this is only relevant during IBD, we use a fixed 10%
            nBuffer += nPruneTarget / 10;
        }

        for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {
            nBytesToPrune = vinfoBlockFile[fileNumber].nSize + vinfoBlockFile[fileNumber].nUndoSize;

            if (vinfoBlockFile[fileNumber].nSize == 0) {
                continue;
            }

            if (nCurrentUsage + nBuffer < nPruneTarget) { // are we below our target?
                break;
            }

            // don't prune files that could have a block within MIN_BLOCKS_TO_KEEP of the main chain's tip but keep scanning
            if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune) {
                continue;
            }

            PruneOneBlockFile(fileNumber);
            // Queue up the files for removal
            setFilesToPrune.insert(fileNumber);
            nCurrentUsage -= nBytesToPrune;
            count++;
        }
    }

    LogPrint(BCLog::PRUNE, "Prune: target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\n",
           nPruneTarget/1024/1024, nCurrentUsage/1024/1024,
           ((int64_t)nPruneTarget - (int64_t)nCurrentUsage)/1024/1024,
           nLastBlockWeCanPrune, count);
}

CBlockIndex * BlockManager::InsertBlockIndex(const uint256& hash)
{
    AssertLockHeld(cs_main);

    if (hash.IsNull())
        return nullptr;

    // Return existing
    BlockMap::iterator mi = m_block_index.find(hash);
    if (mi != m_block_index.end())
        return (*mi).second;

    // Create new
    CBlockIndex* pindexNew = new CBlockIndex();
    mi = m_block_index.insert(std::make_pair(hash, pindexNew)).first;
    pindexNew->phashBlock = &((*mi).first);

    return pindexNew;
}

bool BlockManager::LoadBlockIndex(
    const Consensus::Params& consensus_params,
    CBlockTreeDB& blocktree,
    std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)
{
    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); }))
        return false;

    // Calculate nChainWork
    std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;
    vSortedByHeight.reserve(m_block_index.size());
    for (const std::pair<const uint256, CBlockIndex*>& item : m_block_index)
    {
        CBlockIndex* pindex = item.second;
        vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));
    }
    sort(vSortedByHeight.begin(), vSortedByHeight.end());
    for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)
    {
        if (ShutdownRequested()) return false;
        CBlockIndex* pindex = item.second;
        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);
        pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);
        // We can link the chain of blocks for which we've received transactions at some point.
        // Pruned nodes may have deleted the block.
        if (pindex->nTx > 0) {
            if (pindex->pprev) {
                if (pindex->pprev->HaveTxsDownloaded()) {
                    pindex->nChainTx = pindex->pprev->nChainTx + pindex->nTx;
                } else {
                    pindex->nChainTx = 0;
                    m_blocks_unlinked.insert(std::make_pair(pindex->pprev, pindex));
                }
            } else {
                pindex->nChainTx = pindex->nTx;
            }
        }
        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {
            pindex->nStatus |= BLOCK_FAILED_CHILD;
            setDirtyBlockIndex.insert(pindex);
        }
        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr)) {
            block_index_candidates.insert(pindex);
        }
        if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))
            pindexBestInvalid = pindex;
        if (pindex->pprev)
            pindex->BuildSkip();
        if (pindex->IsValid(BLOCK_VALID_TREE) && (pindexBestHeader == nullptr || CBlockIndexWorkComparator()(pindexBestHeader, pindex)))
            pindexBestHeader = pindex;

        // PoSV: calculate stake modifier checksum
        pindex->nStakeModifierChecksum = GetStakeModifierChecksum(pindex);
            if (!CheckStakeModifierCheckpoints(pindex->nHeight, pindex->nStakeModifierChecksum))
            {
                LogPrint(BCLog::POS, "%s Failed Checksum at nHeight=%d, nStakeModifierChecksum=0x%016x\n",__func__, pindex->nHeight, pindex->nStakeModifierChecksum);
                return false;
            }
    }

    return true;
}

void BlockManager::Unload() {
    m_failed_blocks.clear();
    m_blocks_unlinked.clear();

    for (const BlockMap::value_type& entry : m_block_index) {
        delete entry.second;
    }

    m_block_index.clear();
}

bool CChainState::LoadBlockIndexDB()
{
    if (!m_blockman.LoadBlockIndex(
            m_params.GetConsensus(), *pblocktree,
            setBlockIndexCandidates)) {
        return false;
    }

    // Load block file info
    pblocktree->ReadLastBlockFile(nLastBlockFile);
    vinfoBlockFile.resize(nLastBlockFile + 1);
    LogPrintf("%s: last block file = %i\n", __func__, nLastBlockFile);
    for (int nFile = 0; nFile <= nLastBlockFile; nFile++) {
        pblocktree->ReadBlockFileInfo(nFile, vinfoBlockFile[nFile]);
    }
    LogPrintf("%s: last block file info: %s\n", __func__, vinfoBlockFile[nLastBlockFile].ToString());
    for (int nFile = nLastBlockFile + 1; true; nFile++) {
        CBlockFileInfo info;
        if (pblocktree->ReadBlockFileInfo(nFile, info)) {
            vinfoBlockFile.push_back(info);
        } else {
            break;
        }
    }

    // Check presence of blk files
    LogPrintf("Checking all blk files are present...\n");
    std::set<int> setBlkDataFiles;
    for (const std::pair<const uint256, CBlockIndex*>& item : m_blockman.m_block_index) {
        CBlockIndex* pindex = item.second;
        if (pindex->nStatus & BLOCK_HAVE_DATA) {
            setBlkDataFiles.insert(pindex->nFile);
        }
    }
    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)
    {
        FlatFilePos pos(*it, 0);
        if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {
            return false;
        }
    }

    // Check whether we have ever pruned block & undo files
    pblocktree->ReadFlag("prunedblockfiles", fHavePruned);
    if (fHavePruned)
        LogPrintf("LoadBlockIndexDB(): Block files have previously been pruned\n");

    // Check whether we need to continue reindexing
    bool fReindexing = false;
    pblocktree->ReadReindexing(fReindexing);
    if(fReindexing) fReindex = true;

    return true;
}

void CChainState::LoadMempool(const ArgsManager& args)
{
    if (!m_mempool) return;
    if (args.GetArg("-persistmempool", DEFAULT_PERSIST_MEMPOOL)) {
        ::LoadMempool(*m_mempool, *this);
    }
    m_mempool->SetIsLoaded(!ShutdownRequested());
}

bool CChainState::LoadChainTip()
{
    AssertLockHeld(cs_main);
    const CCoinsViewCache& coins_cache = CoinsTip();
    assert(!coins_cache.GetBestBlock().IsNull()); // Never called when the coins view is empty
    const CBlockIndex* tip = m_chain.Tip();

    if (tip && tip->GetBlockHash() == coins_cache.GetBestBlock()) {
        return true;
    }

    // Load pointer to end of best chain
    CBlockIndex* pindex = m_blockman.LookupBlockIndex(coins_cache.GetBestBlock());
    if (!pindex) {
        return false;
    }
    m_chain.SetTip(pindex);
    PruneBlockIndexCandidates();

    tip = m_chain.Tip();
    LogPrintf("Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\n",
              tip->GetBlockHash().ToString(),
              m_chain.Height(),
              FormatISO8601DateTime(tip->GetBlockTime()),
              GuessVerificationProgress(m_params.TxData(), tip));
    return true;
}

CVerifyDB::CVerifyDB()
{
    uiInterface.ShowProgress(_("Verifying blocks…").translated, 0, false);
}

CVerifyDB::~CVerifyDB()
{
    uiInterface.ShowProgress("", 100, false);
}

bool CVerifyDB::VerifyDB(
    CChainState& chainstate,
    const CChainParams& chainparams,
    CCoinsView& coinsview,
    int nCheckLevel, int nCheckDepth)
{
    AssertLockHeld(cs_main);

    if (chainstate.m_chain.Tip() == nullptr || chainstate.m_chain.Tip()->pprev == nullptr)
        return true;

    // Verify blocks in the best chain
    if (nCheckDepth <= 0 || nCheckDepth > chainstate.m_chain.Height())
        nCheckDepth = chainstate.m_chain.Height();
    nCheckLevel = std::max(0, std::min(4, nCheckLevel));
    LogPrintf("Verifying last %i blocks at level %i\n", nCheckDepth, nCheckLevel);
    CCoinsViewCache coins(&coinsview);
    CBlockIndex* pindex;
    CBlockIndex* pindexFailure = nullptr;
    int nGoodTransactions = 0;
    BlockValidationState state;
    int reportDone = 0;
    LogPrintf("[0%%]..."); /* Continued */

    const bool is_snapshot_cs{!chainstate.m_from_snapshot_blockhash};

    for (pindex = chainstate.m_chain.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {
        const int percentageDone = std::max(1, std::min(99, (int)(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));
        if (reportDone < percentageDone/10) {
            // report every 10% step
            LogPrintf("[%d%%]...", percentageDone); /* Continued */
            reportDone = percentageDone/10;
        }
        uiInterface.ShowProgress(_("Verifying blocks…").translated, percentageDone, false);
        if (pindex->nHeight <= chainstate.m_chain.Height()-nCheckDepth)
            break;
        if ((fPruneMode || is_snapshot_cs) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {
            // If pruning or running under an assumeutxo snapshot, only go
            // back as far as we have data.
            LogPrintf("VerifyDB(): block verification stopping at height %d (pruning, no data)\n", pindex->nHeight);
            break;
        }
        CBlock block;
        // check level 0: read from disk
        if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))
            return error("VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s", pindex->nHeight, pindex->GetBlockHash().ToString());
        // check level 1: verify block validity
        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))
            return error("%s: *** found bad block at %d, hash=%s (%s)\n", __func__,
                         pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());
        // check level 2: verify undo validity
        if (nCheckLevel >= 2 && pindex) {
            CBlockUndo undo;
            if (!pindex->GetUndoPos().IsNull()) {
                if (!UndoReadFromDisk(undo, pindex)) {
                    return error("VerifyDB(): *** found bad undo data at %d, hash=%s\n", pindex->nHeight, pindex->GetBlockHash().ToString());
                }
            }
        }
        // check level 3: check for inconsistencies during memory-only disconnect of tip blocks
        size_t curr_coins_usage = coins.DynamicMemoryUsage() + chainstate.CoinsTip().DynamicMemoryUsage();

        if (nCheckLevel >= 3 && curr_coins_usage <= chainstate.m_coinstip_cache_size_bytes) {
            assert(coins.GetBestBlock() == pindex->GetBlockHash());
            DisconnectResult res = chainstate.DisconnectBlock(block, pindex, coins);
            if (res == DISCONNECT_FAILED) {
                return error("VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s", pindex->nHeight, pindex->GetBlockHash().ToString());
            }
            if (res == DISCONNECT_UNCLEAN) {
                nGoodTransactions = 0;
                pindexFailure = pindex;
            } else {
                nGoodTransactions += block.vtx.size();
            }
        }
        if (ShutdownRequested()) return true;
    }
    if (pindexFailure)
        return error("VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\n", chainstate.m_chain.Height() - pindexFailure->nHeight + 1, nGoodTransactions);

    // store block count as we move pindex at check level >= 4
    int block_count = chainstate.m_chain.Height() - pindex->nHeight;

    // check level 4: try reconnecting blocks
    if (nCheckLevel >= 4) {
        while (pindex != chainstate.m_chain.Tip()) {
            const int percentageDone = std::max(1, std::min(99, 100 - (int)(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * 50)));
            if (reportDone < percentageDone/10) {
                // report every 10% step
                LogPrintf("[%d%%]...", percentageDone); /* Continued */
                reportDone = percentageDone/10;
            }
            uiInterface.ShowProgress(_("Verifying blocks…").translated, percentageDone, false);
            pindex = chainstate.m_chain.Next(pindex);
            CBlock block;
            if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))
                return error("VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s", pindex->nHeight, pindex->GetBlockHash().ToString());
            if (!chainstate.ConnectBlock(block, state, pindex, coins)) {
                return error("VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());
            }
            if (ShutdownRequested()) return true;
        }
    }

    LogPrintf("[DONE].\n");
    LogPrintf("No coin database inconsistencies in last %i blocks (%i transactions)\n", block_count, nGoodTransactions);

    return true;
}

/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */
bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs)
{
    // TODO: merge with ConnectBlock
    CBlock block;
    if (!ReadBlockFromDisk(block, pindex, m_params.GetConsensus())) {
        return error("ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s", pindex->nHeight, pindex->GetBlockHash().ToString());
    }

    for (const CTransactionRef& tx : block.vtx) {
        if (!tx->IsCoinBase()) {
            for (const CTxIn &txin : tx->vin) {
                inputs.SpendCoin(txin.prevout);
            }
        }
        // Pass check = true as every addition may be an overwrite.
        AddCoins(inputs, *tx, pindex->nHeight, true);
    }
    return true;
}

bool CChainState::ReplayBlocks()
{
    LOCK(cs_main);

    CCoinsView& db = this->CoinsDB();
    CCoinsViewCache cache(&db);

    std::vector<uint256> hashHeads = db.GetHeadBlocks();
    if (hashHeads.empty()) return true; // We're already in a consistent state.
    if (hashHeads.size() != 2) return error("ReplayBlocks(): unknown inconsistent state");

    uiInterface.ShowProgress(_("Replaying blocks…").translated, 0, false);
    LogPrintf("Replaying blocks\n");

    const CBlockIndex* pindexOld = nullptr;  // Old tip during the interrupted flush.
    const CBlockIndex* pindexNew;            // New tip during the interrupted flush.
    const CBlockIndex* pindexFork = nullptr; // Latest block common to both the old and the new tip.

    if (m_blockman.m_block_index.count(hashHeads[0]) == 0) {
        return error("ReplayBlocks(): reorganization to unknown block requested");
    }
    pindexNew = m_blockman.m_block_index[hashHeads[0]];

    if (!hashHeads[1].IsNull()) { // The old tip is allowed to be 0, indicating it's the first flush.
        if (m_blockman.m_block_index.count(hashHeads[1]) == 0) {
            return error("ReplayBlocks(): reorganization from unknown block requested");
        }
        pindexOld = m_blockman.m_block_index[hashHeads[1]];
        pindexFork = LastCommonAncestor(pindexOld, pindexNew);
        assert(pindexFork != nullptr);
    }

    // Rollback along the old branch.
    while (pindexOld != pindexFork) {
        if (pindexOld->nHeight > 0) { // Never disconnect the genesis block.
            CBlock block;
            if (!ReadBlockFromDisk(block, pindexOld, m_params.GetConsensus())) {
                return error("RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());
            }
            LogPrintf("Rolling back %s (%i)\n", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);
            DisconnectResult res = DisconnectBlock(block, pindexOld, cache);
            if (res == DISCONNECT_FAILED) {
                return error("RollbackBlock(): DisconnectBlock failed at %d, hash=%s", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());
            }
            // If DISCONNECT_UNCLEAN is returned, it means a non-existing UTXO was deleted, or an existing UTXO was
            // overwritten. It corresponds to cases where the block-to-be-disconnect never had all its operations
            // applied to the UTXO set. However, as both writing a UTXO and deleting a UTXO are idempotent operations,
            // the result is still a version of the UTXO set with the effects of that block undone.
        }
        pindexOld = pindexOld->pprev;
    }

    // Roll forward from the forking point to the new tip.
    int nForkHeight = pindexFork ? pindexFork->nHeight : 0;
    for (int nHeight = nForkHeight + 1; nHeight <= pindexNew->nHeight; ++nHeight) {
        const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);
        LogPrintf("Rolling forward %s (%i)\n", pindex->GetBlockHash().ToString(), nHeight);
        uiInterface.ShowProgress(_("Replaying blocks…").translated, (int) ((nHeight - nForkHeight) * 100.0 / (pindexNew->nHeight - nForkHeight)) , false);
        if (!RollforwardBlock(pindex, cache)) return false;
    }

    cache.SetBestBlock(pindexNew->GetBlockHash());
    cache.Flush();
    uiInterface.ShowProgress("", 100, false);
    return true;
}

bool CChainState::NeedsRedownload() const
{
    AssertLockHeld(cs_main);

    // At and above m_params.SegwitHeight, segwit consensus rules must be validated
    CBlockIndex* block{m_chain.Tip()};

    while (block != nullptr && DeploymentActiveAt(*block, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {
        if (!(block->nStatus & BLOCK_OPT_WITNESS)) {
            // block is insufficiently validated for a segwit client
            return true;
        }
        block = block->pprev;
    }

    return false;
}

void CChainState::UnloadBlockIndex() {
    nBlockSequenceId = 1;
    setBlockIndexCandidates.clear();
}

// May NOT be used after any connections are up as much
// of the peer-processing logic assumes a consistent
// block index state
void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman)
{
    LOCK(cs_main);
    chainman.Unload();
    pindexBestInvalid = nullptr;
    pindexBestHeader = nullptr;
    if (mempool) mempool->clear();
    vinfoBlockFile.clear();
    nLastBlockFile = 0;
    setDirtyBlockIndex.clear();
    setDirtyFileInfo.clear();
    g_versionbitscache.Clear();
    for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {
        warningcache[b].clear();
    }
    fHavePruned = false;
}

bool ChainstateManager::LoadBlockIndex()
{
    AssertLockHeld(cs_main);
    // Load block index from databases
    bool needs_init = fReindex;
    if (!fReindex) {
        bool ret = ActiveChainstate().LoadBlockIndexDB();
        if (!ret) return false;
        needs_init = m_blockman.m_block_index.empty();
    }

    if (needs_init) {
        // Everything here is for *new* reindex/DBs. Thus, though
        // LoadBlockIndexDB may have set fReindex if we shut down
        // mid-reindex previously, we don't check fReindex and
        // instead only check it prior to LoadBlockIndexDB to set
        // needs_init.

        LogPrintf("Initializing databases...\n");
    }
    return true;
}

bool CChainState::LoadGenesisBlock()
{
    LOCK(cs_main);

    // Check whether we're already initialized by checking for genesis in
    // m_blockman.m_block_index. Note that we can't use m_chain here, since it is
    // set based on the coins db, not the block index db, which is the only
    // thing loaded at this point.
    if (m_blockman.m_block_index.count(m_params.GenesisBlock().GetHash()))
        return true;

    try {
        const CBlock& block = m_params.GenesisBlock();
        FlatFilePos blockPos = SaveBlockToDisk(block, 0, m_chain, m_params, nullptr);
        if (blockPos.IsNull())
            return error("%s: writing genesis block to disk failed", __func__);
        CBlockIndex *pindex = m_blockman.AddToBlockIndex(block);
        ReceivedBlockTransactions(block, pindex, blockPos);
    } catch (const std::runtime_error& e) {
        return error("%s: failed to write genesis block: %s", __func__, e.what());
    }

    return true;
}

void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp, ChainstateManager *chainman)
{
    // Map of disk positions for blocks with unknown parent (only used for reindex)
    static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;
    int64_t nStart = GetTimeMillis();

    int nLoaded = 0;
    try {
        // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor
        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);
        uint64_t nRewind = blkdat.GetPos();
        while (!blkdat.eof()) {
            if (ShutdownRequested()) return;

            blkdat.SetPos(nRewind);
            nRewind++; // start one byte further next time, in case of failure
            blkdat.SetLimit(); // remove former limit
            unsigned int nSize = 0;
            try {
                // locate a header
                unsigned char buf[CMessageHeader::MESSAGE_START_SIZE];
                blkdat.FindByte(m_params.MessageStart()[0]);
                nRewind = blkdat.GetPos()+1;
                blkdat >> buf;
                if (memcmp(buf, m_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE)) {
                    continue;
                }
                // read size
                blkdat >> nSize;
                if (nSize < 80 || nSize > MAX_BLOCK_SERIALIZED_SIZE)
                    continue;
            } catch (const std::exception&) {
                // no valid block header found; don't complain
                break;
            }
            try {
                // read block
                uint64_t nBlockPos = blkdat.GetPos();
                if (dbp)
                    dbp->nPos = nBlockPos;
                blkdat.SetLimit(nBlockPos + nSize);
                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();
                CBlock& block = *pblock;
                blkdat >> block;
                nRewind = blkdat.GetPos();

                uint256 hash = block.GetHash();
                {
                    LOCK(cs_main);
                    // detect out of order blocks, and store them for later
                    if (hash != m_params.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {
                        LogPrint(BCLog::REINDEX, "%s: Out of order block %s, parent %s not known\n", __func__, hash.ToString(),
                                block.hashPrevBlock.ToString());
                        if (dbp)
                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));
                        continue;
                    }

                    // process in case the block isn't known yet
                    CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);
                    if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {
                      BlockValidationState state;
                      state.m_chainman = chainman;
                      if (AcceptBlock(pblock, state, nullptr, true, dbp, nullptr, false)) {
                          nLoaded++;
                      }
                      if (state.IsError()) {
                          break;
                      }
                    } else if (hash != m_params.GetConsensus().hashGenesisBlock && pindex->nHeight % 1000 == 0) {
                        LogPrint(BCLog::REINDEX, "Block Import: already had block %s at height %d\n", hash.ToString(), pindex->nHeight);
                    }
                }

                // Activate the genesis block so normal node progress can continue
                if (hash == m_params.GetConsensus().hashGenesisBlock) {
                    BlockValidationState state;
                    state.m_chainman = chainman;
                    if (!ActivateBestChain(state, nullptr)) {
                        break;
                    }
                }

                NotifyHeaderTip(*this);

                // Recursively process earlier encountered successors of this block
                std::deque<uint256> queue;
                queue.push_back(hash);
                while (!queue.empty()) {
                    uint256 head = queue.front();
                    queue.pop_front();
                    std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);
                    while (range.first != range.second) {
                        std::multimap<uint256, FlatFilePos>::iterator it = range.first;
                        std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();
                        if (ReadBlockFromDisk(*pblockrecursive, it->second, m_params.GetConsensus())) {
                            LogPrint(BCLog::REINDEX, "%s: Processing out of order child %s of %s\n", __func__, pblockrecursive->GetHash().ToString(),
                                    head.ToString());
                            LOCK(cs_main);
                            BlockValidationState dummy;
                            dummy.m_chainman = chainman;
                            if (AcceptBlock(pblockrecursive, dummy, nullptr, true, &it->second, nullptr, false)) {
                                nLoaded++;
                                queue.push_back(pblockrecursive->GetHash());
                            }
                        }
                        range.first++;
                        mapBlocksUnknownParent.erase(it);
                        NotifyHeaderTip(*this);
                    }
                }
            } catch (const std::exception& e) {
                LogPrintf("%s: Deserialize or I/O error - %s\n", __func__, e.what());
            }
        }
    } catch (const std::runtime_error& e) {
        AbortNode(std::string("System error: ") + e.what());
    }
    LogPrintf("Loaded %i blocks from external file in %dms\n", nLoaded, GetTimeMillis() - nStart);
}

void CChainState::CheckBlockIndex()
{
    if (!fCheckBlockIndex) {
        return;
    }

    LOCK(cs_main);

    // During a reindex, we read the genesis block and call CheckBlockIndex before ActivateBestChain,
    // so we have the genesis block in m_blockman.m_block_index but no active chain. (A few of the
    // tests when iterating the block tree require that m_chain has been initialized.)
    if (m_chain.Height() < 0) {
        assert(m_blockman.m_block_index.size() <= 1);
        return;
    }

    // Build forward-pointing map of the entire block tree.
    std::multimap<CBlockIndex*,CBlockIndex*> forward;
    for (const std::pair<const uint256, CBlockIndex*>& entry : m_blockman.m_block_index) {
        forward.insert(std::make_pair(entry.second->pprev, entry.second));
    }

    assert(forward.size() == m_blockman.m_block_index.size());

    std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangeGenesis = forward.equal_range(nullptr);
    CBlockIndex *pindex = rangeGenesis.first->second;
    rangeGenesis.first++;
    assert(rangeGenesis.first == rangeGenesis.second); // There is only one index entry with parent nullptr.

    // Iterate over the entire block tree, using depth-first search.
    // Along the way, remember whether there are blocks on the path from genesis
    // block being explored which are the first to have certain properties.
    size_t nNodes = 0;
    int nHeight = 0;
    CBlockIndex* pindexFirstInvalid = nullptr; // Oldest ancestor of pindex which is invalid.
    CBlockIndex* pindexFirstMissing = nullptr; // Oldest ancestor of pindex which does not have BLOCK_HAVE_DATA.
    CBlockIndex* pindexFirstNeverProcessed = nullptr; // Oldest ancestor of pindex for which nTx == 0.
    CBlockIndex* pindexFirstNotTreeValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_TREE (regardless of being valid or not).
    CBlockIndex* pindexFirstNotTransactionsValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_TRANSACTIONS (regardless of being valid or not).
    CBlockIndex* pindexFirstNotChainValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_CHAIN (regardless of being valid or not).
    CBlockIndex* pindexFirstNotScriptsValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_SCRIPTS (regardless of being valid or not).
    while (pindex != nullptr) {
        nNodes++;
        if (pindexFirstInvalid == nullptr && pindex->nStatus & BLOCK_FAILED_VALID) pindexFirstInvalid = pindex;
        if (pindexFirstMissing == nullptr && !(pindex->nStatus & BLOCK_HAVE_DATA)) pindexFirstMissing = pindex;
        if (pindexFirstNeverProcessed == nullptr && pindex->nTx == 0) pindexFirstNeverProcessed = pindex;
        if (pindex->pprev != nullptr && pindexFirstNotTreeValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TREE) pindexFirstNotTreeValid = pindex;
        if (pindex->pprev != nullptr && pindexFirstNotTransactionsValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TRANSACTIONS) pindexFirstNotTransactionsValid = pindex;
        if (pindex->pprev != nullptr && pindexFirstNotChainValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_CHAIN) pindexFirstNotChainValid = pindex;
        if (pindex->pprev != nullptr && pindexFirstNotScriptsValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_SCRIPTS) pindexFirstNotScriptsValid = pindex;

        // Begin: actual consistency checks.
        if (pindex->pprev == nullptr) {
            // Genesis block checks.
            assert(pindex->GetBlockHash() == m_params.GetConsensus().hashGenesisBlock); // Genesis block's hash must match.
            assert(pindex == m_chain.Genesis()); // The current active chain's genesis block must be this block.
        }
        if (!pindex->HaveTxsDownloaded()) assert(pindex->nSequenceId <= 0); // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)
        // VALID_TRANSACTIONS is equivalent to nTx > 0 for all nodes (whether or not pruning has occurred).
        // HAVE_DATA is only equivalent to nTx > 0 (or VALID_TRANSACTIONS) if no pruning has occurred.
        if (!fHavePruned) {
            // If we've never pruned, then HAVE_DATA should be equivalent to nTx > 0
            assert(!(pindex->nStatus & BLOCK_HAVE_DATA) == (pindex->nTx == 0));
            assert(pindexFirstMissing == pindexFirstNeverProcessed);
        } else {
            // If we have pruned, then we can only say that HAVE_DATA implies nTx > 0
            if (pindex->nStatus & BLOCK_HAVE_DATA) assert(pindex->nTx > 0);
        }
        if (pindex->nStatus & BLOCK_HAVE_UNDO) assert(pindex->nStatus & BLOCK_HAVE_DATA);
        assert(((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) == (pindex->nTx > 0)); // This is pruning-independent.
        // All parents having had data (at some point) is equivalent to all parents being VALID_TRANSACTIONS, which is equivalent to HaveTxsDownloaded().
        assert((pindexFirstNeverProcessed == nullptr) == pindex->HaveTxsDownloaded());
        assert((pindexFirstNotTransactionsValid == nullptr) == pindex->HaveTxsDownloaded());
        assert(pindex->nHeight == nHeight); // nHeight must be consistent.
        assert(pindex->pprev == nullptr || pindex->nChainWork >= pindex->pprev->nChainWork); // For every block except the genesis block, the chainwork must be larger than the parent's.
        assert(nHeight < 2 || (pindex->pskip && (pindex->pskip->nHeight < nHeight))); // The pskip pointer must point back for all but the first 2 blocks.
        assert(pindexFirstNotTreeValid == nullptr); // All m_blockman.m_block_index entries must at least be TREE valid
        if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TREE) assert(pindexFirstNotTreeValid == nullptr); // TREE valid implies all parents are TREE valid
        if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_CHAIN) assert(pindexFirstNotChainValid == nullptr); // CHAIN valid implies all parents are CHAIN valid
        if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS) assert(pindexFirstNotScriptsValid == nullptr); // SCRIPTS valid implies all parents are SCRIPTS valid
        if (pindexFirstInvalid == nullptr) {
            // Checks for not-invalid blocks.
            assert((pindex->nStatus & BLOCK_FAILED_MASK) == 0); // The failed mask cannot be set for blocks without invalid parents.
        }
        if (!CBlockIndexWorkComparator()(pindex, m_chain.Tip()) && pindexFirstNeverProcessed == nullptr) {
            if (pindexFirstInvalid == nullptr) {
                // If this block sorts at least as good as the current tip and
                // is valid and we have all data for its parents, it must be in
                // setBlockIndexCandidates.  m_chain.Tip() must also be there
                // even if some data has been pruned.
                if (pindexFirstMissing == nullptr || pindex == m_chain.Tip()) {
                    assert(setBlockIndexCandidates.count(pindex));
                }
                // If some parent is missing, then it could be that this block was in
                // setBlockIndexCandidates but had to be removed because of the missing data.
                // In this case it must be in m_blocks_unlinked -- see test below.
            }
        } else { // If this block sorts worse than the current tip or some ancestor's block has never been seen, it cannot be in setBlockIndexCandidates.
            assert(setBlockIndexCandidates.count(pindex) == 0);
        }
        // Check whether this block is in m_blocks_unlinked.
        std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangeUnlinked = m_blockman.m_blocks_unlinked.equal_range(pindex->pprev);
        bool foundInUnlinked = false;
        while (rangeUnlinked.first != rangeUnlinked.second) {
            assert(rangeUnlinked.first->first == pindex->pprev);
            if (rangeUnlinked.first->second == pindex) {
                foundInUnlinked = true;
                break;
            }
            rangeUnlinked.first++;
        }
        if (pindex->pprev && (pindex->nStatus & BLOCK_HAVE_DATA) && pindexFirstNeverProcessed != nullptr && pindexFirstInvalid == nullptr) {
            // If this block has block data available, some parent was never received, and has no invalid parents, it must be in m_blocks_unlinked.
            assert(foundInUnlinked);
        }
        if (!(pindex->nStatus & BLOCK_HAVE_DATA)) assert(!foundInUnlinked); // Can't be in m_blocks_unlinked if we don't HAVE_DATA
        if (pindexFirstMissing == nullptr) assert(!foundInUnlinked); // We aren't missing data for any parent -- cannot be in m_blocks_unlinked.
        if (pindex->pprev && (pindex->nStatus & BLOCK_HAVE_DATA) && pindexFirstNeverProcessed == nullptr && pindexFirstMissing != nullptr) {
            // We HAVE_DATA for this block, have received data for all parents at some point, but we're currently missing data for some parent.
            assert(fHavePruned); // We must have pruned.
            // This block may have entered m_blocks_unlinked if:
            //  - it has a descendant that at some point had more work than the
            //    tip, and
            //  - we tried switching to that descendant but were missing
            //    data for some intermediate block between m_chain and the
            //    tip.
            // So if this block is itself better than m_chain.Tip() and it wasn't in
            // setBlockIndexCandidates, then it must be in m_blocks_unlinked.
            if (!CBlockIndexWorkComparator()(pindex, m_chain.Tip()) && setBlockIndexCandidates.count(pindex) == 0) {
                if (pindexFirstInvalid == nullptr) {
                    assert(foundInUnlinked);
                }
            }
        }
        // assert(pindex->GetBlockHash() == pindex->GetBlockHeader().GetHash()); // Perhaps too slow
        // End: actual consistency checks.

        // Try descending into the first subnode.
        std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> range = forward.equal_range(pindex);
        if (range.first != range.second) {
            // A subnode was found.
            pindex = range.first->second;
            nHeight++;
            continue;
        }
        // This is a leaf node.
        // Move upwards until we reach a node of which we have not yet visited the last child.
        while (pindex) {
            // We are going to either move to a parent or a sibling of pindex.
            // If pindex was the first with a certain property, unset the corresponding variable.
            if (pindex == pindexFirstInvalid) pindexFirstInvalid = nullptr;
            if (pindex == pindexFirstMissing) pindexFirstMissing = nullptr;
            if (pindex == pindexFirstNeverProcessed) pindexFirstNeverProcessed = nullptr;
            if (pindex == pindexFirstNotTreeValid) pindexFirstNotTreeValid = nullptr;
            if (pindex == pindexFirstNotTransactionsValid) pindexFirstNotTransactionsValid = nullptr;
            if (pindex == pindexFirstNotChainValid) pindexFirstNotChainValid = nullptr;
            if (pindex == pindexFirstNotScriptsValid) pindexFirstNotScriptsValid = nullptr;
            // Find our parent.
            CBlockIndex* pindexPar = pindex->pprev;
            // Find which child we just visited.
            std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangePar = forward.equal_range(pindexPar);
            while (rangePar.first->second != pindex) {
                assert(rangePar.first != rangePar.second); // Our parent must have at least the node we're coming from as child.
                rangePar.first++;
            }
            // Proceed to the next one.
            rangePar.first++;
            if (rangePar.first != rangePar.second) {
                // Move to the sibling.
                pindex = rangePar.first->second;
                break;
            } else {
                // Move up further.
                pindex = pindexPar;
                nHeight--;
                continue;
            }
        }
    }

    // Check that we actually traversed the entire map.
    assert(nNodes == forward.size());
}

std::string CChainState::ToString()
{
    CBlockIndex* tip = m_chain.Tip();
    return strprintf("Chainstate [%s] @ height %d (%s)",
                     m_from_snapshot_blockhash ? "snapshot" : "ibd",
                     tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : "null");
}

bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)
{
    if (coinstip_size == m_coinstip_cache_size_bytes &&
            coinsdb_size == m_coinsdb_cache_size_bytes) {
        // Cache sizes are unchanged, no need to continue.
        return true;
    }
    size_t old_coinstip_size = m_coinstip_cache_size_bytes;
    m_coinstip_cache_size_bytes = coinstip_size;
    m_coinsdb_cache_size_bytes = coinsdb_size;
    CoinsDB().ResizeCache(coinsdb_size);

    LogPrintf("[%s] resized coinsdb cache to %.1f MiB\n",
        this->ToString(), coinsdb_size * (1.0 / 1024 / 1024));
    LogPrintf("[%s] resized coinstip cache to %.1f MiB\n",
        this->ToString(), coinstip_size * (1.0 / 1024 / 1024));

    BlockValidationState state;
    bool ret;

    if (coinstip_size > old_coinstip_size) {
        // Likely no need to flush if cache sizes have grown.
        ret = FlushStateToDisk(state, FlushStateMode::IF_NEEDED);
    } else {
        // Otherwise, flush state to disk and deallocate the in-memory coins map.
        ret = FlushStateToDisk(state, FlushStateMode::ALWAYS);
        CoinsTip().ReallocateCache();
    }
    return ret;
}

static const uint64_t MEMPOOL_DUMP_VERSION = 1;

bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)
{
    const CChainParams& chainparams = Params();
    int64_t nExpiryTimeout = gArgs.GetArg("-mempoolexpiry", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;
    FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / "mempool.dat", "rb")};
    CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);
    if (file.IsNull()) {
        LogPrintf("Failed to open mempool file from disk. Continuing anyway.\n");
        return false;
    }

    int64_t count = 0;
    int64_t expired = 0;
    int64_t failed = 0;
    int64_t already_there = 0;
    int64_t unbroadcast = 0;
    int64_t nNow = GetTime();

    try {
        uint64_t version;
        file >> version;
        if (version != MEMPOOL_DUMP_VERSION) {
            return false;
        }
        uint64_t num;
        file >> num;
        while (num--) {
            CTransactionRef tx;
            int64_t nTime;
            int64_t nFeeDelta;
            file >> tx;
            file >> nTime;
            file >> nFeeDelta;

            CAmount amountdelta = nFeeDelta;
            if (amountdelta) {
                pool.PrioritiseTransaction(tx->GetHash(), amountdelta);
            }
            if (nTime > nNow - nExpiryTimeout) {
                LOCK(cs_main);
                if (AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, tx, nTime, false /* bypass_limits */,
                                               false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {
                    ++count;
                } else {
                    // mempool may contain the transaction already, e.g. from
                    // wallet(s) having loaded it while we were processing
                    // mempool transactions; consider these as valid, instead of
                    // failed, but mark them as 'already there'
                    if (pool.exists(tx->GetHash())) {
                        ++already_there;
                    } else {
                        ++failed;
                    }
                }
            } else {
                ++expired;
            }
            if (ShutdownRequested())
                return false;
        }
        std::map<uint256, CAmount> mapDeltas;
        file >> mapDeltas;

        for (const auto& i : mapDeltas) {
            pool.PrioritiseTransaction(i.first, i.second);
        }

        std::set<uint256> unbroadcast_txids;
        file >> unbroadcast_txids;
        unbroadcast = unbroadcast_txids.size();
        for (const auto& txid : unbroadcast_txids) {
            // Ensure transactions were accepted to mempool then add to
            // unbroadcast set.
            if (pool.get(txid) != nullptr) pool.AddUnbroadcastTx(txid);
        }
    } catch (const std::exception& e) {
        LogPrintf("Failed to deserialize mempool data on disk: %s. Continuing anyway.\n", e.what());
        return false;
    }

    LogPrintf("Imported mempool transactions from disk: %i succeeded, %i failed, %i expired, %i already there, %i waiting for initial broadcast\n", count, failed, expired, already_there, unbroadcast);
    return true;
}

bool DumpMempool(const CTxMemPool& pool, FopenFn mockable_fopen_function, bool skip_file_commit)
{
    int64_t start = GetTimeMicros();

    std::map<uint256, CAmount> mapDeltas;
    std::vector<TxMempoolInfo> vinfo;
    std::set<uint256> unbroadcast_txids;

    static Mutex dump_mutex;
    LOCK(dump_mutex);

    {
        LOCK(pool.cs);
        for (const auto &i : pool.mapDeltas) {
            mapDeltas[i.first] = i.second;
        }
        vinfo = pool.infoAll();
        unbroadcast_txids = pool.GetUnbroadcastTxs();
    }

    int64_t mid = GetTimeMicros();

    try {
        FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / "mempool.dat.new", "wb")};
        if (!filestr) {
            return false;
        }

        CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);

        uint64_t version = MEMPOOL_DUMP_VERSION;
        file << version;

        file << (uint64_t)vinfo.size();
        for (const auto& i : vinfo) {
            file << *(i.tx);
            file << int64_t{count_seconds(i.m_time)};
            file << int64_t{i.nFeeDelta};
            mapDeltas.erase(i.tx->GetHash());
        }

        file << mapDeltas;

        LogPrintf("Writing %d unbroadcast transactions to disk.\n", unbroadcast_txids.size());
        file << unbroadcast_txids;

        if (!skip_file_commit && !FileCommit(file.Get()))
            throw std::runtime_error("FileCommit failed");
        file.fclose();
        if (!RenameOver(gArgs.GetDataDirNet() / "mempool.dat.new", gArgs.GetDataDirNet() / "mempool.dat")) {
            throw std::runtime_error("Rename failed");
        }
        int64_t last = GetTimeMicros();
        LogPrintf("Dumped mempool: %gs to copy, %gs to dump\n", (mid-start)*MICRO, (last-mid)*MICRO);
    } catch (const std::exception& e) {
        LogPrintf("Failed to dump mempool: %s. Continuing anyway.\n", e.what());
        return false;
    }
    return true;
}

//! Guess how far we are in the verification process at the given block index
//! require cs_main if pindex has not been validated yet (because nChainTx might be unset)
double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {
    if (pindex == nullptr)
        return 0.0;

    int64_t nNow = time(nullptr);

    double fTxTotal;

    if (pindex->nChainTx <= data.nTxCount) {
        fTxTotal = data.nTxCount + (nNow - data.nTime) * data.dTxRate;
    } else {
        fTxTotal = pindex->nChainTx + (nNow - pindex->GetBlockTime()) * data.dTxRate;
    }

    return std::min<double>(pindex->nChainTx / fTxTotal, 1.0);
}

std::optional<uint256> ChainstateManager::SnapshotBlockhash() const
{
    LOCK(::cs_main);
    if (m_active_chainstate && m_active_chainstate->m_from_snapshot_blockhash) {
        // If a snapshot chainstate exists, it will always be our active.
        return m_active_chainstate->m_from_snapshot_blockhash;
    }
    return std::nullopt;
}

std::vector<CChainState*> ChainstateManager::GetAll()
{
    LOCK(::cs_main);
    std::vector<CChainState*> out;

    if (!IsSnapshotValidated() && m_ibd_chainstate) {
        out.push_back(m_ibd_chainstate.get());
    }

    if (m_snapshot_chainstate) {
        out.push_back(m_snapshot_chainstate.get());
    }

    return out;
}

CChainState& ChainstateManager::InitializeChainstate(
    CTxMemPool* mempool, const std::optional<uint256>& snapshot_blockhash)
{
    bool is_snapshot = snapshot_blockhash.has_value();
    std::unique_ptr<CChainState>& to_modify =
        is_snapshot ? m_snapshot_chainstate : m_ibd_chainstate;

    if (to_modify) {
        throw std::logic_error("should not be overwriting a chainstate");
    }
    to_modify.reset(new CChainState(mempool, m_blockman, snapshot_blockhash));

    // Snapshot chainstates and initial IBD chaintates always become active.
    if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {
        LogPrintf("Switching active chainstate to %s\n", to_modify->ToString());
        m_active_chainstate = to_modify.get();
    } else {
        throw std::logic_error("unexpected chainstate activation");
    }

    return *to_modify;
}

const AssumeutxoData* ExpectedAssumeutxo(
    const int height, const CChainParams& chainparams)
{
    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();
    const auto assumeutxo_found = valid_assumeutxos_map.find(height);

    if (assumeutxo_found != valid_assumeutxos_map.end()) {
        return &assumeutxo_found->second;
    }
    return nullptr;
}

bool ChainstateManager::ActivateSnapshot(
        CAutoFile& coins_file,
        const SnapshotMetadata& metadata,
        bool in_memory)
{
    uint256 base_blockhash = metadata.m_base_blockhash;

    if (this->SnapshotBlockhash()) {
        LogPrintf("[snapshot] can't activate a snapshot-based chainstate more than once\n");
        return false;
    }

    int64_t current_coinsdb_cache_size{0};
    int64_t current_coinstip_cache_size{0};

    // Cache percentages to allocate to each chainstate.
    //
    // These particular percentages don't matter so much since they will only be
    // relevant during snapshot activation; caches are rebalanced at the conclusion of
    // this function. We want to give (essentially) all available cache capacity to the
    // snapshot to aid the bulk load later in this function.
    static constexpr double IBD_CACHE_PERC = 0.01;
    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;

    {
        LOCK(::cs_main);
        // Resize the coins caches to ensure we're not exceeding memory limits.
        //
        // Allocate the majority of the cache to the incoming snapshot chainstate, since
        // (optimistically) getting to its tip will be the top priority. We'll need to call
        // `MaybeRebalanceCaches()` once we're done with this function to ensure
        // the right allocation (including the possibility that no snapshot was activated
        // and that we should restore the active chainstate caches to their original size).
        //
        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;
        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;

        // Temporarily resize the active coins cache to make room for the newly-created
        // snapshot chain.
        this->ActiveChainstate().ResizeCoinsCaches(
            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),
            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));
    }

    auto snapshot_chainstate = WITH_LOCK(::cs_main, return std::make_unique<CChainState>(
        /* mempool */ nullptr, m_blockman, base_blockhash));

    {
        LOCK(::cs_main);
        snapshot_chainstate->InitCoinsDB(
            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),
            in_memory, false, "chainstate");
        snapshot_chainstate->InitCoinsCache(
            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));
    }

    const bool snapshot_ok = this->PopulateAndValidateSnapshot(
        *snapshot_chainstate, coins_file, metadata);

    if (!snapshot_ok) {
        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());
        return false;
    }

    {
        LOCK(::cs_main);
        assert(!m_snapshot_chainstate);
        m_snapshot_chainstate.swap(snapshot_chainstate);
        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip();
        assert(chaintip_loaded);

        m_active_chainstate = m_snapshot_chainstate.get();

        LogPrintf("[snapshot] successfully activated snapshot %s\n", base_blockhash.ToString());
        LogPrintf("[snapshot] (%.2f MB)\n",
            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));

        this->MaybeRebalanceCaches();
    }
    return true;
}

bool ChainstateManager::PopulateAndValidateSnapshot(
    CChainState& snapshot_chainstate,
    CAutoFile& coins_file,
    const SnapshotMetadata& metadata)
{
    // It's okay to release cs_main before we're done using `coins_cache` because we know
    // that nothing else will be referencing the newly created snapshot_chainstate yet.
    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());

    uint256 base_blockhash = metadata.m_base_blockhash;

    CBlockIndex* snapshot_start_block = WITH_LOCK(::cs_main, return m_blockman.LookupBlockIndex(base_blockhash));

    if (!snapshot_start_block) {
        // Needed for GetUTXOStats and ExpectedAssumeutxo to determine the height and to avoid a crash when base_blockhash.IsNull()
        LogPrintf("[snapshot] Did not find snapshot start blockheader %s\n",
                  base_blockhash.ToString());
        return false;
    }

    int base_height = snapshot_start_block->nHeight;
    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());

    if (!maybe_au_data) {
        LogPrintf("[snapshot] assumeutxo height in snapshot metadata not recognized " /* Continued */
                  "(%d) - refusing to load snapshot\n", base_height);
        return false;
    }

    const AssumeutxoData& au_data = *maybe_au_data;

    COutPoint outpoint;
    Coin coin;
    const uint64_t coins_count = metadata.m_coins_count;
    uint64_t coins_left = metadata.m_coins_count;

    LogPrintf("[snapshot] loading coins from snapshot %s\n", base_blockhash.ToString());
    int64_t flush_now{0};
    int64_t coins_processed{0};

    while (coins_left > 0) {
        try {
            coins_file >> outpoint;
            coins_file >> coin;
        } catch (const std::ios_base::failure&) {
            LogPrintf("[snapshot] bad snapshot format or truncated snapshot after deserializing %d coins\n",
                      coins_count - coins_left);
            return false;
        }
        if (coin.nHeight > base_height ||
            outpoint.n >= std::numeric_limits<decltype(outpoint.n)>::max() // Avoid integer wrap-around in coinstats.cpp:ApplyHash
        ) {
            LogPrintf("[snapshot] bad snapshot data after deserializing %d coins\n",
                      coins_count - coins_left);
            return false;
        }

        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));

        --coins_left;
        ++coins_processed;

        if (coins_processed % 1000000 == 0) {
            LogPrintf("[snapshot] %d coins loaded (%.2f%%, %.2f MB)\n",
                coins_processed,
                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),
                coins_cache.DynamicMemoryUsage() / (1000 * 1000));
        }

        // Batch write and flush (if we need to) every so often.
        //
        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins
        // means <5MB of memory imprecision.
        if (coins_processed % 120000 == 0) {
            if (ShutdownRequested()) {
                return false;
            }

            const auto snapshot_cache_state = WITH_LOCK(::cs_main,
                return snapshot_chainstate.GetCoinsCacheSizeState());

            if (snapshot_cache_state >=
                    CoinsCacheSizeState::CRITICAL) {
                LogPrintf("[snapshot] flushing coins cache (%.2f MB)... ", /* Continued */
                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));
                flush_now = GetTimeMillis();

                // This is a hack - we don't know what the actual best block is, but that
                // doesn't matter for the purposes of flushing the cache here. We'll set this
                // to its correct value (`base_blockhash`) below after the coins are loaded.
                coins_cache.SetBestBlock(GetRandHash());

                coins_cache.Flush();
                LogPrintf("done (%.2fms)\n", GetTimeMillis() - flush_now);
            }
        }
    }

    // Important that we set this. This and the coins_cache accesses above are
    // sort of a layer violation, but either we reach into the innards of
    // CCoinsViewCache here or we have to invert some of the CChainState to
    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load
    // method.
    coins_cache.SetBestBlock(base_blockhash);

    bool out_of_coins{false};
    try {
        coins_file >> outpoint;
    } catch (const std::ios_base::failure&) {
        // We expect an exception since we should be out of coins.
        out_of_coins = true;
    }
    if (!out_of_coins) {
        LogPrintf("[snapshot] bad snapshot - coins left over after deserializing %d coins\n",
            coins_count);
        return false;
    }

    LogPrintf("[snapshot] loaded %d (%.2f MB) coins from snapshot %s\n",
        coins_count,
        coins_cache.DynamicMemoryUsage() / (1000 * 1000),
        base_blockhash.ToString());

    LogPrintf("[snapshot] flushing snapshot chainstate to disk\n");
    // No need to acquire cs_main since this chainstate isn't being used yet.
    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.

    assert(coins_cache.GetBestBlock() == base_blockhash);

    CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};
    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };

    // As above, okay to immediately release cs_main here since no other context knows
    // about the snapshot_chainstate.
    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());

    if (!GetUTXOStats(snapshot_coinsdb, WITH_LOCK(::cs_main, return std::ref(m_blockman)), stats, breakpoint_fnc)) {
        LogPrintf("[snapshot] failed to generate coins stats\n");
        return false;
    }

    // Assert that the deserialized chainstate contents match the expected assumeutxo value.
    if (AssumeutxoHash{stats.hashSerialized} != au_data.hash_serialized) {
        LogPrintf("[snapshot] bad snapshot content hash: expected %s, got %s\n",
            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());
        return false;
    }

    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);

    // The remainder of this function requires modifying data protected by cs_main.
    LOCK(::cs_main);

    // Fake various pieces of CBlockIndex state:
    CBlockIndex* index = nullptr;
    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {
        index = snapshot_chainstate.m_chain[i];

        // Fake nTx so that LoadBlockIndex() loads assumed-valid CBlockIndex
        // entries (among other things)
        if (!index->nTx) {
            index->nTx = 1;
        }
        // Fake nChainTx so that GuessVerificationProgress reports accurately
        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;

        // Fake BLOCK_OPT_WITNESS so that CChainState::NeedsRedownload()
        // won't ask to rewind the entire assumed-valid chain on startup.
        if (index->pprev && DeploymentActiveAt(*index, ::Params().GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {
            index->nStatus |= BLOCK_OPT_WITNESS;
        }
    }

    assert(index);
    index->nChainTx = au_data.nChainTx;
    snapshot_chainstate.setBlockIndexCandidates.insert(snapshot_start_block);

    LogPrintf("[snapshot] validated snapshot (%.2f MB)\n",
        coins_cache.DynamicMemoryUsage() / (1000 * 1000));
    return true;
}

CChainState& ChainstateManager::ActiveChainstate() const
{
    LOCK(::cs_main);
    assert(m_active_chainstate);
    return *m_active_chainstate;
}

bool ChainstateManager::IsSnapshotActive() const
{
    LOCK(::cs_main);
    return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();
}

CChainState& ChainstateManager::ValidatedChainstate() const
{
    LOCK(::cs_main);
    if (m_snapshot_chainstate && IsSnapshotValidated()) {
        return *m_snapshot_chainstate.get();
    }
    assert(m_ibd_chainstate);
    return *m_ibd_chainstate.get();
}

bool ChainstateManager::IsBackgroundIBD(CChainState* chainstate) const
{
    LOCK(::cs_main);
    return (m_snapshot_chainstate && chainstate == m_ibd_chainstate.get());
}

void ChainstateManager::Unload()
{
    for (CChainState* chainstate : this->GetAll()) {
        chainstate->m_chain.SetTip(nullptr);
        chainstate->UnloadBlockIndex();
    }

    m_blockman.Unload();
}

void ChainstateManager::Reset()
{
    LOCK(::cs_main);
    m_ibd_chainstate.reset();
    m_snapshot_chainstate.reset();
    m_active_chainstate = nullptr;
    m_snapshot_validated = false;
}

void ChainstateManager::MaybeRebalanceCaches()
{
    if (m_ibd_chainstate && !m_snapshot_chainstate) {
        LogPrintf("[snapshot] allocating all cache to the IBD chainstate\n");
        // Allocate everything to the IBD chainstate.
        m_ibd_chainstate->ResizeCoinsCaches(m_total_coinstip_cache, m_total_coinsdb_cache);
    }
    else if (m_snapshot_chainstate && !m_ibd_chainstate) {
        LogPrintf("[snapshot] allocating all cache to the snapshot chainstate\n");
        // Allocate everything to the snapshot chainstate.
        m_snapshot_chainstate->ResizeCoinsCaches(m_total_coinstip_cache, m_total_coinsdb_cache);
    }
    else if (m_ibd_chainstate && m_snapshot_chainstate) {
        // If both chainstates exist, determine who needs more cache based on IBD status.
        //
        // Note: shrink caches first so that we don't inadvertently overwhelm available memory.
        if (m_snapshot_chainstate->IsInitialBlockDownload()) {
            m_ibd_chainstate->ResizeCoinsCaches(
                m_total_coinstip_cache * 0.05, m_total_coinsdb_cache * 0.05);
            m_snapshot_chainstate->ResizeCoinsCaches(
                m_total_coinstip_cache * 0.95, m_total_coinsdb_cache * 0.95);
        } else {
            m_snapshot_chainstate->ResizeCoinsCaches(
                m_total_coinstip_cache * 0.05, m_total_coinsdb_cache * 0.05);
            m_ibd_chainstate->ResizeCoinsCaches(
                m_total_coinstip_cache * 0.95, m_total_coinsdb_cache * 0.95);
        }
    }
}
namespace particl {


bool AddToMapStakeSeen(const COutPoint &kernel, const uint256 &blockHash)
{
    // Overwrites existing values

    std::pair<std::map<COutPoint, uint256>::iterator,bool> ret;
    ret = mapStakeSeen.insert(std::pair<COutPoint, uint256>(kernel, blockHash));
    if (ret.second == false) { // existing element
        ret.first->second = blockHash;
    } else {
        listStakeSeen.push_back(kernel);
    }

    return true;
};


bool CheckStakeUnique(const CBlock &block, bool fUpdate)
{
    LOCK(cs_main);

    uint256 blockHash = block.GetHash();
    const COutPoint &kernel = block.vtx[1]->vin[0].prevout;

    std::map<COutPoint, uint256>::const_iterator mi = mapStakeSeen.find(kernel);
    if (mi != mapStakeSeen.end()) {
        if (mi->second == blockHash) {
            return true;
        }
        return error("%s: Stake kernel for %s first seen on %s ", __func__, blockHash.ToString(), mi->second.ToString());
    }

    if (!fUpdate) {
        return true;
    }

    while (listStakeSeen.size() > MAX_STAKE_SEEN_SIZE) {
        const COutPoint &oldest = listStakeSeen.front();
        if (1 != mapStakeSeen.erase(oldest)) {
            LogPrintf("%s: Warning: mapStakeSeen did not erase %s %n\n", __func__, oldest.hash.ToString(), oldest.n);
        }
        listStakeSeen.pop_front();
    }

    return AddToMapStakeSeen(kernel, blockHash);
}



} //namespace particl


